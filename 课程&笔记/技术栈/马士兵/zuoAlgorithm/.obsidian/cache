{"files":{"LeetCode高频题/leetcode高频题目全讲(1).md":{"mtime":1597753014620.909,"size":520,"hash":"632f0d15ac2c78fc92b7bcec93673a1c550514ddc98f54bbe95ed60e4a57462c"},"LeetCode高频题/leetcode高频题目全讲(2).md":{"mtime":1598666988826.7725,"size":588,"hash":"3e0f33ef884b7120973e332dff418cb23b29f3613349a9d7579b4946934397c7"},"Picture/Pasted image 1 1.png":{"mtime":1595639611342.9136,"size":81985,"hash":"72a3c8a4af0a0e9ab115a26364bff053232742100c8faf896aeaf063195f3d4f"},"Picture/Pasted image 1.png":{"mtime":1595592832400.6787,"size":89951,"hash":"3e08ccbc20fb57472299203a3563632089549f0b40c5d651ad3926b1049ff5e8"},"Picture/Pasted image 10.png":{"mtime":1595639956988.0083,"size":290376,"hash":"8ba94bf9d272639c74ce77f718de2cda2aa835428b789d6ef05a38465faac5ee"},"Picture/Pasted image 11.png":{"mtime":1595640090999.6062,"size":208560,"hash":"596be8f65207181fb9eecb14e14a3554ee7b63a183c859be70e8bee881c0adc4"},"Picture/Pasted image 12.png":{"mtime":1595640153770.3809,"size":129195,"hash":"e18174ec67d6f79b0f28aedffdb22c6610824097788d658ef32d35567f3ca020"},"Picture/Pasted image 13.png":{"mtime":1595640188248.8083,"size":114615,"hash":"66a914b79ac9415632fae24c63123648b7fcb41c3910817a262643ee45a43453"},"Picture/Pasted image 14.png":{"mtime":1595834818449.42,"size":14569,"hash":"2f8d260354fe66272803d43b9f414e44bb9c25a5deae1e42752106b19c26a5a2"},"Picture/Pasted image 15.png":{"mtime":1595917423682.917,"size":30764,"hash":"a97b53f92dbbecf2e2cb4de2b1491909beb4c8edfae471f76caa88ba1acb6173"},"Picture/Pasted image 16.png":{"mtime":1596169667621.586,"size":143415,"hash":"dad8f4cd92a62f2cc14892c6a10934f9df0c94ade5298026d2848a9e49f03ed1"},"Picture/Pasted image 17.png":{"mtime":1595914008764.075,"size":74332,"hash":"e9ef88c0481ea3797bcede67f4f2a0a178252365e0a52acb4eb85b64097d53ed"},"Picture/Pasted image 18.png":{"mtime":1596169680040.352,"size":35562,"hash":"32725b514e10b749fbaf36843241efb9ed11bd407ae8926d24a7de12f2768f8b"},"Picture/Pasted image 19.png":{"mtime":1596170176168.6536,"size":6761,"hash":"6e68ce6d2afcb84b559ccfd1a32e8067252c61b7cf1b30630364ebbdf829c55d"},"Picture/Pasted image 2.png":{"mtime":1595592841651.429,"size":107715,"hash":"710ed621455f811d370de9d1e1b3045f9b2329e6195898cdfc50fd960ce7f7eb"},"Picture/Pasted image 20.png":{"mtime":1596170183242.7231,"size":9676,"hash":"2b7254ee9ffe0c479032afad367bc96d682174d0a6b65f71bd95617e1a4dfd8c"},"Picture/Pasted image 21.png":{"mtime":1596902144594.7737,"size":6383,"hash":"4c54ef2fd98c993ae38324b1b80d19b48f8af52ee8e6cc71b17fc58166e1248e"},"Picture/Pasted image 22.png":{"mtime":1596900268801.422,"size":2709,"hash":"088c23fd31a8e8cb4718cbea4179e2d69986dbab2d35e6d896e78a82916e70a1"},"Picture/Pasted image 23.png":{"mtime":1596900933114.2373,"size":1929,"hash":"8b09dc7c4870227e8dbca332829841760be0e59ebcc91eed7b882ad3ef04fc3b"},"Picture/Pasted image 24.png":{"mtime":1596901973248.4797,"size":8195,"hash":"192572a0db5e9fa86a0599ebdb693e2071b880c74f31e003d426715930380bda"},"Picture/Pasted image 26.png":{"mtime":1596907492623.0793,"size":6820,"hash":"18fa70d084df99e053f03a915489bdd512be7aa46ee736a8813ae5e749d2d680"},"Picture/Pasted image 3.png":{"mtime":1595592907154.3672,"size":92192,"hash":"29dd13c0713f1e2f0a09f7364a8922b8255bd05aaeec62d60b455dfa8a9994cb"},"Picture/Pasted image 4.png":{"mtime":1595592946041.5754,"size":56608,"hash":"fd9ab257bd8860f1548f0a77797cde1784cdfc7973bc8acc5e14d7ea10affb45"},"Picture/Pasted image 5.png":{"mtime":1595593005462.9387,"size":46439,"hash":"0721a67a9ecf9b6ee5ce9873b6477f954abaf447e4c39a00c8e4470b0c38c32c"},"Picture/Pasted image 6.png":{"mtime":1595593134478.8904,"size":57945,"hash":"d1f91fde4da6dbe60a179915587ab91e0061d48f86b1e3febc81d6e9a2cd8fcf"},"Picture/Pasted image 7.png":{"mtime":1595639510674.6846,"size":76617,"hash":"905ea238ac6b7129eb1a7ae2e23e1d8db31aa83262565bd4343edff525a9837a"},"Picture/Pasted image 8.png":{"mtime":1595639766745.2388,"size":110284,"hash":"9e0e2c3570a9bcabbf9fc9318a65e017c64bfb4c01c2ce99bf21e470f4c12cd5"},"Picture/Pasted image 9.png":{"mtime":1595639865746.4724,"size":175461,"hash":"99adf3f85d115e64777803f63d19c271c62b190139af979c60415be191bfcfab"},"Picture/Pasted image.png":{"mtime":1595592787161.704,"size":79123,"hash":"d23e0350ce2cefa5bd6f89b4986b05f1a1e0d9e1cf75bf5778812d2ca4481fb1"},"_学习大纲/LeetCode高频题.md":{"mtime":1599267535871.4153,"size":400,"hash":"04cb801cd9b19e3555e93bf4feb78d491a1cce6659e5bcc8fb6a17dc039f4c32"},"_学习大纲/基础班课程.md":{"mtime":1598538733717.1628,"size":575,"hash":"8765d4516ba010801cba3753b491a204afe25d2ea428bb96355a286907318b11"},"_学习大纲/复习安排.md":{"mtime":1599206089264.2788,"size":412,"hash":"9e9b75f48fdfcf08021e6ac618f104b32f287dee35a40295676103c6ad9d6d42"},"_学习大纲/待处理文档.md":{"mtime":1598546581831.574,"size":1,"hash":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"},"_学习大纲/进阶班课程.md":{"mtime":1598629611164.711,"size":809,"hash":"0f122e91232ff0a59cbeca3b188708f4d4c121040aa24586dbfd670cece9a5cc"},"_学习大纲/重新录.md":{"mtime":1598763268379.2173,"size":66,"hash":"351faee69e3409bc973f7ab24a174efae293677d8487c404304911bbf2b2fe5f"},"_编程基础工具/利用归并排序做信息统计.md":{"mtime":1596908920937.786,"size":154,"hash":"fd3db03248114b1e68974a105f115f66210b7f1f5815db5615b6c9f2d31418d0"},"_编程基础工具/压缩数组技巧.md":{"mtime":1597842486027.8596,"size":138,"hash":"429cbf9b1bf631acce0eb019b32bfb46bb6f9626fb24f60c4094c743025f2147"},"_编程基础工具/数组L...R范围上的累加和计算.md":{"mtime":1596907798316.6404,"size":118,"hash":"06b2d959e9451682f51db6f054b127563596a90763a9ecfa46ea71039b108ecc"},"_编程基础工具/求数组中的逆序对数量.md":{"mtime":1596908925073.2866,"size":272,"hash":"aea30f0874df37c3e15f81d321f370bea8b0d76e3c4f89e2569a9fc758343a52"},"_编程基础工具/荷兰国旗问题.md":{"mtime":1596907867471.557,"size":292,"hash":"795138a2a51debda0d04f1f26d5c628411c8ede79e977c8ac8f683f464fe7aa7"},"_编程基础工具/长方形中任意矩阵的累加和.md":{"mtime":1596908352700.9175,"size":1029,"hash":"e8662434bb1a90633afd865682352f33a6834b28d90dc9f905cf847a777c5603"},"代码模板/bfprt代码.md":{"mtime":1596814369908.0913,"size":2218,"hash":"ad8061d51db21f6b82a98801ed064876589b218ec768c7a705f8fe482138d1f0"},"代码模板/Dijkstra算法代码.md":{"mtime":1596815440494.2302,"size":4980,"hash":"0ceed81b3056a84cd5f4a5cc1a163bbc596af12ad2251abd0c88ff789eb97cb1"},"代码模板/KMP代码.md":{"mtime":1596813852611.419,"size":1215,"hash":"8247f7b942ca790b1b79082fb9e10c69af8677dd9ba2021d22d8da675101c2b4"},"代码模板/Kruskal算法代码.md":{"mtime":1596814512410.7085,"size":807,"hash":"d2ab0abfdaf627800f4ca10a4373371a9e0e15215b330a1308c94f6c9c87a3c3"},"代码模板/LFU内存替换算法的实现.md":{"mtime":1596907938742.009,"size":718,"hash":"d07e2bae8b43bfdb047b0c2c9e7e593b72c402f0012565a7439007b8029726d3"},"代码模板/LRU内存替换算法的实现.md":{"mtime":1596562811464.5415,"size":2991,"hash":"8a90b73fa0f0f67505be6f5b176fb353c3839e63b8f81ce6e2f456b7181d117d"},"代码模板/Manacher算法代码.md":{"mtime":1597031915967.197,"size":1212,"hash":"1c5a2a35a1f62fcb3e7db2b6ff2a4010aa8eb29b2d7d910b72e23659d5b75ee1"},"代码模板/Morris实现中序遍历.md":{"mtime":1596814086604.5383,"size":607,"hash":"0ec0eed5bab2de84874332820dd95cb349b5c52d7eb55c0795ebbbe0e4758865"},"代码模板/Morris实现前序遍历.md":{"mtime":1596814061161.2383,"size":622,"hash":"a60a684b153449cf77d1d27108c565847dc71ab7301ef5629458adfb45b56fa2"},"代码模板/Morris实现后序遍历.md":{"mtime":1596814131815.5762,"size":1025,"hash":"e4d7d19d0598ca42dba2b8281922e2d180d77025e6dc15fe568cc977b81bfdf0"},"代码模板/Morris遍历代码.md":{"mtime":1596814016339.0933,"size":873,"hash":"18864c15e3422e23c44ca60dbe1bd327c791dc42f117f49b848f12ff03df5678"},"代码模板/Prim算法代码.md":{"mtime":1596814700772.0193,"size":2129,"hash":"1d07793762337606b98feb2b7730795a2a1b96db528d5e47759224fb78d6d9a5"},"代码模板/SB树代码.md":{"mtime":1596814810600.1323,"size":3334,"hash":"315d40e404352bec176bf5d406f1c2b9ed8f68d5e67dd028b32e9e3ba473eae0"},"代码模板/两个有序数组求上中位数.md":{"mtime":1597118047638.8064,"size":42,"hash":"12a898d5fcbb19be59da192c73bbd2a38905b48de0bbc0389a36a1dcff73de21"},"代码模板/冒泡排序.md":{"mtime":1596813625068.339,"size":1130,"hash":"e9a52dea2a4284a5538503ef6b09031ea1e3540871ec5f43eb5064cf25f642cc"},"代码模板/哈希表实现前缀树.md":{"mtime":1595942943827.2217,"size":45,"hash":"31da367e97fc7afcc3fcd351722a632cea20fcfbd46471fd0bdf52ca27801ffa"},"代码模板/图的拓扑排序算法.md":{"mtime":1596567054810.0476,"size":1139,"hash":"20658c81dfab0f1237ac8982d69ccffbc4d1c9738a578a46792e2a380d68dfbd"},"代码模板/图的统一表述结构.md":{"mtime":1596567659607.7158,"size":1770,"hash":"d4a6255cb164bbe2c408b18d268047e7890732c4651032f713406f5615ed9a85"},"代码模板/基数排序.md":{"mtime":1596196117679.1687,"size":1651,"hash":"cc2160ef278bfa3aa6d4772f7499ccaeb2bba69f8943c0bbc1207b683b7db2f0"},"代码模板/堆排序.md":{"mtime":1597941002067.281,"size":2131,"hash":"9e233a7167be0568b8a92d37327f3c4b798e59df47560b2871e77880bc822efd"},"代码模板/字符串的全排列代码.md":{"mtime":1597891014157.7842,"size":794,"hash":"1dd6efd3da6fbe81d85c1b82efb81521ed9d5ba50c85b21c63a55e9336a49ebf"},"代码模板/完美洗牌算法代码.md":{"mtime":1596815289427.426,"size":67,"hash":"69d44d2f0784c393d426b31c16a8395606df85983d0b11d8e90d366c26b4b171"},"代码模板/对数器.md":{"mtime":1596812815001.2134,"size":2104,"hash":"fcf6b594531d7633bf9838863f4c2c95fc810451907356190da47d654ecf7cf4"},"代码模板/并查集代码.md":{"mtime":1596813585834.9475,"size":1549,"hash":"4d72065fe6cf9cab6c830253b1bf6f01a5520cafef16a5abb953b1df9f129c63"},"代码模板/归并排序.md":{"mtime":1596549200597.376,"size":1954,"hash":"66e31cd2f6cdc43eb44d19b42f4acffb8b91bf25f688c6afcf4bff47a467f7d0"},"代码模板/快速排序.md":{"mtime":1596551608070.9836,"size":4696,"hash":"938a413c3a70bbcd60d237294df0e95acc5581847094a2005523fb7536b4ca74"},"代码模板/手写堆代码.md":{"mtime":1597942014866.1387,"size":2029,"hash":"1d444faff072be46e06b605fd8f4456aad54a90dff9c7c54480cc4acfc3fd1c3"},"代码模板/插入排序.md":{"mtime":1596548535420.5684,"size":1411,"hash":"671bc11dd2d00cbcb3795cc8204bc3b4b1ebd63b645bd0e872b5432a86418c69"},"代码模板/数组L...R范围上的累加和计算代码.md":{"mtime":1596907771277.4949,"size":87,"hash":"f8dff514c3960c6f21505879f078d6f7bd342722531296b2f5760544559934ef"},"代码模板/数组中离给定K值最近的子数组累加和代码.md":{"mtime":1597841317318.025,"size":880,"hash":"ded1a0328fdc67e3604edfd9ffa6dac296503b82ef03590d452f5d3962319717"},"代码模板/比较器.md":{"mtime":1596811854903.158,"size":1885,"hash":"c86f39fc3997f076745a4e39156a8273054234a017999e341f789a806e148ca1"},"代码模板/求数组中的逆序对数量代码.md":{"mtime":1596908797492.7188,"size":840,"hash":"7894f78be8e6a31d4b826f41ad1b6fc8f844a61215af4787bda1a41ca1255aac"},"代码模板/求数组小和代码.md":{"mtime":1596908496277.1016,"size":1070,"hash":"7d73ed7555759a562f73561bad506ea844aeecc24f8608e7a49e4852c3bf013b"},"代码模板/没有小括号的表达式结果计算.md":{"mtime":1597153284381.1404,"size":49,"hash":"3c55882f57301682c1f8eeccaae48b02118ff7b124ff34fc624e5ac67f0c33de"},"代码模板/线段树代码.md":{"mtime":1596812779973.8972,"size":4050,"hash":"36b26bb253db863b6adc8fc29aaa286c9127b434900ce28495f7e9e18f9aedc6"},"代码模板/荷兰国旗问题代码.md":{"mtime":1596908080405.06,"size":799,"hash":"922d3bee5ae42401f04bba84adc5d1130e980176a62258b434142135e3d2db74"},"代码模板/计数排序.md":{"mtime":1596196026458.2869,"size":558,"hash":"189a3b987e361059edf4f3f98ea15cad02fc4acd61783b6e1fb982d0e6f4bdb3"},"代码模板/选择排序.md":{"mtime":1596195365517.043,"size":1137,"hash":"ff1ce51b112a8454741494cc7366bf9080710aa3ce1fe1b363f6d13d95b3c355"},"代码模板/长方形中任意矩阵的累加和代码.md":{"mtime":1596907725224.5806,"size":721,"hash":"1e0a2559b7b95415bb5419a3b1cb0931ab84d3d4fb49c1c34b5d0e551b193118"},"代码模板/随机生成双向链表.md":{"mtime":1596812284637.8174,"size":1507,"hash":"dcad8aeffecc572789ab30d81ca25c548721762a1f6e4d56592f46563c14f63e"},"分类总结/DP中斜率优化.md":{"mtime":1597191133720.239,"size":391,"hash":"52daa12eac996343353600cefba3403a216020998f596e33f1662ace4821a1eb"},"分类总结/不算差的平凡解杀死可能性的技巧.md":{"mtime":1597246419423.9363,"size":928,"hash":"da857bc7ad42d0c5d6c84376ac8ae66f48f105e6f1e83455039ecdec64d03b60"},"分类总结/从左往右的尝试模型.md":{"mtime":1599282030934.3723,"size":261,"hash":"b34217f5ebbfab82751ad3370e0063167b0408390ac6f6e1baf4eb1baf303c6b"},"分类总结/外部信息简单化的处理技巧.md":{"mtime":1597456506240.4143,"size":44,"hash":"8ba69bb11b7d9795863a5c7de456bde09e1693df94013670e0233bc852359ba9"},"分类总结/多样本位置全对应的尝试模型.md":{"mtime":1598765294459.2,"size":139,"hash":"33e5ad8d4403be435946b9c7af26a5ff93214a81d497522cd3c576734a9eeaf4"},"分类总结/寻找业务限制的尝试模型.md":{"mtime":1598191182086.556,"size":130,"hash":"e1ae20d0a1d242ca5fc5ae4fde296daae42b7a5ee03229f7d153e23dc516adf3"},"分类总结/所有编译原理,括号优先级表达式的处理办法.md":{"mtime":1597153288789.4026,"size":151,"hash":"a94a8a2a51f5c7e8684c92e8c635df0ae230e4b290858c36aade2408aab43b12"},"分类总结/故意设计出来, 卡常数时间的题.md":{"mtime":1597224600016.2822,"size":467,"hash":"9bbde7894082660c2edc39ba0fcc976732efeec2b913b28da25aa8de77b036ad"},"分类总结/有关可能性舍弃的题.md":{"mtime":1596810387458.7854,"size":635,"hash":"e5e8c3e49f9fd36b288634263f6f947660a251f33b7d0f2fe9fb09a19ab05da3"},"分类总结/算法水平快速提高的难题.md":{"mtime":1598629230576.2856,"size":680,"hash":"bfb11852aca4829602979f39ae7c83302b72e79e28d63007b1dd8c57f0036581"},"分类总结/系统设计之UUID.md":{"mtime":1596809773388.5786,"size":240,"hash":"cbb6fccc2460e2519441e0bc936f4e2cd59848960323234c3e5dcf6c8f1cb2e1"},"分类总结/范围上的尝试模型.md":{"mtime":1597998865758.0605,"size":145,"hash":"8e902c2ebbb9ecbe810eb3cb936399f0451364935996a639351d2a2d5d4300d3"},"分类总结/解决子数组问题的两种想法.md":{"mtime":1596807728981.844,"size":330,"hash":"0e66e3303f6ab69d69f06db81ad3663d1b38b3309902449964fce0422a52c088"},"分类总结/记忆化搜索跟经典动态规划.md":{"mtime":1597226047342.9631,"size":1491,"hash":"bfad831c56787098d5fdef8b010bd397001fc4ac25b9e53ee83f057168000035"},"基础课/01 认识复杂度、对数器、二分法与异或运算.md":{"mtime":1596812951770.2693,"size":7656,"hash":"b3d90d8671a610fed88a4155d3d3a68ae6a69f9bc1a6f0df64fc916ed2533105"},"基础课/02 链表结构、栈、队列、递归行为、哈希表和有序表.md":{"mtime":1596552688116.4773,"size":5120,"hash":"31c6ff5d7a4c2a91f5aadd6e5fa1f2736f09a8821915fd0ede13c7b243b223a0"},"基础课/03 归并排序与随机快排.md":{"mtime":1597852434251.678,"size":3133,"hash":"e615822987de10db09735acd1e88bdea37c3c7d604c9b35d0ba508718b36a834"},"基础课/04 比较器与堆.md":{"mtime":1596812991696.8137,"size":1422,"hash":"eb29a807a9337eba71cded98d20311948fc0b789599db6cc829585653ceb7a3e"},"基础课/05 trie、桶排序、排序总结.md":{"mtime":1596813110417.455,"size":3860,"hash":"e40b7e34c12f981a8dab88e025cf207c0219ed826d44531f9c4fb1f3f251dfaa"},"基础课/06 链表相关面试题.md":{"mtime":1596504404101.2422,"size":2750,"hash":"229e3caae4ce9e9b9e785f610af924b669ba0b4347c635f28914afb4e3bc112a"},"基础课/07 二叉树的基本算法.md":{"mtime":1596508327638.5269,"size":1248,"hash":"103d1ee5a80c624e717f847a767b875f5a2504d901b21e724d8d3b8a60eae45e"},"基础课/08 二叉树的递归套路.md":{"mtime":1596508271918.5723,"size":1348,"hash":"c70578f51a3b2696a64ff17a08b6470318064763ff750a661efb1177f7a26ee5"},"基础课/09 贪心算法.md":{"mtime":1596647890469.0127,"size":1606,"hash":"cee7e0994355086ecf8806cabcba9e873b8011258ac28c299c4bdaba62055c3d"},"基础课/10 并查集结构和图相关的算法.md":{"mtime":1597925963085.7698,"size":4376,"hash":"0df694a0113b317812f8ed1e968a6a7854b8137dc7624e5ce71ca05f701beff0"},"基础课/11 暴力递归.md":{"mtime":1597978427565.2053,"size":2181,"hash":"2c2880e1b54acb76ea30b7257dcabc063a51678527aa6b517095812264ec62d6"},"基础课/12 暴力递归到动态规划.md":{"mtime":1598765294470.1702,"size":3389,"hash":"52628a623723dce1c0ce7824556086e72cacea44d246f13254ad08c816e9729d"},"数学基础/剃刀函数与坐标系移动.md":{"mtime":1597153596090.8127,"size":127,"hash":"2514285d5048051769e541d83804a110a402116f148da9850a15d9a02d84e718"},"数学基础/排列组合.md":{"mtime":1596008790675.3474,"size":1948,"hash":"5154d5cf3ac988f2eb0fc160c0db7a18915ce25259456ec1b9a57938275421b7"},"数学基础/牛顿迭代法开根号.md":{"mtime":1596181914619.7168,"size":33,"hash":"8b5069c37da5464b43fae680ca78f89e32c9b36bb5c2b08fa236d3f72c020ac6"},"数学基础/程序中的随机函数.md":{"mtime":1596908292086.6511,"size":34,"hash":"35eee46af24beb6dab25be392e377a7320817290633b5f8a384cc2b26bc41f46"},"数学基础/约瑟夫环.md":{"mtime":1597153584737.4153,"size":36,"hash":"3c82a842101c4ae98b0282d8cda3d3eab7544c5f6873cac34142a3163ec24405"},"算法知识点/AC自动机.md":{"mtime":1595922870032.8826,"size":822,"hash":"cc2eab140837cb545a34fdf455972e5f96bc3438efcdab614f408b26cd7161df"},"算法知识点/AVL树.md":{"mtime":1595922777448.6458,"size":375,"hash":"4d891f4a800e924e147686a7f521341a3b254d1df9203623d510b40c66f1db9a"},"算法知识点/AVL树、SB树、红黑树的共性与不同.md":{"mtime":1595947802745.7908,"size":807,"hash":"45c15c5ae4c286c9e56aa52fada33644496a4eeb6c3ee44e8a8fe786aed72db6"},"算法知识点/bfprt算法.md":{"mtime":1596814256778.5742,"size":884,"hash":"4dc0e75a8463782dd8a823341d22c4ca5b4e370aabcdf97aaf6d1f42ae4a8f5d"},"算法知识点/Dijkstra算法.md":{"mtime":1596815443924.5916,"size":563,"hash":"1ebd1ffba336d945c0663ae36012e2256156ddbf6472b9f3dc013cbf10ad127a"},"算法知识点/KMP算法.md":{"mtime":1596813857531.3018,"size":266,"hash":"2f1420fad2d6534ebbd58405ea5d955320cbec7a59322654406850a8f196b839"},"算法知识点/Manacher算法.md":{"mtime":1596813903994.9937,"size":488,"hash":"9f3966c51bb55cdcbc82e3769ed3aea0d17217aefb272e5bbc6b3e1bae419ad2"},"算法知识点/Master公式.md":{"mtime":1596564211920.509,"size":491,"hash":"e78ea2e9f7950b7f2e796086fb38839f7a9b6101fb59c9b49467dd73c88c6ee1"},"算法知识点/Morris遍历.md":{"mtime":1596813938031.2278,"size":916,"hash":"f2bb2d645c7f6c8ad3dc8eb7633de3c54bbcaef65fe34f1da6512be55ca83635"},"算法知识点/SB树（size-balance-tree）.md":{"mtime":1596815303713.3843,"size":809,"hash":"342b3533850fc21880546eb07d43f2f9dd24917a2aa096c3ab139c10770100b8"},"算法知识点/Trie数 or 前缀树 or 字典树.md":{"mtime":1596814218707.9849,"size":93,"hash":"b7064c4f74d6e3ab9d9d349529f0b58491827e05044d13588bfd64048f9580a1"},"算法知识点/TSP问题.md":{"mtime":1598025581129.9834,"size":906,"hash":"7cd0c6603544571498cdba3b6f5fcc75dc95ac9fa3a08163566f74da7f304998"},"算法知识点/_图论知识点.md":{"mtime":1596182356516.1484,"size":258,"hash":"4278f45ea0b8da461e4b877ff95eec53fcb4837a9122b1ea4cf279c702d96d02"},"算法知识点/_字符串知识点.md":{"mtime":1596184557457.6719,"size":141,"hash":"b34eb7ce7ae681c537b8a4f9c2bba3dee457d5c8cc89520a1a5b274cd152b093"},"算法知识点/_数学基础知识点.md":{"mtime":1599293459442.7124,"size":104,"hash":"182f4d64306e4d5e76c3c85977c67f93ecce50d7d907c44e5327ddb579ada2ea"},"算法知识点/_暴力递归改动态规划的套路.md":{"mtime":1596555071383.135,"size":1427,"hash":"3ace72aa42ac2ed82539f480cc39c6026d6e3bfc0e7f0ffac3cb6883d1a128ad"},"算法知识点/一致性哈希.md":{"mtime":1595948422498.044,"size":156,"hash":"7428d445b55bde898935d9a3a46e1961557c17eed621f2d2117e3f1030270320"},"算法知识点/为何要对 1000000007 取模？.md":{"mtime":1596021842006.2124,"size":2293,"hash":"53ecba177ab977407e2135aeb7ebd5b9db0411ec3000be5c87574bb7fafc43d9"},"算法知识点/单调栈是什么？.md":{"mtime":1598621663894.4314,"size":613,"hash":"735f4a66eb012f95a6b7c59622e1079f38556e62e9f690ed92e97bf7f4c6196a"},"算法知识点/卡特兰数.md":{"mtime":1595948091525.7944,"size":587,"hash":"df792140b16329d98d28dc02f0789941fb9904bf91726403d69950e01152dac1"},"算法知识点/后缀数组.md":{"mtime":1596178765733.5132,"size":1143,"hash":"db4f9b03a34df700fa353f6854e03fbe8a09cf85bd6b165f065f26c415252346"},"算法知识点/外排序.md":{"mtime":1596179466835.281,"size":1060,"hash":"a3a6b7819ef89316d2ce4f12eb5ab54d02217e1f44f428e3cbec8547404c3f62"},"算法知识点/字典序.md":{"mtime":1597765473308.0469,"size":890,"hash":"aa1b018dd95eecb7ab5f64cb3e1cdcf267275c384290d01f7ab490b6fe06ebd6"},"算法知识点/完美洗牌算法.md":{"mtime":1596815317598.4065,"size":84,"hash":"02ca90e67e83a9cfde8b9320dbbe14931ffd4a5292fa4ca7377d5c250d6e613c"},"算法知识点/宽度优先遍历.md":{"mtime":1595947632264.9243,"size":232,"hash":"66e9d207113204af5429ea98ae9ba187dfcc4fa9f6ab48fada12ccdf6a79fb4c"},"算法知识点/布隆过滤器.md":{"mtime":1598555011944.12,"size":720,"hash":"def86f49050b9275d52e1aebdb660c8174887eae7b6f5dd3f4e849bd94a8eaf7"},"算法知识点/并查集.md":{"mtime":1597926426417.3384,"size":460,"hash":"807ae0026b76d13126fa05359e90a06e6b44a67dae9f96afa9d8cbbb32fbb5bf"},"算法知识点/并行算法.md":{"mtime":1595948325762.3103,"size":251,"hash":"5aafdaea10288394fc2d85c3da42961e77b5c17f0d94e59debb483fe3c7fc8d9"},"算法知识点/手写堆.md":{"mtime":1598718581193.3755,"size":321,"hash":"cefa8af8bdc97e45bfa33ee90b1fd8692a016b5c3aacdbe2a297001da6755177"},"算法知识点/打表法.md":{"mtime":1595922346590.674,"size":672,"hash":"3dc40a4386c48829811c01d518c5a2c840a640dd77ee8f89014ab056fac24281"},"算法知识点/搜索二叉树.md":{"mtime":1595948235000.1394,"size":1256,"hash":"0d27d1d05976f8f245063791d4b4c6232fce7a4018266288bcf7445723a93c0c"},"算法知识点/改写有序表的题目核心点.md":{"mtime":1595915642328.9678,"size":345,"hash":"75424ec1cca7321512e5e795d18717bf5a109e5dc63e4e18f27299ee2b2d468e"},"算法知识点/数位DP.md":{"mtime":1597190672257.3542,"size":97,"hash":"9be6d83919cbffa1d7cecef4b8d5ff0bdc2efd766138366f043ce0b985ea9ee8"},"算法知识点/最小生成树算法之Kruskal.md":{"mtime":1596814523852.7524,"size":490,"hash":"1c4f8d44c522f3bafc82422bc2212e4daf5ba5fd11ccb0a0ab653779e41e3e4e"},"算法知识点/最小生成树算法之Prim.md":{"mtime":1596814702053.1106,"size":563,"hash":"7bf3cd4a831c192b619ac178cf72a7e965d481283cd485b285a11f9d973d10bd"},"算法知识点/树型dp.md":{"mtime":1596184624558.1033,"size":16,"hash":"4b58103f7e40389032e8b16da8f1a41c194a9915f8fcd70975673951d56b93b9"},"算法知识点/深度优先遍历.md":{"mtime":1597890742669.959,"size":406,"hash":"2cde11b9728af7b179949826961cbe8ae5b51086261dcecb98fa04aa735cdc4e"},"算法知识点/滑动窗口、单调栈怎么用？.md":{"mtime":1595921284385.209,"size":445,"hash":"71c17062c5f3f490351ac545ffb3dade8165e7c0dee3a03e31582fb1c9359d04"},"算法知识点/滑动窗口是什么？.md":{"mtime":1595920974563.2622,"size":723,"hash":"8e288453d46d96a5bff45ce5b94b7aa335ad1ea974ff7947e88bc8b0836bb7cc"},"算法知识点/矩阵处理技巧.md":{"mtime":1595922374989.675,"size":186,"hash":"e6338bd7738b25e4519572eb2da8ac9c53e7139c868af8f86f902f472dbd2be7"},"算法知识点/红黑树.md":{"mtime":1598495242637.7375,"size":434,"hash":"0172ee60afdbc77f34610e552abea51cc6ddad32013233c88761b267cc455fb0"},"算法知识点/线段树.md":{"mtime":1596812816888.6704,"size":823,"hash":"a96c5099d7e54cd61218dac4ddc1323186bf7cd915d53b5895db2aa7be08633a"},"算法知识点/网络流.md":{"mtime":1597739855689.6477,"size":68,"hash":"e444ad93f3dec89f4a30f298261085dfa9ba7466fc5763ab0824c646834c7034"},"算法知识点/蓄水池算法.md":{"mtime":1596521401234.6904,"size":126,"hash":"ec2d2f7d6e3228a32de937ccf1135ab9967bd7e5b091645c83b13efc191b02ff"},"算法知识点/认识哈希函数.md":{"mtime":1595922602886.7964,"size":639,"hash":"f24ea684759cd4603232a3af8cc4f173dabb284ae09ceb1d32fe21bf6471290f"},"算法知识点/资源限制技巧汇总.md":{"mtime":1596543606869.2275,"size":2735,"hash":"0cbf054ae35ff7588e83980a8e9ffd1d9062436c08ef0aa6523757cb1bd633c2"},"算法知识点/跳表（skiplist）.md":{"mtime":1596185171412.6555,"size":278,"hash":"c7a99fdbd793b3b5331f48ca22e18877ccdfd39567fc283299366a84b0cb022f"},"练习题/算法课练习小题.md":{"mtime":1598550500048.791,"size":269,"hash":"4d30d83c02ba25ceb42c54e63436a2da5ebd75e3d4d3a7a127040195b7c50b77"},"背诵知识点/_基础知识点.md":{"mtime":1596815148859.673,"size":557,"hash":"ab485d58d410b24c41492f4b513ca6808b3724bd6985da12ca55ce4f26d5a4e2"},"背诵知识点/基础面试题.md":{"mtime":1599223333966.817,"size":587,"hash":"10d79a13e89c1f4a32b39a973f4baee41a2dcb09a50e6f5f9449287d163fe24c"},"背诵知识点/高级知识点.md":{"mtime":1598555144912.4114,"size":468,"hash":"6966124ca374d34aa809ef70672101cc589f6e034537a3900c23f8c3792f813f"},"训练营第1期/第1节 滑动窗口和单调栈.md":{"mtime":1595921971473.534,"size":499,"hash":"86404bef4a1d1bf10707ffb36799dafc3702859fcbe6bb8509d75e6efcc81b28"},"训练营第1期/第2节 求斐波那契数列矩阵乘法的方法.md":{"mtime":1598551056314.7024,"size":425,"hash":"bef784cfeb33393d2b3e7506fdb3b470a23120bfa1d0940ab639c7ad793f8958"},"训练营第1期/第3节 bfprt算法及蓄水池算法.md":{"mtime":1595940386727.7288,"size":173,"hash":"8759f7ddb79232b002126eadd205661457b4856bea09e402a2b75fa8a9b72af6"},"训练营第1期/第4节 KMP算法.md":{"mtime":1595922179959.6,"size":212,"hash":"82368d963255639a61e158cc579fa352715ac24708a275d14ae5e5368525bbbd"},"训练营第1期/第5节 Manacher算法.md":{"mtime":1596647262082.4211,"size":230,"hash":"6a2bf0361bc461ed9ea1b74eb8e93587bf1e70bd1c6a44a17590b883e7daf9f5"},"训练营第1期/第6节 Morris遍历.md":{"mtime":1595922236759.5942,"size":171,"hash":"1c07191027a5439d958ae34a6b5ed952c0dd8656600e54d090d31915eefe34f0"},"训练营第1期/第7节 线段树.md":{"mtime":1596784109071.027,"size":221,"hash":"0b926e893bb0c040ef80759f4f71b52491641883bd350a361c487785d04351f4"},"训练营第1期/第8节 AC自动机.md":{"mtime":1595922295623.0684,"size":93,"hash":"d77a53cdc6ac7dedca889675bb87fb5eb3c7d0f27e68eacdfcdf5556b542e2b3"},"训练营第2期/第10节 数组累加和问题三连.md":{"mtime":1597841696011.7874,"size":731,"hash":"256c2d2941f61d8c82cde99b416fad4c17bc81821c7228667dbe800028881a77"},"训练营第2期/第11节 哈希函数有关的结构和岛问题.md":{"mtime":1595948381946.1123,"size":358,"hash":"51590af86a8c83fe8f36fe51310cfbbb194995b0485801ba807b5124ef4f3b1d"},"训练营第2期/第12节 如何解决资源限制类题目.md":{"mtime":1598551056331.6558,"size":677,"hash":"47a03de4d88b931ddc5c60fb240f756dc0447bbd8f515cbed8a471d907dec282"},"训练营第2期/第13节 有序表的原理、应用、扩展.md":{"mtime":1595947849394.0918,"size":412,"hash":"24f2a8f7638c49260a9a0978be22205fa9898157d45eb975e86d6f5443edc8d2"},"训练营第2期/第14节 SB树、跳表、红黑树.md":{"mtime":1598504105067.6528,"size":584,"hash":"1b36ae19ffa24747dc0ac10feab117f30433308d4ccf0c1fd8b13182819165d9"},"训练营第2期/第15节 有序表的原理、应用、扩展（二）.md":{"mtime":1598505499929.1914,"size":238,"hash":"a5da98d0fbf0708e675fe17b63198285a614f5578d1aff189f6bbf0afbc3c0ca"},"训练营第2期/第9节 打表法及矩阵处理技巧.md":{"mtime":1596802849297.435,"size":509,"hash":"9bb0f6bb48289fc2adcbc14bd737a1f30659f4ca35513053a033acf7b8a53c0a"},"训练营第3期/第1节.md":{"mtime":1598538999576.5576,"size":370,"hash":"401aba82801907f46e88e946a8dd1c553185a1e59de56f20354dd8f74ca2da4c"},"训练营第3期/第2节.md":{"mtime":1595947389384.9285,"size":418,"hash":"92ffb8b7b0284eef409379f5dbb579fc40c1d68e43721d21f406597474d5492f"},"训练营第3期/第3节.md":{"mtime":1598542649417.7063,"size":400,"hash":"4f2d1d5cfaa1c6d3a6178c946d0d7fbe8318e15fce371141e28add03cec38dcd"},"训练营第3期/第4节.md":{"mtime":1595914372910.5776,"size":459,"hash":"cec55784ef6e22047b86bb9c99ed5130958bc0d481a7659f45961b7107068092"},"训练营第3期/第5节.md":{"mtime":1599622277584.6096,"size":326,"hash":"c90d6145c7aeb39ccd2a99babf8b9a4eda3ebfb5b16ff789735a90a8cd9f4c27"},"训练营第3期/第6节.md":{"mtime":1595913650678.3555,"size":369,"hash":"cfdc9e73a221d5b0e7e9f0639f3729db7a3e6b550cc22e33745840b8ccbb1a9e"},"训练营第3期/第7节.md":{"mtime":1595913390030.8796,"size":519,"hash":"808f0ddf3cd0d35de69e7e91821723e7c803a3325c94a89f1d8baeac13b87812"},"训练营第3期/第8节.md":{"mtime":1595913066320.1453,"size":330,"hash":"314b1b8f5cfb89cf8ffd6873ff9626073b0b79bc494decee1555203c9546bc86"},"训练营第4期/第1节.md":{"mtime":1595869766621.0442,"size":321,"hash":"c270ce3d6bf5702683f5c3b1dcaec6eeeca1fd02e4f75f6023e07d411c0af6de"},"训练营第4期/第2节.md":{"mtime":1595869472673.1804,"size":376,"hash":"8250614d59aa8bae6b8c2fffbab11f85d9b03b5bc9d5c785c1b6ea6bddb299ff"},"训练营第4期/第3节.md":{"mtime":1597106311699.0356,"size":330,"hash":"6cc47ffb257aac17341596ab3eac7aa2966eb45c0a63b727334594176e039ce7"},"训练营第4期/第4节.md":{"mtime":1597106324303.0037,"size":315,"hash":"ea580726287191e164331ef803b38025b38d28162f28debc1c4518f0bc4e07b0"},"训练营第4期/第5节.md":{"mtime":1598548979052.992,"size":151,"hash":"b0135dccc57d655d2770f1e37b920e65f6b61ea18128924f572f83365e3814ee"},"训练营第4期/第6节.md":{"mtime":1598549246255.5085,"size":290,"hash":"3d5e5ef5bfa2fbb6bd7657972f41381373b6794bcb63e2a06ec2290e99652872"},"训练营第4期/第7节.md":{"mtime":1595836454512.12,"size":203,"hash":"35fdc5cdb758b112858047405f6563652245785ae5d97c2e01ebaeda93af93b5"},"训练营第4期/第8节.md":{"mtime":1595835326586.584,"size":204,"hash":"7372a83a6b3550594085ea77804b30615d69385503e2bda6e38f2b3232fc0852"},"训练营第5期/第1节.md":{"mtime":1596249620784.0977,"size":210,"hash":"06fc8b36b5601b669978d2ef1c3dfa105e546d248e4f95008631db8910015a1f"},"训练营第5期/第2节.md":{"mtime":1596170269173.761,"size":160,"hash":"e9485942e619bcf2cd0d909279d3d1fae1b13a7d03192aca48037a283004c454"},"训练营第5期/第3节.md":{"mtime":1597100324691.9988,"size":260,"hash":"50a4b5263d3acd050e09b4c62a48f4da0a0e49cfbf3d55dfbc533920e44c3417"},"训练营第5期/第4节.md":{"mtime":1596172292565.974,"size":148,"hash":"68557a182e35f893d22a2cda9c2b62f1390ae752eb329dc6dbf40e8d579f4492"},"训练营第5期/第5节.md":{"mtime":1596177680377.055,"size":256,"hash":"c1be8e7eed681c16cf68c045abf6456e3eb5c4cc0f7191c2ea0c26d94b432742"},"训练营第5期/第6节.md":{"mtime":1596178184404.218,"size":133,"hash":"7ec43f41ff8909de11c4e603e8c9db49a139e864d77a41dcc0cb599e45d5dcbb"},"训练营第5期/第7节.md":{"mtime":1596178576951.714,"size":57,"hash":"987cdfdddcdc14d7d69ae046a4d666f5385616fd93d35ef8070ddda1b4b7dc98"},"训练营第5期/第8节.md":{"mtime":1598552413030.474,"size":132,"hash":"27b6473e59f89a91ab4856f88f2e8559e5ded70a11b89e946b0d9ca1df52760c"},"算法知识点/博弈论问题.md":{"mtime":1598025407038.4873,"size":144,"hash":"c0d1ffe27ecdb9c9a3e708041f02e46007fc949aa5660dd2fb3228782c7efc37"},"分类总结/递归能力练习题目.md":{"mtime":1597848096056.2654,"size":574,"hash":"9cfc973e1d56de5052cd1eb4610e1b4810da5794911e8c7667f9473492dcd9a5"},"算法知识点/贪心算法.md":{"mtime":1597917513381.8748,"size":1808,"hash":"805c8252deb20c92eb235a1e420e722f6e901fac32e2f3d64774bb0eaa5fda76"},"数学基础/排序算法的传递性.md":{"mtime":1597890238388.4536,"size":2104,"hash":"7b007b0af7403dc4c9b8e9e57d527037c47203dec9840ba3c24407086a861545"},"分类总结/跟面试官聊的算法.md":{"mtime":1597926680980.296,"size":82,"hash":"232f74ee9a7f932a6d3bd418f928f98663fef0da3b031ab7b51a84b8450df97e"},"分类总结/子数组问题求解.md":{"mtime":1597841136611.8218,"size":456,"hash":"c3edffd40fd54153cf4fb66cc4520f4f448bfacc24fa59839b5ce4b0adbe7313"},"_编程基础工具/预处理数组.md":{"mtime":1598593456722.812,"size":155,"hash":"bfafacdcb50a576034313eb8f7b64f20304455322d9b05100e6e1292eec370d0"},"算法知识点/字符串子串和子序列的区别.md":{"mtime":1598713658383.9194,"size":404,"hash":"d6fa69460d155f1a15b438b4e6a8ab91947d0c96a0a8ff2c60bb73d9d15762b0"},"分类总结/算法学习Tips.md":{"mtime":1598025627134.9695,"size":1563,"hash":"6609be3fcba6c33a8a296a676e5b7ee8917181d5860330bb95b6d9bc524b51d5"},"算法知识点/包含每个数组至少一个数的最窄的且开始位置最小的区间.md":{"mtime":1598495429607.075,"size":338,"hash":"40adb2a50bf9357c939a769230b0e0aa036b695a8d2809e3e6c925fd73ba4c82"},"分类总结/需要改写有序表的题目.md":{"mtime":1598505543848.7,"size":103,"hash":"823035b08c491abc470be1f799f61d676e713e8a9f69c23e1cb53599137ef97f"},"算法知识点/动态规划中的四边形不等式优化.md":{"mtime":1598550044736.311,"size":119,"hash":"447d3849713e4601f6068e451bbd992808d939f80fd8a6c7d70bec21f721f51a"},"训练营第2期/第16节 AC自动机.md":{"mtime":1598550904006.1482,"size":48,"hash":"8aaed9f1b72e56ecfb554874ca5bddcd6850dcc06f4824d1858987ac8278c12d"},"面试题汇总/100亿个URL的大文件中找出其中所有重复的URL.md":{"mtime":1595922682036.9792,"size":422,"hash":"0c82edd5c20e4fd1bd9023da764504f9381e505c62bb308e6db1d868b64f1194"},"面试题汇总/1~N中所有数字包含1的个数.md":{"mtime":1597190615574.933,"size":177,"hash":"3702e35b3dbe5457b9a7f33fdc29895fd62f86270d6dc70b603cbc373ac573c9"},"面试题汇总/40亿个无符号整数找出所有出现了两次的数.md":{"mtime":1595922686543.9172,"size":246,"hash":"2fbd9fa5f2188e3959eb36fd69db8c71a7b127ec9640617c4d3fcadfa55ea807"},"面试题汇总/40亿个无符号整数的中位数.md":{"mtime":1595922693828.4233,"size":231,"hash":"894f301339b1736020aa91f76eb74e0bc32e9e28cb1a8d0a759349402d62301b"},"面试题汇总/40亿个无符号整数的文件中找到出现次数最多的数.md":{"mtime":1595922669397.8027,"size":284,"hash":"f0d26635e4a2ebc81088ca22096215c5ed57b836629e7b806acce1e660b526b9"},"面试题汇总/40亿个无符号整数的文件中找到所有未出现过的数.md":{"mtime":1595922672581.2832,"size":426,"hash":"56198fffde24363568cf7b7db24752b7b646759619f252cc59a0e45bc53186b1"},"面试题汇总/A,B玩家从左右两边拿纸牌,返回最后获胜者的分数.md":{"mtime":1595946236348.6304,"size":411,"hash":"8bb585a5f5f8f1d79d5ae5c93af46ee0d78de41375b54e76fd4a64795e6d1e44"},"面试题汇总/Nim博弈问题.md":{"mtime":1595837569663.8662,"size":330,"hash":"6aa295b04a56365537e23d00003fcd16525f49e79df1242e5bcc18ce0c36534a"},"面试题汇总/N皇后问题.md":{"mtime":1595946292118.097,"size":356,"hash":"a28b7606307848a9b0ec54293743365d5058ff8f0f4c985138c501e313b6553b"},"面试题汇总/zigzag打印矩阵.md":{"mtime":1595922379211.3813,"size":46,"hash":"799351dec8bf1951d94ac44fc2b165615185a856b35935fa4f6eac29e25c2aa7"},"面试题汇总/“马”从(0,0)位置出发，必须走k步最后落在(x,y)上的方法数有多少种.md":{"mtime":1595946833062.7808,"size":461,"hash":"929643f1612c4094b5e3b2dd58ceff47cf210e0617508bd15a53d7528e4fcfe6"},"面试题汇总/一个人迈上N级台阶的方法数.md":{"mtime":1595920754914.651,"size":158,"hash":"6cb445229973ce6f29aaea0a46de368b45337c35f661519260a492d76fd3a5d5"},"面试题汇总/一个数组中出现了奇数次的数.md":{"mtime":1595941050453.041,"size":177,"hash":"79c09fa0086c5c60a8a09ab4fb02f668b7ddae205e8d9132f8b28dd4a6b27397"},"面试题汇总/一个数组中出现奇数次的两个数.md":{"mtime":1595941164045.0557,"size":184,"hash":"6d72b41fca95407785059563c0c102f73fb771a2a5deedafdf51d1a3c450f0d5"},"面试题汇总/一条直线最多能穿过多少个点.md":{"mtime":1595913384897.5964,"size":242,"hash":"a027162b8f39b4e19de2caabeef45d0df1968f5d4e28fa9c825a3985ab2d8fc1"},"面试题汇总/一根长度为K的绳子，最多能盖住几个点.md":{"mtime":1598587225533.141,"size":314,"hash":"7d13107436218da2e380663228813197d8cb25ffc9864506050b083b595747f0"},"面试题汇总/一种消息接收并打印的结构设计.md":{"mtime":1595912771977.8403,"size":408,"hash":"669304025f4b2339af7c935bc2b49cfc03a817eb3429da5fb8514278f1d04515"},"面试题汇总/不给单链表的头节点删除指定节点.md":{"mtime":1595943923182.8398,"size":188,"hash":"7eedc47faecb64197f9510d5ebe0c1ed03055653ea381aedf4495d9a56cbf96f"},"面试题汇总/丢棋子问题.md":{"mtime":1596354590827.787,"size":2241,"hash":"bc1c6e536490828a5c57f61d4c7dfd63c19ac29dfb5712a894d7b7484ba90098"},"面试题汇总/两个可能有环的单链表相交的第一个节点.md":{"mtime":1595943870036.3523,"size":405,"hash":"10a7113bfaf593bf4398213753229602bbb87218aad7b594cac691f800d8273c"},"面试题汇总/两个字符串的最短的变换路径.md":{"mtime":1595913809741.683,"size":666,"hash":"c09c73d613b15fa6aa5c940935edf055973e76bb9e8a33514578092eaadf0c8a"},"面试题汇总/两个字符串的最长公共子串.md":{"mtime":1598765256513.8442,"size":299,"hash":"980d327c6d814551273c2febbddd07025215df44960fcfabe95f98ca439a9a2a"},"面试题汇总/两个字符串的最长公共子序列问题.md":{"mtime":1595946747311.2424,"size":72,"hash":"072501f7cef323a50f931f26330b538d8303c1bfd541c01ec9d9e2aaa024bd2d"},"面试题汇总/两个字符的最长公共子序列.md":{"mtime":1598765232234.0564,"size":285,"hash":"ee791ad2aaba8dac272e6e146d47957ed70fce7ffde2fdf7e6853636e35d8329"},"面试题汇总/两个有序数组中最大的k个数.md":{"mtime":1597118099994.4653,"size":277,"hash":"be6cb51f32338888d67ff2e4d26680482aea14177de3b599784d85d6deeb2fa3"},"面试题汇总/两人操作开关比赛.md":{"mtime":1596802689847.4546,"size":390,"hash":"496aa8951c87c0961b0e25530ea6cf9abeb8cf1e0017ad379902eb29a73c2f7a"},"面试题汇总/两数之和.md":{"mtime":1597739429186.262,"size":64,"hash":"d49439b3deba2562eabf3a14a44f7c79b79068d663f7b35d16b049d28c932d96"},"面试题汇总/两数相加.md":{"mtime":1597739453901.6511,"size":70,"hash":"9061bda1e6eab7c2738076881b4411453e75681c4616c8a74ee821e46ad6fedd"},"面试题汇总/两棵二叉树是否有一致结构的子树.md":{"mtime":1595922199009.62,"size":183,"hash":"1ed30f91293b710864d03b9d6bd7120838fbefe66809423636257f89dacaa341"},"面试题汇总/主播们能获得的最大收益.md":{"mtime":1595914012912.974,"size":374,"hash":"4714bf40a994868c708edc99bc3992ef182f0acaa6e3d0d1277cc64b8bb8e6f8"},"面试题汇总/乘客坐船使用的最少船数.md":{"mtime":1597115434057.864,"size":358,"hash":"eb3d55dfea4793f616f1cf1fff8ba0f2c8512ab9a0fdb38f021f81620c9396f4"},"面试题汇总/二叉树上两个节点的最低公共祖先.md":{"mtime":1595944808728.9214,"size":187,"hash":"ae2269e46256c4128a903eb94a4d9478ffc5670c701b82cafc8393da018e4218"},"面试题汇总/二叉树中指定节点的后继节点.md":{"mtime":1595944288528.73,"size":239,"hash":"66453a37d080dc5e0e86edc75c5adcef449b95d65e64bc7223ef1ddc5c410355"},"面试题汇总/二叉树中最大的二叉搜索子树的大小.md":{"mtime":1595944644897.3613,"size":188,"hash":"c80ba2a6803520f1683e93089af3bd166b5a6468867303a0574df92fc9424c6a"},"面试题汇总/二叉树中最大的二叉搜索子树的头节点.md":{"mtime":1595944727148.7168,"size":194,"hash":"98c6570b0abcab523bd52be3abe7695d970b7df4ed48be0f82a155f292344757"},"面试题汇总/二叉树放置照相机.md":{"mtime":1596269752457.3887,"size":838,"hash":"cd1f1f06903a4c6cd44b2de8d1182b9aecf36d939477f3d99a2f33461831e8a8"},"面试题汇总/二叉树的序列化和反序列化.md":{"mtime":1595944121731.047,"size":244,"hash":"579ad331b050c8b8d840b4c17d4f968aadd962a5cfbeb4954cde4b5178f678fe"},"面试题汇总/二叉树的最大路径和.md":{"mtime":1598629836020.8967,"size":475,"hash":"455616267ad8159ec6c7adb13990b01e9343da7ab7530b30c2f05f3999f5cd8f"},"面试题汇总/二叉树的最小深度.md":{"mtime":1595919977623.7764,"size":126,"hash":"c4a1b9682e61945d63dbd2a039de55be47c241f0e96f34cbdd53f9466a70fe66"},"面试题汇总/二叉树节点间最近公共祖先的批量查询问题.md":{"mtime":1596172615140.2341,"size":1083,"hash":"a498223c89cc8308d9cfc7a5c914fb8c3d453cf83d68d9ba1b1fb206ffb0915e"},"面试题汇总/二维01矩阵中一共有多少个岛.md":{"mtime":1596184899964.0852,"size":197,"hash":"0d41a3778edfa1d43c0980b21afad70c186862fa59ebf509964490329409eada"},"面试题汇总/二维数组中可以走出的单词.md":{"mtime":1595869670915.657,"size":500,"hash":"7730ba42f57790a502bf5c7a883fc1c51a0480ea5d069481cc8510b2e0214861"},"面试题汇总/二维数组中离给定K值最近的子矩阵累加和.md":{"mtime":1597842539276.1492,"size":305,"hash":"460fa281cf356ea85b3628a8568cca9b1228826513bd42fbd31894b6888ec66d"},"面试题汇总/二维数组最大递增链的长度.md":{"mtime":1595869515209.346,"size":361,"hash":"7b880a2c189e5d1937b4eda6833755beede359ae3c86e0623a76078a317dc376"},"面试题汇总/二维数组最小路径和.md":{"mtime":1595915766821.81,"size":272,"hash":"0376c2aa77b92f080ade0c91d936d4b3d3752bc022682534b2c375f71bfb6f98"},"面试题汇总/二维数组直方图装水.md":{"mtime":1595914859849.9749,"size":152,"hash":"7aefe5437bf1ff2d5bf02d7a174826aac6879682f9af79ef0e74578fa7a8142c"},"面试题汇总/从上到下打印所有折痕的方向.md":{"mtime":1595944377294.9326,"size":601,"hash":"659e050ddc09de8b24b741408c448a093d0b7dc6a1b47ae040db8d65a21acc7b"},"面试题汇总/以最少的跳跃次数跳到最后一个数.md":{"mtime":1595913502426.099,"size":255,"hash":"48ffe4c8b1283ed77171a3460736daabfa28b253ce3b195640ed404217eab310"},"面试题汇总/会议室能容纳的最多宣讲场次.md":{"mtime":1595945315247.6196,"size":321,"hash":"225909e2c4781ed82bf3ef8f03c5833d4f39c975498087c22fa6146e94d05857"},"面试题汇总/使每个打包机器上的物品数量相等需要搬动的最小轮数.md":{"mtime":1598607492928.838,"size":1142,"hash":"06b341bf12b7455ad2b2a2be2d90212c0d4381f10d59816da9aea8a553689d04"},"面试题汇总/使用单词表拼接长字符串的方法数.md":{"mtime":1595868757995.74,"size":272,"hash":"e44e50be388962f9eb360426222302728e9187be4cea6cd91172f303bf10239d"},"面试题汇总/做项目获得的最大钱数.md":{"mtime":1595945381555.0764,"size":465,"hash":"60c1d2b70c80048ed467dd4abbeb6530464512841e9e69e1b3b43a3b29771ef5"},"面试题汇总/全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1.md":{"mtime":1596177525215.286,"size":242,"hash":"7358689ac5e48cd39610686a13d05b7cbe6eb26a9d7d80bbeeb07f1f037e4b47"},"面试题汇总/全是小写字母的字符串str，删除多余字符后达到字典序最小.md":{"mtime":1595913318523.219,"size":503,"hash":"b31433f8e0192378886773137986b555698b12618a80e5f962b933345b80cc77"},"面试题汇总/分糖果问题.md":{"mtime":1596169805978.3306,"size":971,"hash":"eb171afc08f8d26d9996bd2beb721d350679b3d21924a418a50d1705f1eff2b1"},"面试题汇总/判断二叉树中是不是完全二叉树.md":{"mtime":1595944761009.5247,"size":169,"hash":"441282104055a725e22c35a4889422cff37ce918da0d659b707273b67880cf72"},"面试题汇总/判断二叉树是不是平衡二叉树.md":{"mtime":1595944508305.3274,"size":161,"hash":"76ef52c2f3abc0eca6a4c7f360ff69d16524b732e4e9aab0e32350f5e12d1818"},"面试题汇总/判断二叉树是不是搜索二叉树.md":{"mtime":1595944611880.8896,"size":164,"hash":"388da5210ec8d85d74600833f901aafbf1cf2d4b33dd147b3523548f4a391543"},"面试题汇总/判断二叉树是不是满二叉树.md":{"mtime":1595944575294.8545,"size":157,"hash":"949487df123efc880924b6a76165bbb9d4221da627c6f348732b3d30b5c0fe59"},"面试题汇总/判断字符串aim是否是str1和str2交错组成.md":{"mtime":1595913646269.1562,"size":532,"hash":"6a830a4b3ef837af8fd1005f7d71365eec9b6b37c2e4afc44f68db7afbda3cdb"},"面试题汇总/判断链表是否为回文结构.md":{"mtime":1595943686801.8477,"size":2488,"hash":"03740b6d60b42f8c170b8bddcb7a530e931b7a9dac890447c6f51fb2a33af90d"},"面试题汇总/单链表和双链表如何反转.md":{"mtime":1595941317525.3264,"size":52,"hash":"232182bf70dc88de3c5feb63a072d0d61531e05febb60e297e95678983ec31ce"},"面试题汇总/卡特兰数题目一.md":{"mtime":1595922899044.242,"size":183,"hash":"643b00a79008ab02d4f60789037d0d10e907b56b8fd60e757afdf71ed3a11efa"},"面试题汇总/卡特兰数题目二.md":{"mtime":1595922906234.0005,"size":196,"hash":"f90d5440c31ee8864897a4b090bd1dec6ae577eb02d9c3ab62b2b5050897bd0e"},"面试题汇总/原地旋转正方形矩阵.md":{"mtime":1595922405739.3853,"size":58,"hash":"33c75f1d14d3f4decf3ce80573dff3c905bb7bccf2d75f8361ae10589a255468"},"面试题汇总/双向链表实现栈和队列.md":{"mtime":1595941419806.6082,"size":60,"hash":"459e3297483d989274ec0007d8a259874294326a3e646472caaa6edde9a3e9a3"},"面试题汇总/只做一次交易买卖股票的最大钱数.md":{"mtime":1595869177384.4092,"size":266,"hash":"5c18d912d314c3fcf816ff966936339bd679a14038d6d702abac343f1dcb79e8"},"面试题汇总/合并相邻K个数字的最小代价.md":{"mtime":1595835341907.585,"size":1142,"hash":"5244d910352c90574a880fd8abef539eaf9a27ef3e25548f5b9b0d4f364d0ee9"},"面试题汇总/喝咖啡的最好时间.md":{"mtime":1597106274394.9255,"size":393,"hash":"6a30600e1f9d2ce542631093b1a56d20453b5fdc196bae8fc02904dee6021ef3"},"面试题汇总/喝完咖啡并洗完咖啡杯的时间点.md":{"mtime":1595837725480.8933,"size":712,"hash":"0973e65e76f03cee06ef55c20ef71bc6220deb0e2d688a099d87bff9936c43eb"},"面试题汇总/固定数组实现前缀树.md":{"mtime":1595942921739.0686,"size":49,"hash":"519ee0b142c2eff67fda11a21f5e2c939691710123749ac6034c218c11758bfe"},"面试题汇总/在一个字符串中找到没有重复字符子串中最长的长度.md":{"mtime":1595913350602.371,"size":377,"hash":"e53d9ed155330d98a84949972eb796d0e71a84653d55ddff662f0fe16c5e1cda"},"面试题汇总/在一个有序数组中，找大于等于某个数最左侧的位置.md":{"mtime":1595940826085.9524,"size":90,"hash":"1546c15eb7bda2b40aa286da4cb3fdc43ad8b6b2355f66a925288482e7e6f00c"},"面试题汇总/在一个有序数组中，找小于等于某个数最右侧的位置.md":{"mtime":1595940854852.9685,"size":92,"hash":"ea2dd0571fb3af99bcc2df217d5505bb4500ff6f95de3facb0c5c0a5fe01e99b"},"面试题汇总/在一个有序数组中，找某个数是否存在.md":{"mtime":1595940679737.598,"size":72,"hash":"27599d509069643240a2bef1ce5facecaae02b52183bbbc221800ffdedb7aa2e"},"面试题汇总/在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字.md":{"mtime":1596179642018.4707,"size":374,"hash":"e97afc8976a1da464f2514ef4b68347716f075d67e5afcf8297fac5eea1768c6"},"面试题汇总/在整型数组中把奇数放在左边偶数放在右边且保持稳定性.md":{"mtime":1595943488511.585,"size":335,"hash":"4073d64c41659ac873525897431dd0a7e167636ac2945c675ed68fd7138ccdce"},"面试题汇总/在无序数组中求第K小的数.md":{"mtime":1596460889002.0686,"size":86,"hash":"c46a66d4dc9fb5d10d620c7217ac81a4f1aa30eab1256c242a7474cd44ddfff6"},"面试题汇总/在行有序、列也有序的二维数组中，找num.md":{"mtime":1595947389036.8616,"size":155,"hash":"e901b871241c2ae0462b0aa6c3b4f416f7410131440957969b08d772c987b038"},"面试题汇总/多少张贴纸可以贴出给定字符串.md":{"mtime":1595946666630.1711,"size":551,"hash":"c167a91b48603bc932877ddcd99be3a594a069c1fd07ac55491b7de259abab2c"},"面试题汇总/多次交易买卖股票的最大钱数.md":{"mtime":1595869224078.448,"size":252,"hash":"456fda878a4449d834500a247dfc45a497a54cde23dd1274a15006de7154c54b"},"面试题汇总/大楼最高点变化的轮廓线.md":{"mtime":1597112828377.0881,"size":604,"hash":"b963fffb25f4bf96c6b0ba50b2ad4f4d7b38a7d322a215e3fa54e3353d45081e"},"面试题汇总/奇怪的打印机.md":{"mtime":1596177753543.256,"size":722,"hash":"57fe737a869e351825bf1fcf4193c26d2955da0bef432c0e786cd2540412f2db"},"面试题汇总/如何不用额外变量交换两个数.md":{"mtime":1595940986672.7263,"size":63,"hash":"552d97554a71ceafd530d15a7f3ce1b977f31252925930512c16bc5c67b3980c"},"面试题汇总/如何用栈结构实现队列结构.md":{"mtime":1595941637909.9358,"size":59,"hash":"1596c6522ba3de4bda2a156ba2d98ff4439b495efd6f48fb1f54a59250285286"},"面试题汇总/如何用队列结构实现栈结构.md":{"mtime":1595941656052.412,"size":59,"hash":"63c43c839efc785ca1387714782e7e148b0b4c160b9cb11ba026d4caab940c09"},"面试题汇总/如何设计一个打印整棵树的打印函数.md":{"mtime":1595944176800.4065,"size":75,"hash":"cbcc39213cfd9373a9f9e906710c9c25086a65ed0e7af5be9e94173debb52fce"},"面试题汇总/子序列回文.md":{"mtime":1595836895240.6895,"size":1719,"hash":"066b655cea1fbb8b4b8e4e39eb4713065693edc7665a8bdc3406152727894da7"},"面试题汇总/字符串express能有多少种组合 方式，可以达到desired的结果.md":{"mtime":1595913475082.2722,"size":504,"hash":"93d824fe44e80d0162fbc89c3fd48f5878a2be8f4e59b3cb94cde64a6a4fc05f"},"面试题汇总/字符串str中是否有某个子串是等于字符串match.md":{"mtime":1595922189711.5015,"size":223,"hash":"1f2c0a3b28743a6730aa08c2003cebb56ed86fbc052cbe47224eb619b24ad5f0"},"面试题汇总/字符串匹配问题.md":{"mtime":1596521432596.8228,"size":445,"hash":"048282a70521905e02a68ab803a528d808a85a6db46c4e1e52f6c44f1044e0af"},"面试题汇总/字符串变为回文需要添加的最少字符.md":{"mtime":1596646220137.7502,"size":179,"hash":"c2a59356526b77da5bf70ab57810c348d0bc4e6564f458279b968231498c90d7"},"面试题汇总/字符串组成的数组拼接后字典序最小的结果.md":{"mtime":1597891200174.6233,"size":922,"hash":"a51fafb510aecbfed5f7dc4c2562c04d7b611a0bcbfac261c78c3406c2b8fb26"},"面试题汇总/字符串转换整数 (atoi).md":{"mtime":1597753181966.1333,"size":93,"hash":"0ba7a7b62642b8531648365d88619c523d97a3732e9fd635a87d8dbc61263c8b"},"面试题汇总/完成带rand指针链表的复制.md":{"mtime":1595943799755.1768,"size":562,"hash":"812ba8205b46659cae230a371175c599d8155338cc188c7d67d88f0d8ff258a9"},"面试题汇总/实现二叉树的按层遍历.md":{"mtime":1595944078161.1335,"size":216,"hash":"2a48b81f82b9f30ae27108aa84e0885d1814da6f0b70212a19a65dc70895f549"},"面试题汇总/实现最小栈.md":{"mtime":1595941571289.2222,"size":254,"hash":"d737e61aa24518efd1c8953e74bbf65dd09a521dab64a796ff907b604cc678d3"},"面试题汇总/寻找两个正序数组的中位数.md":{"mtime":1597753130729.0432,"size":107,"hash":"445455e2f59f2bd656cf17a6945ea8cd4c62d06c92e8b7e590daa5f56abc1ef7"},"面试题汇总/寻找回文串.md":{"mtime":1596172288419.0735,"size":396,"hash":"ff2a77f26c3e749316a795709935e0ebc1acff33742e8fb8d88a2c278efc3389"},"面试题汇总/将str1编辑成str2的最小代价.md":{"mtime":1599622369315.6836,"size":771,"hash":"5577bde63584e2dadedf35c1b1ea0013c826478df0ced753c9ab9642e5a91fee"},"面试题汇总/将长度为2N数组的前半跟后半数组每个数交替.md":{"mtime":1595837316747.7007,"size":283,"hash":"65471a6020c00ea288890088249fad91e65b07825e85b5affbe11bc9c745499f"},"面试题汇总/小人过有鳄鱼的河.md":{"mtime":1598021427190.635,"size":315,"hash":"cc1df16c0ab45d3018e88db443e728c950622b0b55f56df0eae8dbedd03581e1"},"面试题汇总/局部最小值问题.md":{"mtime":1595940875213.4827,"size":43,"hash":"f473fd316aecf3a74d82aa1f5ddebbbf81f35c38819bd7529dd0cc6004a83cc0"},"面试题汇总/已知中序遍历数组和先序遍历数组，返回后序遍历数组.md":{"mtime":1598766408262.9834,"size":344,"hash":"38f09cb4e9f0b4de1b8ba1abbb69d7c7ef2ad43f1ebe97cca58b132ce4c2d445"},"面试题汇总/想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数.md":{"mtime":1595913209931.8276,"size":512,"hash":"2c263cc1904e2a5da3b336d59e9bf190f62892652438214196f90c3c40396ec5"},"面试题汇总/打印n层汉诺塔从最左边移动到最右边的全部过程.md":{"mtime":1596134642022.2837,"size":72,"hash":"5d672023c83946b5f4d760f5bb4aca7ed23d3fb0b1852b1d620a7535722a784b"},"面试题汇总/打印一个字符串的全部子序列.md":{"mtime":1596134656274.4094,"size":47,"hash":"cd801df1195b621e156e9f187d9da380b9fdb24ba2636606c983a10ad1b45aef"},"面试题汇总/打印一个字符串的全部子序列，要求不要出现重复字面值的子序列.md":{"mtime":1596134664496.5388,"size":95,"hash":"ff4f40be06cf5953236792c432169693c53b55f0504546531cc1913afd919b29"},"面试题汇总/打印一个字符串的全部排列.md":{"mtime":1596134672002.6194,"size":44,"hash":"8f7ce51509185a2bf5d41882961fbc8e6aa458c0d26108bdbe2dc02dfa47d605"},"面试题汇总/打印一个字符串的全部排列，要求不要出现重复的排列.md":{"mtime":1596134680033.2632,"size":80,"hash":"5093432f334324360082827e000217746e541cc6025f6c9c53328bf91cc411cb"},"面试题汇总/打印目录结构.md":{"mtime":1595914111949.9395,"size":356,"hash":"ea95fc085f91faf6c4664030f6a867e2dafbe3c6a5439686bceafc6a2e93b163"},"面试题汇总/打怪兽需要花的最小钱数.md":{"mtime":1595912955129.7056,"size":683,"hash":"78e28801a5cd22c1e18dc7f40dd895b7843d6c5082020bc7b928ec62b962a5ec"},"面试题汇总/打气球的最大分数.md":{"mtime":1596299161253.8843,"size":1835,"hash":"424e9780d6ba9b55df8b3c25ef015bae59351dbbbdf84c70933909cf418a7417"},"面试题汇总/找出最大的左部分最大值减去右部分最大值的绝对值.md":{"mtime":1595914793918.4165,"size":365,"hash":"cc42574962ca52fa0e9217551e84ddaa7cc23cfcf4b6a4f3b28c8e4fe4f1aea3"},"面试题汇总/找到数组中只出现1次的数.md":{"mtime":1595868863020.6814,"size":201,"hash":"1699441216fec9a48d7c1effdaa0906d16f5c453e9399d65c15da0968e55a507"},"面试题汇总/把链表中的给定值都删除.md":{"mtime":1595941335012.5273,"size":50,"hash":"f382f902c732a3959bb9976ede7337e21f8da25e679febade82c3c8f8877eaf1"},"面试题汇总/括号有效配对问题.md":{"mtime":1598590350672.0618,"size":463,"hash":"5e274b5c258a770e0902bf214bfe5740cb4bafcf4bc14f435a155c064203f605"},"面试题汇总/指定结构中加入的所有字符串中，词频最大的K个.md":{"mtime":1595914642638.2595,"size":456,"hash":"2c73ad2a9a2b74e76c7c0944ef5012e1dc91c6689a7c3b190113e221cd3aa1ac"},"面试题汇总/指定范围上涂色的房子有多少种.md":{"mtime":1596780215581.7458,"size":256,"hash":"e333c773cea7498325e7ba6c8e51298744e9c59a0d20d69680a322576b7421f7"},"面试题汇总/提取整形数最右侧的1.md":{"mtime":1595941101624.101,"size":96,"hash":"2a57d466a186f46398ef2d6afbbebec318d9858fd9d1315cd04300310ca80e1c"},"面试题汇总/搜索二叉树转换为有序的双向链表.md":{"mtime":1595914169002.2603,"size":296,"hash":"bca7d538bf57c244a0e554a05ffec41cca207fe954aa5ee302ffcdca563019ae"},"面试题汇总/数字转化为字符串的结果数.md":{"mtime":1595946022545.9128,"size":301,"hash":"a6fef34ed053592944730185603360668020d7af881e4ae297007499f1c45109"},"面试题汇总/数组中出现次数超过一半及超过N除K的数.md":{"mtime":1595869014002.6382,"size":327,"hash":"a7f5595a1690959bc43e0481945ee4a27c0ed7966f7868e3423385aef906532d"},"面试题汇总/数组中最大的正方形.md":{"mtime":1597100293989.245,"size":276,"hash":"ae874df5f376219d3e79d72a83caf9edb96f24de7f1ff9e21a313a0efe27c064"},"面试题汇总/数组中添加加减乘除运算符得到指定值的所有方法.md":{"mtime":1598671345893.406,"size":588,"hash":"8be7f1d09fea3150c9de0d06e9b9352fed6c7c6600a1d4bd2e238def1908e46b"},"面试题汇总/数组中离给定K值最近的子数组累加和.md":{"mtime":1597841832741.391,"size":427,"hash":"734c59b76ec44866049722fa227148296c9a50eec5924c75ff8eba2ab113d7e0"},"面试题汇总/数组实现栈和队列.md":{"mtime":1595941437071.4058,"size":56,"hash":"10918b34ba4c4abd0c91998c067e9cbac6cf2d7a8ecc0fa17eedc9162fab866a"},"面试题汇总/数组最大的三子数组的最大和.md":{"mtime":1596265141968.7607,"size":202,"hash":"5533ef8f480736d2249efcc721351300528d9469b9d10d67ee1c9847b3c4721c"},"面试题汇总/数组直方图装水.md":{"mtime":1595914826316.7144,"size":353,"hash":"7d93727990d35348b3c6625c55fe9433723bfae85932ce053538cd503452b4d0"},"面试题汇总/数组能不能分成4个相等的部分.md":{"mtime":1595915792076.226,"size":357,"hash":"ab6fae70dca36d6351a2ae5df4fcf19123e6a12a642a52a51ed21229be810059"},"面试题汇总/整形数组中子数组最大值减最小值达标的子数组个数.md":{"mtime":1595922058346.0518,"size":289,"hash":"5a08990354346d252b5bebdeaeba34af241b998489a4265fa58f1754269f47af"},"面试题汇总/整形数组中子数组累加和乘最小值的最大值.md":{"mtime":1595922037801.0332,"size":281,"hash":"f47df7e5d9e43d2992e67b0a3ee74c9bd51b56651ee62654d65e05ecc8b57c00"},"面试题汇总/整数反转.md":{"mtime":1597753159589.957,"size":69,"hash":"9780bd7a69b6e949846c705eeb67a8eedeb9ad2daf07520f8b4943fddf02455e"},"面试题汇总/整数组成的无序数组中子数组的累加和小于等于K的最大长度.md":{"mtime":1597226761305.734,"size":502,"hash":"a6a6b10d6eb986ac22d7e73981b1413331bd5121406c3db7a90fe933ea7185f3"},"面试题汇总/整数组成的无序数组中子数组的累加和小于等于K的最大长度非最优普遍解法.md":{"mtime":1597842387299.1147,"size":322,"hash":"48da6fab7041bced91ef4f2913a6143426a111020f1aa5289b9885b390f7b87a"},"面试题汇总/整数组成的无序数组中子数组的累加和等于K的最大长度.md":{"mtime":1595922525037.1296,"size":317,"hash":"c3467295e5cacce015ab71831cd0a14bfa57738ee7f2d23144de7ef4e78570ef"},"面试题汇总/整数组成的无序数组中达标的含有1跟2的最大子数组长度.md":{"mtime":1596810069359.902,"size":278,"hash":"6f253415be5e15700f7fc4a4555ded0852d133cbe26a8435eb334e40441684ff"},"面试题汇总/整数转罗马数字.md":{"mtime":1597753228557.5596,"size":78,"hash":"813ceb478234810df34fce0246cfef3d38783d7642abcef6d7076788bb41030d"},"面试题汇总/斐波那契数列矩阵乘法方式的实现.md":{"mtime":1595922016602.7622,"size":65,"hash":"5e1f271efc710cbac2f36eb41fa9dd9114e2ac6e9254a2b8eabdc7b68a785005"},"面试题汇总/方块掉落之后的最大高度.md":{"mtime":1596784130559.8176,"size":716,"hash":"80a3169cee34b7bdee379b0eb7f8a71ac566e187271753a940ccdcac65db8acc"},"面试题汇总/旋变字符串.md":{"mtime":1596250080224.2344,"size":1389,"hash":"8d30b7014d2bb484d15da23ce506c6b153ef8d18e10ec02b6ffff056bd45dfaf"},"面试题汇总/无序数组中最长的连续序列的长度.md":{"mtime":1596172455114.9744,"size":212,"hash":"d7d2bc2389ac91fe99acaad5cbfdd3bc01a03f0ebdd4459176961baebf063ab8"},"面试题汇总/无序数组如果排序之后相邻数之间的最大差值.md":{"mtime":1595837821034.1807,"size":332,"hash":"ac3117bad97ca50bb8fc90d677d090c9643832b6d4318176ad0b685848ebbe70"},"面试题汇总/无序数组需要排序的最短子数组长度.md":{"mtime":1595913130579.183,"size":198,"hash":"035dbb6fb0c4cc7880a0ec3ff3c09493997f54ca00ecf4f14c3e7d759332bb48"},"面试题汇总/无重复字符的最长子串.md":{"mtime":1597739474040.664,"size":122,"hash":"d5b0307041dbd89fbb3155bc4564d11e441fe55c45a77bfd51c6dc2eb02786f7"},"面试题汇总/普通硬币跟纪念币拼出指定面值.md":{"mtime":1595912873508.1323,"size":260,"hash":"9e72b3375c5fe6c43c5016573b28871255140cc1b0746dca9214ef9fe03e8af0"},"面试题汇总/最多K次交易买卖股票的最大钱数.md":{"mtime":1595869266601.6516,"size":272,"hash":"0d62c6f9cc28f2fa04f36cf894f693da4e47fd40f2c749b507edf61308360051"},"面试题汇总/最大可整合子数组的长度.md":{"mtime":1595912992805.8794,"size":502,"hash":"dc91ee1a919f25068ac9d0992487263aa8e81d25c6f62f18fc1e884eafa94400"},"面试题汇总/最大线段重叠问题.md":{"mtime":1596780989304.182,"size":611,"hash":"0314ee88078ac2837ae26223e38c426feb84b5d4ed4f8909ee1c976a37b1e212"},"面试题汇总/最小区间.md":{"mtime":1596177884891.7488,"size":943,"hash":"8f317f673de19ba27a27df3ce72c65b62a9582354be8e9b8abc67d97e7732cf2"},"面试题汇总/最少添加多少字符使字符串变为回文串.md":{"mtime":1598545314575.0125,"size":320,"hash":"07509de776b1c1d566c72ecf66fb855c95589823ba494d3ae4ee8fb6fe73c5b4"},"面试题汇总/最少需要涂染几个正方形.md":{"mtime":1595915117745.8167,"size":524,"hash":"1a5736a71ffffdd183cdb7edd80d88953a61f2fa7a3ada87599a70d25a49374e"},"面试题汇总/最长公共前缀.md":{"mtime":1598670483567.7761,"size":85,"hash":"b6c37200805825ec0b6381dc9d29b52dd3563ad00e502b983ebd20957e01630f"},"面试题汇总/最长回文子串.md":{"mtime":1597753146506.251,"size":92,"hash":"c7336b9953cd02ea1a027ad04fb6e22ceaeadcfde0628b663f0c85962b755f73"},"面试题汇总/最长回文子串的长度.md":{"mtime":1596185085371.9114,"size":142,"hash":"0e67cecf977b031aaad29db4e3070d5ed761b646e9a47d9194a263b71aec7aa9"},"面试题汇总/最长回文子序列长度.md":{"mtime":1595836563455.5771,"size":94,"hash":"42667b837c5e5bcb58d4f5cb3ffe88d6bd7e62d57be9314b42a24536f365b6ca"},"面试题汇总/最长递增子序列问题的O(NxlogN)的解法.md":{"mtime":1595914281154.13,"size":107,"hash":"39d46256da259217b3af7452beec704a54499df5beae6db3bb605fe5e181e6d4"},"面试题汇总/有一个10G大小的文件中的数字排序.md":{"mtime":1595922698069.0754,"size":334,"hash":"721c40210dac1a900d80a58e0733afbaa3a2c0098f133920b6a30449aa0b77db"},"面试题汇总/机器人必须走 K 步，最终能来到P位置的方法有多少种.md":{"mtime":1595946605418.1494,"size":651,"hash":"1fc25baafffc53f6d04d4b9bc3007e2698424573b6a6f82307c9666e9dbca847"},"面试题汇总/机器所有吐出的球都等概率放进袋子里.md":{"mtime":1596521407364.2988,"size":321,"hash":"9f2b48861ab49acfed17e1645d136e99f5dfb1729fa8264e634e05816fff0aa7"},"面试题汇总/根据要求构造出一个长度为M的数组.md":{"mtime":1598597501445.8726,"size":238,"hash":"8d9586498f586e6005128e4cda11255cd4068db3bea594f1c347c3f46d3d2b71"},"面试题汇总/欧拉信封问题.md":{"mtime":1598022525423.7715,"size":249,"hash":"2258f9da05b7fa9e266318bf64e699f426b2919a16e164d1d3ece0376f61554c"},"面试题汇总/正则表达式匹配.md":{"mtime":1597753194533.8303,"size":91,"hash":"24bded953bd6c4f46951ac3b13ae02463bd56a65a2ca622cd6217393bcc91722"},"面试题汇总/正整数组成的无序数组中子数组的累加和等于K的最大长度.md":{"mtime":1595922517654.885,"size":288,"hash":"625108f55e7b9ca5d95b2cc2e6d152f4dbf5012459c16d00928c5b53753db8bf"},"面试题汇总/母牛生小牛, N年后牛的数量.md":{"mtime":1595920790381.7393,"size":284,"hash":"2adca6dcd714c0175ab610a65408463bf6b57132c27a33ce22d2c387436e0fb7"},"面试题汇总/每个人按照标准选工作后所能获得的最高报酬.md":{"mtime":1595914426463.7693,"size":562,"hash":"cf7b92f43cdfa477a8e94b9dd430c6ebfd4e4a4c6772b4bda75774b231b700e8"},"面试题汇总/求1~N所有数字排列中,等于指定K个逆序对数的排列数.md":{"mtime":1595837105813.186,"size":633,"hash":"cbb814a380a16c698302aacf87c28f341e98747d71114e95707c3213ea9a5132"},"面试题汇总/求两个数累加和最大的前K个.md":{"mtime":1595913543916.0637,"size":188,"hash":"7c0d9d1e409a6452030e00798e16d2a60454b2f94d53946e07c88d07dcc32d1e"},"面试题汇总/求二叉树两个节点的最大距离.md":{"mtime":1595944867190.3035,"size":196,"hash":"f3c97682d152b3c7eec183d592052f9b58cce9e6a53a00438604a12996e51489"},"面试题汇总/求二叉树中复合BST的最大拓扑结构的大小.md":{"mtime":1595837282055.54,"size":305,"hash":"d659c2b3adc13c7b94e2ac017db6a826d65d70decaf8af3f5d4f17515fb649e7"},"面试题汇总/求二叉树最宽的层有多少个节点.md":{"mtime":1595944208341.83,"size":64,"hash":"df3ae865f333a279d0a8c564a34891443a19376a04351fa8560a171e4037c735"},"面试题汇总/求二叉树路径累加和为K是最长路径的节点数.md":{"mtime":1597101144149.5488,"size":325,"hash":"c7a0ac33f37bc71686fcb59fbe6abd98a679fea2f99fb5d6f74c72b98774b545"},"面试题汇总/求字符串str1的子串中含有str2所有字符的最小子串长度.md":{"mtime":1596169193610.1,"size":407,"hash":"ff3bbf2769668a85c8f29134419800ab6fe996ae7f954f8a557eb78dce008c3e"},"面试题汇总/求完全二叉树节点的个数.md":{"mtime":1595913757786.7227,"size":111,"hash":"6d4b1a09a8dbfecf26e6e4eea5e0215e6efc1ef4ded34d8a8e2a75d8703be6d4"},"面试题汇总/求数组小和.md":{"mtime":1596988341984.1704,"size":433,"hash":"8d334e76f1b1e4b5e5218e2be657d9c1a3bb45bb0c5c16c32917fdaefb15450c"},"面试题汇总/求数组调整之后的逆序对数量.md":{"mtime":1596870209508.5251,"size":1378,"hash":"73a1f73643e91e3dde0c6fc4a9940f6b595b1dab6aaebb8895651410d5690f27"},"面试题汇总/求斐波那契数列矩阵乘法的方法.md":{"mtime":1595922012084.8533,"size":943,"hash":"5ea47773f0e1f7bfa8513cde6f4c8f30860064f042ae01851769d155f8c2e528"},"面试题汇总/求最大子数组异或和.md":{"mtime":1595913425935.7932,"size":168,"hash":"f2ac58bc49feba4ab92e74e323309eebf3d123cb4334dc88a952251273ac432f"},"面试题汇总/汉诺塔游戏的最佳状态.md":{"mtime":1595835254831.61,"size":679,"hash":"7a28b7f8a962099b5dced7095d00a67976faf94486fe52d43bedf377f66fddee"},"面试题汇总/派对的最大快乐值.md":{"mtime":1595944946763.638,"size":1017,"hash":"cd58c438a426415459448bfb0c4b0ec7d7cfd68f0e2850c56907579d26931f0b"},"面试题汇总/海盗分金币问题.md":{"mtime":1598021655064.853,"size":523,"hash":"fa8c44b3ce0f57e35899995306e356ac7dc0d6074f07292b56bf277b6f3d15ab"},"面试题汇总/滑动窗口内的最大值.md":{"mtime":1595922052169.5806,"size":213,"hash":"5335df337a3c20cb58811c0bb13abe460ac180e1ad567293eafe5be9a0bbd15c"},"面试题汇总/点亮str中所有需要点亮的位置至少需要几盏灯.md":{"mtime":1595945176782.9033,"size":401,"hash":"cbd5f15eaf219ac55a5533293bc5d5cd6602477336864ece4caf1d631d3ea663"},"面试题汇总/牛牛分田地.md":{"mtime":1596988183968.263,"size":902,"hash":"31c264814ff78edfea78506501b96183ac3d824cb50c6809e2d5cdcfcdd44ad7"},"面试题汇总/牛羊吃N份青草谁会赢.md":{"mtime":1596795682331.5002,"size":432,"hash":"c40c0b5c6a477f2d241c988a04ee30e4ecc0ec2a6e27ef7803a1f07e9b7852b9"},"面试题汇总/用递归方法求数组中的最大值.md":{"mtime":1595941732996.4753,"size":422,"hash":"e3fe1b3a0a26a0cfa357ac2f81353f883a09a6bc89639fe08ccf649d484e5f9b"},"面试题汇总/由0和1两种字符构成的达标字符串.md":{"mtime":1595920829538.948,"size":268,"hash":"0fce0317d6f25a578cca8f25b5fd8d64b7186515fcafee49ed7bdf8fe356dd12"},"面试题汇总/画匠问题.md":{"mtime":1596171033213.112,"size":999,"hash":"45b480260fa9728d211d59645ebe2a4f39bfdd64ab7d8e6090abff5dd8a85052"},"面试题汇总/盛最多水的容器.md":{"mtime":1597753213579.3489,"size":89,"hash":"4d65fbfc4822500fb18d33f0ec00042ddb1fca7ed2ff2a97cf19d041d27cde5f"},"面试题汇总/相对几乎有序数组排序.md":{"mtime":1595942742788.1648,"size":315,"hash":"ce21355bd43fdc62f5087b8088f2ae8ee27ca684550061f56caad67cfa77050f"},"面试题汇总/真实的用户数量.md":{"mtime":1597926449396.668,"size":267,"hash":"4b8e92902b14577c2619e7c4808df39147631ae1a8e7d0a21d2605e184cf21de"},"面试题汇总/矩形重叠问题.md":{"mtime":1596781770350.5327,"size":1114,"hash":"e19b5db2178a9f36964ccfcd212b2d9ed1a5bab85f0862eb5d87844bf9e0e177"},"面试题汇总/矩阵往返一次的最大路径和.md":{"mtime":1595869446476.285,"size":317,"hash":"61ab845f3452b51d730a99e1de443102028c60700be000f6a151015fabca094b"},"面试题汇总/矩阵路径中最小的路径和.md":{"mtime":1595946869301.7986,"size":266,"hash":"24dc893bdfcb09024a0dc15a35cfec19a9e8281e1333afc935d4c243550261f2"},"面试题汇总/移除盒子.md":{"mtime":1596177628892.836,"size":773,"hash":"6b32db8500babcbc86fd9151ad625194c075b5d1c270f675e88ef1acc5f5153d"},"面试题汇总/第k小的数值对.md":{"mtime":1595914939615.5142,"size":547,"hash":"58b6502fd0c51cfcd311dca3af4cf8cc7564203f371e08975024dde8123685ae"},"面试题汇总/等累加和集合对中最大的累加和.md":{"mtime":1596170863240.9792,"size":454,"hash":"284516a855be810b64295e07439bb43d977023a2afbb562f87186c45dd2d6a4c"},"面试题汇总/粘在天花板上的数字与炸弹.md":{"mtime":1596854443368.3315,"size":1122,"hash":"a259a6b06062e4c3329ac1eaedd3a07cd81f2e2fda3925b38fdacf0bb0431195"},"面试题汇总/累加和为aim的所有二元组跟三元组.md":{"mtime":1598626466950.5378,"size":314,"hash":"f8a0e8122fc8a57637d3446cf2e9b9920fa8276bb7dea2121c44ba75e95ef0cd"},"面试题汇总/约瑟夫环的拓展.md":{"mtime":1597124516397.2422,"size":432,"hash":"cbd10bc806527bb959f63096fe4a230b0d3fb96575b1ea4c91724aae598d3803"},"面试题汇总/约瑟夫环问题.md":{"mtime":1597153596324.1863,"size":395,"hash":"198f8e40596e5ba86c8065b7e2d9d452ad8d20d6a69176f7a1f90e62a2736102"},"面试题汇总/线段树实例一.md":{"mtime":1595922258464.5095,"size":397,"hash":"43d404568a43f3fa38de882cc0647f2def23cdc9fea7f85741874e3ec24cf0d8"},"面试题汇总/组成aim面值使用的货币的方法数.md":{"mtime":1595946952147.3254,"size":290,"hash":"4e1945b67d274e0911867a617769bae2990cd5faa4c83fa611869ce516e36e63"},"面试题汇总/给你一批信封，返回最大的嵌套层数.md":{"mtime":1598844549197.3145,"size":279,"hash":"8df429f4f63d725e1a214e4d22e6f767f1196f40db94367188abc1889768e3d6"},"面试题汇总/给定一个参数N，返回是不是可以表示成若干连续正数和的数.md":{"mtime":1595919268251.1428,"size":448,"hash":"47da82d7a980bd7798575fb869cf48f635507cb82a2b86220f5baa85cef8d963"},"面试题汇总/给定一个数组arr，返回子数组的最大累加和.md":{"mtime":1595914334589.1313,"size":65,"hash":"e9fdb22a57ffc41f04ce2d469aa1c40b571a437c7415a71f86270aad147dabda"},"面试题汇总/给定一个整型矩阵，返回子矩阵的最大累计和.md":{"mtime":1595914357371.1648,"size":134,"hash":"814d16d65109058c9bb09a21cbdeab1d0b7351c92b5e57e217490ce1c1c5d1e9"},"面试题汇总/给定一个正整数n, 求裂开的方法数.md":{"mtime":1596022359483.7085,"size":496,"hash":"b8803a080ac8f4585c04812e2a27af023a847a5bffda1dace2d27bb75ecea951"},"面试题汇总/给定一个正整数N，返回至少使用多少袋子装苹果.md":{"mtime":1596794869010.7104,"size":547,"hash":"23b86150de9020c91f9e0c14e7a6a28bc26fd3c2ed3c03766f6017c83ee84150"},"面试题汇总/给定两个字符串S和T，返回S子序列等于T的不同子序列个数.md":{"mtime":1595869341720.6223,"size":558,"hash":"31f98c96c503b1b0e260b626735c0b7912c57fbfbbd69f46b83f6c09f1bea124"},"面试题汇总/给定字符串中有多少个字面值不相同的子序列.md":{"mtime":1596170943261.8337,"size":148,"hash":"d36c7309b896f9b3652fa72a7f2b387c5904b02d76291ee8604b6e9de253f6ea"},"面试题汇总/罗马数字转整数.md":{"mtime":1597753240830.4724,"size":79,"hash":"bc46d509520a733c56d16320ee77c47e0565db7862586744fa265a9d9a10f166"},"面试题汇总/背包中有多少种零食放法.md":{"mtime":1595946091126.7651,"size":225,"hash":"740e661ec0c1471dd49a3c06c18a4940a3a770dfd026faf3fca600f034ae2f16"},"面试题汇总/背包能装下最多的价值.md":{"mtime":1595946131312.8672,"size":350,"hash":"33a17874323dbb7744e7930e5bcbea60cb44846276de062e344465a7d157485b"},"面试题汇总/背包问题的动态规划解法.md":{"mtime":1595946694563.2927,"size":58,"hash":"66e9f84f7a02aae26ccac5fefde973f73a906f7f699628c4b6ec14fcfee0c0da"},"面试题汇总/能够互相看见环形山的对数.md":{"mtime":1595836248789.661,"size":1037,"hash":"3afb90b0eae83d3dd336a4b1528e6190386561d2584e2a15c3bd0616bb209037"},"面试题汇总/自由之路.md":{"mtime":1595834865792.7231,"size":1787,"hash":"250bf42278c93aa8c6e963b8a1be9776366ece458efce6737b89138bb7829358"},"面试题汇总/良好出发点的加油站.md":{"mtime":1596261230136.6719,"size":595,"hash":"69423642be3fe1677cdb4f88e7377eba0d688912ec9c5222a99e617079728d6e"},"面试题汇总/蛇走的轨迹问题.md":{"mtime":1595836750102.0977,"size":827,"hash":"e78890af88c1e3bc6646bdbe6d13b4229bf0b5534d3989c6a669ab2f86fbe06a"},"面试题汇总/计算str表达式结果.md":{"mtime":1595869980927.5342,"size":669,"hash":"f6e871d5e9407fb284d262ef8d9053f22e55d0737af4442455fbc6289569f6dc"},"面试题汇总/让所有咖啡杯变干净的最早完成时间.md":{"mtime":1595946783328.3645,"size":429,"hash":"1fd74d9b1a073bebaead8e2c9e06b6cfde99a1fc750b6c1882c0e83f49ada82d"},"面试题汇总/词频最大的前K个字符串.md":{"mtime":1595914568894.6084,"size":182,"hash":"0f229516cf66faf9b6111331338391b139c09559f72fe4426e2cde3f22050a6b"},"面试题汇总/调整BST中错误的两个节点.md":{"mtime":1595836195889.2275,"size":740,"hash":"a0a8aff2e67b57319dfc1c3f50d020b49aa775ee538343df5b5ab9e8b4789c29"},"面试题汇总/贴瓷砖问题.md":{"mtime":1596178560378.0674,"size":206,"hash":"070ab0eb48cd00b59af6247663a140470ed4f315e8065ea2a53599d39425f61b"},"面试题汇总/距离首都距离.md":{"mtime":1596169682048.9768,"size":1217,"hash":"ba935e4bc1df32bf29fc16dcd0d3a6355b6123ef3a36ae0b04e009fa7f416d70"},"面试题汇总/转圈打印矩阵.md":{"mtime":1595922392714.2427,"size":49,"hash":"89c0fb16a6127074712cdcb1802169c544d8f341a20e96d12edc8399894ef582"},"面试题汇总/输油管道问题.md":{"mtime":1596171674860.0059,"size":888,"hash":"de9b1a1a021bd63d645d15201f7884d8356ccde71224d44f8d8fa7fc69028292"},"面试题汇总/边框全是1的最大正方形的边长.md":{"mtime":1595915140718.3376,"size":274,"hash":"f387e6189127067a62690ffdcefc28369e8970887bc6a60a2ce598b02146fbee"},"面试题汇总/返回数组中，有多少个独立的域.md":{"mtime":1595913239107.746,"size":197,"hash":"b6c89f4f6239454a553cb02fc937bf1ca940b95befdc07daf7a62e52539b3bec"},"面试题汇总/返回正数数组 arr 的最小不可组成和.md":{"mtime":1595913164957.181,"size":1143,"hash":"3e2096e6466e2e08c7300055dbd868e8944144c414277dc0526d31b06b63551e"},"面试题汇总/还原数组丢失的数字.md":{"mtime":1597459727856.1074,"size":556,"hash":"105e3492f86e2da79248c1db9d91a8385eb9d8350eca005f7a1e52fed9b6c92b"},"面试题汇总/递归逆序一个栈.md":{"mtime":1595945943467.5396,"size":170,"hash":"5d73442d8a17c7534d6bb2b5d4c2440824efb0c7b661cd8fbb3884f38fc8be97"},"面试题汇总/邮局选址问题.md":{"mtime":1596171677302.4685,"size":833,"hash":"89655602e1dbbfb7cc908099f522f6c51e509f77a21ed33bf0bd9c998a43dcd7"},"面试题汇总/金条分割的最小代价.md":{"mtime":1597916600203.4485,"size":718,"hash":"80bcbda37410732a690f37848a8b38c69ce95cdccd2a435dc2a158c8436cdb39"},"面试题汇总/问字符串s2最少删除多少字符可以成为s1的子串.md":{"mtime":1595913737432.1924,"size":236,"hash":"af733b47632d9f996bc1fbe7194948cec9e7cdbbebaff7413fed716f8ef385f9"},"面试题汇总/非负数组子序列中累加和%m的最大值.md":{"mtime":1595836331477.3782,"size":168,"hash":"1cfbf57ead50bbc09d76375ae2570dc1872de45b59e8790848392e1ba7c5e251"},"面试题汇总/项目经理和程序员.md":{"mtime":1596186904715.1309,"size":1542,"hash":"b8a2399905fd2e17bc3c72c24d25f38dfaf71e5f6c9d610954697ec0dad201a2"},"面试题汇总/骑士能见到公主的最少初始血量.md":{"mtime":1595869392964.4902,"size":687,"hash":"dbf7e4c2f5d76debb8973fdf34e8eb5460f548b0452b9baf73e684223ae9093e"},"面试题汇总/327. 区间和的个数.md":{"mtime":1598505417858.7415,"size":241,"hash":"4d013ce5685cbc8019c7bdf9871cdfbba97fa0aad1db60c384c74e9ac56a2248"},"面试题汇总/480. 滑动窗口中位数.md":{"mtime":1598505489552.9485,"size":409,"hash":"f49da04c9c96b91011db2fc8fdb113a837463ce8ca04ce0e835b5dadda5319be"},"面试题汇总/最长的括号有效子串的长度.md":{"mtime":1595915087491.7788,"size":307,"hash":"b510f255cc0b0b6e9dd145e6b5b97d8a5bc2a9098679915bd984453817acbdf3"},"面试题汇总/喝咖啡问题.md":{"mtime":1598548345524.0298,"size":305,"hash":"bfe23bb9381c6c4513b19518d0a03b4870da9986ecbda8ce52378cc59d23f5e9"},"面试题汇总/一个字符串至少切几刀,能让切出来的部分全是回文串.md":{"mtime":1598544645646.1067,"size":150,"hash":"d883b1ff01a8415de0192e2f11cdab82841235ce86a57adb05289d49a721d4d0"},"面试题汇总/约瑟夫环拓展.md":{"mtime":1598548575712.8777,"size":414,"hash":"75130dca146ca7799b42e0374e644f270b55accc0c31127308c1bb595ada00fb"},"代码模板/后缀数组DC3算法实现.md":{"mtime":1598551564135.0393,"size":3790,"hash":"64c0076ba6b64dcdf9219d5e57dce29fdbd3eca6795618efcf3be0f2fcd40ad5"},"智力_概率题目/三人赛跑, 得第二三名的概率.md":{"mtime":1598551804033.277,"size":237,"hash":"b2f62612ff12c28fb4f3ccbaf46625ebd9fdfc21cfc155f14c4ac8dceb291e30"},"智力_概率题目/圆环上随机取3个点组成一个锐角,钝角,直角三角形的概率.md":{"mtime":1598551875341.5178,"size":85,"hash":"54fdc8165c40b97ee432b46b4dd264bf40b5b309d2fb1bad94c4bcdb9bb4c279"},"智力_概率题目/随机在圆上生成n个点,这n个点在同一半圆的概率是多少.md":{"mtime":1598551916298.9507,"size":82,"hash":"5b5d6488a8c63f7624587489fd7bd740222d05555b644debbf9b589ec2b9f611"},"智力_概率题目/64匹马，8个赛道，找出跑得最快的4匹马，至少比赛几场？.md":{"mtime":1598552015066.8977,"size":85,"hash":"da35fe9629d7860cf2a8e7bfa3f9d8a4de6576bb3a4180cfbecd714c1f468cb7"},"_学习大纲/经典面试题课程.md":{"mtime":1598604682887.4358,"size":2892,"hash":"a0b15a16d39358a15f6c5aca326774d5f111aa6578d0972cb0b018dfee6c0ea4"},"LeetCode高频题/leetcode高频题目全讲(3).md":{"mtime":1598670418805.3184,"size":775,"hash":"6be8bb6da9778a5a4c57cdd2e861024af2c48b9ea8d46c7a7656b5582073fa43"},"LeetCode高频题/leetcode高频题目全讲(4).md":{"mtime":1598709645374.0364,"size":753,"hash":"8de410854fd978a2c1b302d9396aed1ed396e2c5fcc814ed99689f6e857628ec"},"LeetCode高频题/leetcode高频题目全讲(5).md":{"mtime":1599267845015.2883,"size":434,"hash":"1e47329280aa1a009a01e783c76bae5cc503595b425eb5fd263002213bcc8411"},"LeetCode高频题/leetcode高频题目全讲(6).md":{"mtime":1599270141604.7024,"size":171,"hash":"01f9dfe030f37c9112a3a7a7a01b49d7774011fb9292a85801e91962dbce0df1"},"分类总结/利用单调性优化.md":{"mtime":1598587209403.2915,"size":101,"hash":"2bdc090f52dbb28c6a7298dd9acb49ce574ae40d5d7912a05da6e269c51a7e07"},"分类总结/求解子串,子数组问题.md":{"mtime":1599290539025.5417,"size":1346,"hash":"0e6f460c95b22811adc4e68546411cdf69ba85dc32ef57dd94cd1a923e570f5e"},"智力_概率题目/一个N^2的矩阵, 内部长方形, 正方形的数量.md":{"mtime":1598592890099.8662,"size":112,"hash":"dcbaee17d6672fecbdb7476074d11ed75c9a3afaec9606bc939f372f6ff694a2"},"分类总结/笔试过程中怎么猜测要使用的算法.md":{"mtime":1598665788034.3064,"size":523,"hash":"6ae27b936344bffd4e8d086fe307416b4e33b066d2cbf4062b9cc9194a4ae5a0"},"面试题汇总/最大嵌套的括号层数.md":{"mtime":1598590128302.9302,"size":136,"hash":"8089d58ea0045c3590e54886f733860e3b49170d4ed940537dcadfc819733eaf"},"分类总结/需要应记的题目.md":{"mtime":1598607053501.539,"size":630,"hash":"41fefe1be40860f42edae0ac8dba6ae436f2edc8a919210fd0677e823d955674"},"Picture/Pasted image 25.png":{"mtime":1598621803009.9187,"size":1504,"hash":"63d60d30b3c12fbd4a67efeb9b2b770f3867e3e2c61b0c93154c0a707b39363a"},"Picture/Pasted image 27.png":{"mtime":1598621812025.8838,"size":2488,"hash":"52b637800bd562e83c7833b862b79727665283ddffa242be2e528de3f7df119c"},"代码模板/单调栈代码.md":{"mtime":1598630163760.535,"size":26,"hash":"0476714e4386ec4a3a8b2f0ecf85799a83a09dcef2c1004408f19e1f566758ef"},"_编程基础工具/单调栈.md":{"mtime":1598621996036.8513,"size":288,"hash":"090acd5ecf2989a1899a257c77bb565f77ff88ea8e6caa54c99f10b9722989de"},"面试题汇总/一个矩阵求内部长方形有多少个1.md":{"mtime":1598621926828.6494,"size":217,"hash":"e0c447ca476d0a63b3255b1fe9462b437b47b32ead60ce58bbb6e851829c852f"},"面试题汇总/直方图中最大面积问题.md":{"mtime":1598621812230.3372,"size":304,"hash":"71e880e1405a00fe6eedbc2d681b4f6ae0affef6e6eaec89d118e6cd65c10ce3"},"分类总结/二叉树的递归套路.md":{"mtime":1598629858997.7458,"size":1566,"hash":"cbc9de63cd3d38a72a140fed8bb2aa1a34219bb8044b6ca333350a7c37f8dff0"},"数学基础/求素数.md":{"mtime":1599293657123.4534,"size":66,"hash":"d2717b912edea08a7ab71680442ec60ab1fe2fd473269484af714e215722f734"},"按题目系列分类/股票问题三连.md":{"mtime":1598590182694.4253,"size":176,"hash":"0a889e191db92b6950d7ae7473d51f89666ac683d0f19c3de51b36aa8fdd4abc"},"面试题汇总/括号生成.md":{"mtime":1598669003887.278,"size":146,"hash":"45bd340be471c811049f5decaed1befcd75b607076fc973d1c1f83d0118a1569"},"_重点照顾/需要反复看的题目.md":{"mtime":1599627298887.9277,"size":439,"hash":"26c0edf61d3199f3549e858bc7046350ac87bb6438de9eb3a1a2bce952de125c"},"按题目系列分类/括号系列问题.md":{"mtime":1598670910832.466,"size":241,"hash":"3ccf7a40542e03acdc559c81061bfa303e1c9d90b2bc2f6edb609ce25d0d18d3"},"按题目系列分类/回文系列问题.md":{"mtime":1598671025933.4954,"size":394,"hash":"c21168b3314cfe0e6a7a6e64d4f0eb6671b78f0e54e78ef8d899a2386ddb7677"},"面试题汇总/电话号码的字母组合.md":{"mtime":1598670758902.9707,"size":111,"hash":"1078331eb8db2ea84e2fbaf7092504d2b52bd0267169aa03da5c6ef57af23527"},"面试题汇总/合并两个有序链表.md":{"mtime":1598670696013.24,"size":102,"hash":"190ba347874a1b9f94b6407cf4cbeda9da8ee0ddc96618a46ac576f79d6e692a"},"面试题汇总/合并K个升序链表.md":{"mtime":1598670579537.5178,"size":120,"hash":"3062592a33ad25601f99c36f0395a1e18fb44a70849ff753e4eb94f386ed6afa"},"面试题汇总/有效的括号.md":{"mtime":1598670715921.972,"size":78,"hash":"505793ba3071985b23688f29abc3abf8d14a9864eafc918d359005b211216598"},"_编程基础工具/经典表达式计算递归结构.md":{"mtime":1598671197144.3987,"size":0,"hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"面试题汇总/Pow(x, n).md":{"mtime":1598710275896.448,"size":64,"hash":"b5862e6f4aff89e90e42632bcf36ed825913f47bd352d30838d33cd221bdf465"},"面试题汇总/表达式计算问题.md":{"mtime":1598671237436.5935,"size":188,"hash":"d8a63aca88ec5c965e5d45e1aecd8f1e8d11c40959ed39909c11f958c2497fe9"},"面试题汇总/接雨水.md":{"mtime":1598710181283.2441,"size":75,"hash":"5989de1870e52194e980a90ef751925ce7fb428ba95b73646b1509588e93d407"},"面试题汇总/解数独.md":{"mtime":1598709616506.7388,"size":69,"hash":"9b3716e1fff9e737c7291da3e3ad57a6e4dad2df4a702a2d13cfcf6f45c7b4df"},"面试题汇总/两数相除.md":{"mtime":1598709446362.2043,"size":78,"hash":"e9d8b7dfb855c87261d321ba68c986a93846f23d3a8044da15b33bfd621f54c8"},"面试题汇总/全排列.md":{"mtime":1598710218866.3752,"size":69,"hash":"a9f53808c48dd58074058fdb99643cb0c854d16def127afbee181e89535e8e5d"},"面试题汇总/缺失的第一个正数.md":{"mtime":1598710106140.0642,"size":94,"hash":"bc261b49e13fbdcf96813fe0727aec90ebea5440c3573dd174df503b453cb444"},"面试题汇总/删除排序数组中的重复项.md":{"mtime":1598681518661.6099,"size":118,"hash":"798f0cc990e868652ba167e91d1bd0622a22766e7d9c7fd910b74c4f11ee2dd9"},"面试题汇总/实现 strStr().md":{"mtime":1598709420312.3662,"size":108,"hash":"3d28054c2f2a26dba8f3846a19cadd42bf4c9ef7d4ec204fc4446b5adac92f29"},"面试题汇总/搜索旋转排序数组.md":{"mtime":1598709496485.5852,"size":109,"hash":"da184ff5e0ca71046f99a447a07186fd664f1d3b5291958c4c4acd0323dc28a2"},"面试题汇总/通配符匹配.md":{"mtime":1598710204531.9392,"size":80,"hash":"ac2e509d763a7eadf3242004e998b64f632aa747989a9970ad8244e4050f4637"},"面试题汇总/外观数列.md":{"mtime":1598710093073.7478,"size":73,"hash":"05470200d4fc17ec789a1b4a040de50b361517d3bd30b87fa279b0d1d7ce1a5f"},"面试题汇总/旋转图像.md":{"mtime":1598710243765.1748,"size":71,"hash":"2ac277da3164a308725f7d00c25d0bf72129e8754083d7efcb75b8bf4d985286"},"面试题汇总/有效的数独.md":{"mtime":1598709597346.222,"size":74,"hash":"e4808f71e049c272b0bcac9ae25d6478e91f63ba1130ade51b5d22379208c87a"},"面试题汇总/在排序数组中查找元素的第一个和最后一个位置.md":{"mtime":1598709572506.1567,"size":83,"hash":"f94187b909bc74722c10d7bb3de72723ed01b95ead7193f18151a7635c94370a"},"面试题汇总/字母异位词分组.md":{"mtime":1598710257917.2212,"size":83,"hash":"fbc2caf9b248c1e55cbca4d68194cce51a1e5ea486b1fae26cb043113f6636fa"},"按题目系列分类/字符串匹配系列问题.md":{"mtime":1598754619942.422,"size":107,"hash":"eeb241e7561a4b88350a6618a25501d60f15fe9d8e9a0ac717a306d377041758"},"分类总结/一个样本做行一个样本做列的模型.md":{"mtime":1599627053663.0127,"size":411,"hash":"4e876d286a202178b697714a164185cdf9c63d6724953a65fd856f349e6e773e"},"按题目系列分类/编辑距离系列问题.md":{"mtime":1598844790365.2512,"size":118,"hash":"b687c447b23207396bdd54690c8cb2cd97d7959c2ac75a0897c84ccfc79dce9f"},"按题目系列分类/最长递增子序列系列问题.md":{"mtime":1598849415675.8042,"size":227,"hash":"a4a8257f7e73c06e59388bd4742ef9fcdbe95634fc8cce8f9f8f495a0aadce53"},"按题目系列分类/打家劫舍系列问题.md":{"mtime":1598849500233.5583,"size":33,"hash":"4141ef910e0c87853624a994e864753bb2e7447091c22b82c247796e20d3adbb"},"面试题汇总/连接最多点的曲线最多穿过的点数.md":{"mtime":1598849432236.493,"size":318,"hash":"ca8e5b68c4c6e95ae4895abc2d6ada48124084caeff45c9fe920a3ce80dee937"},"经典面试题讲解/经典面试题目1.md":{"mtime":1598539056623.9473,"size":299,"hash":"7fedc012f1f28240f77d21d350c027dd3aa87346b1688f28bf2b3036ced9e3da"},"经典面试题讲解/经典面试题目10.md":{"mtime":1598545282524.447,"size":388,"hash":"7caff48e8a64727c3c8dbf1a4ed4ccdb85adbfa8ee4949ec59c49472334a53fc"},"经典面试题讲解/经典面试题目11.md":{"mtime":1598545484388.732,"size":217,"hash":"f67ec709ae3e674672ca14b0f079ef0166b140a0dcf3271c2f9450991c76ad98"},"经典面试题讲解/经典面试题目12.md":{"mtime":1598550959057.8777,"size":739,"hash":"7a0d40dd0748b7bc9e8c23a4506b55e9ef5ba9e4edb3eee7c0e84f69b1bfb3f0"},"经典面试题讲解/经典面试题目13.md":{"mtime":1598546272847.46,"size":401,"hash":"1aaea286c1718a0001995a185e0f03788866e9584ef26b5afdc09892d2dcf08a"},"经典面试题讲解/经典面试题目14.md":{"mtime":1598546481763.8044,"size":314,"hash":"c45744b6baab1751326203b7e06871a6acd65cbf1ad9c03ef3e3391aae4e59f6"},"经典面试题讲解/经典面试题目15.md":{"mtime":1598548326354.0432,"size":275,"hash":"4728ee8ce4a8595a693ad0a1a2b12d702de7902f0a4e9d1bb763a927095dd3bf"},"经典面试题讲解/经典面试题目16.md":{"mtime":1598548563472.6223,"size":160,"hash":"33155176ba49b82a68ab5d01502b8c011b9bab18e489e7c9ea4ed1ba4cb57b75"},"经典面试题讲解/经典面试题目17.md":{"mtime":1598548698457.0244,"size":180,"hash":"434a8cf0f47097fb3c9e137233fe5f0fc6582c844efe1d3fdb1cb77541bfa52a"},"经典面试题讲解/经典面试题目18.md":{"mtime":1598549154567.4658,"size":202,"hash":"1d0edb4e43504cca1173fc100d326cca179d54b541c081fbf4b4815cb2dc02ec"},"经典面试题讲解/经典面试题目19.md":{"mtime":1598549309363.0337,"size":196,"hash":"e8177db4395457d867d2b5c769aa3cc316483fee21d1c456e7e6fa2c44367294"},"经典面试题讲解/经典面试题目2.md":{"mtime":1598539232556.775,"size":232,"hash":"e2a8904f8e082c69ea5975fbd9acc731f2740c01b5c07116799af83c47f7eba1"},"经典面试题讲解/经典面试题目20.md":{"mtime":1598549405521.7954,"size":265,"hash":"873a476181af223fabb65ea2cd51ad9c8855bb2e7e08c5d8c316bfbcbde64560"},"经典面试题讲解/经典面试题目21.md":{"mtime":1598549555791.8022,"size":206,"hash":"1e1474293f854ff5fea64f345fbff43d1ea477a958de0d9d5dd86e796bb46207"},"经典面试题讲解/经典面试题目22.md":{"mtime":1598549625012.6277,"size":258,"hash":"b6dfd7193fcea3bc014415f3d50dbdfd00dd9bd80def44a742545d9fe556c1f5"},"经典面试题讲解/经典面试题目23.md":{"mtime":1598549738414.261,"size":261,"hash":"7434e351946884b368d4b324406ae43f0459538ef026f0ab8427ffe8eb9db46a"},"经典面试题讲解/经典面试题目24.md":{"mtime":1598549829838.6875,"size":215,"hash":"66ca732e729e1225aa0e82f3a1a470839abf7a6f2ce618131a3af039233aa7a6"},"经典面试题讲解/经典面试题目25.md":{"mtime":1598554092224.6304,"size":195,"hash":"febcbd3c2f8aca5b73d804dcbb240cd86caf14b5d7a09b7885222d30bb16e05d"},"经典面试题讲解/经典面试题目26.md":{"mtime":1598554100191.3174,"size":222,"hash":"91c5dc9496a1178e5eafa8732c232ca47023332f29f0079a86e9991cd4076604"},"经典面试题讲解/经典面试题目27.md":{"mtime":1598553351073.9568,"size":136,"hash":"bd3acdaa4f30d09723457ed8ccc9b7496132b0e0d5798686277614db65fdd440"},"经典面试题讲解/经典面试题目28.md":{"mtime":1598547705626.1316,"size":321,"hash":"78fd83e158926a07a9f857694c3adf3aea4559ee0a2c320f7edd5c0220056f94"},"经典面试题讲解/经典面试题目29.md":{"mtime":1598552916985.218,"size":311,"hash":"3e79138dc6edb0e06889b1510a7db754360a44b01fff3e4d065cb4016ee60b2a"},"经典面试题讲解/经典面试题目3.md":{"mtime":1598539385507.7722,"size":221,"hash":"5a79218cd2be8713055ae1fdced3f8cc9b20f06b96d2201090aa03073b9bca62"},"经典面试题讲解/经典面试题目30.md":{"mtime":1598553049496.7307,"size":135,"hash":"636aea1692224b22ba5c6f86cb0e8294d7e9ad544a00de7f3257abf365d1bdef"},"经典面试题讲解/经典面试题目31.md":{"mtime":1598550562551.5874,"size":187,"hash":"3e5ac2b0e7f0e23165d072891be172cce8743d12d4a231aaea225000938b599d"},"经典面试题讲解/经典面试题目32.md":{"mtime":1598552874952.661,"size":229,"hash":"75f853917757777a064a202f5f62f941a9d3d7244ee385a47ab1d2962063cd90"},"经典面试题讲解/经典面试题目4.md":{"mtime":1598539719027.7798,"size":464,"hash":"229277d2daa7a15760892be93e1bb6aa8d2bc0ed0e978676d9869456c823433f"},"经典面试题讲解/经典面试题目5.md":{"mtime":1598765201748.2512,"size":385,"hash":"828fa0a7ee81a061c3e069f4c4a6da519c4b27bff590a2bf36001cee2e3a4536"},"经典面试题讲解/经典面试题目6.md":{"mtime":1599628611095.631,"size":453,"hash":"ee2da3d38be542d58ae066d2ff3c38c7dd2dbff8d84b21b768228c93b014af32"},"经典面试题讲解/经典面试题目7.md":{"mtime":1598604321228.663,"size":30,"hash":"fa95425e1dc494e692ae2530e69b97cbee9892637784ff30afcb060f00bc3b02"},"经典面试题讲解/经典面试题目8.md":{"mtime":1598544610219.9502,"size":319,"hash":"39a9af11c4ba4ab57b790f288089280283a680f96ab46622354b9ffa7fa8ff95"},"经典面试题讲解/经典面试题目9.md":{"mtime":1598544853823.2383,"size":554,"hash":"2a5c81881fb84f4023d3943f9d07c58c74596ac22b0332d82ad99182d9c5056d"},"分类总结/假设答案法.md":{"mtime":1599224125795.451,"size":224,"hash":"ce3db17d931e623a0213df3d112c85b9f5a586d672804e0456c3d7490a80d4b9"},"面试题汇总/完美字符串.md":{"mtime":1599283564472.2036,"size":764,"hash":"a44c1a4b218aaab7d54e8c790a6311af4030ec217e87048834fc20309850bbb3"},"天池POJ/0905期.md":{"mtime":1599283537017.617,"size":37,"hash":"99ee7b6f7d143a0d5a7b2c1febad18e8829b1fa31bdc12d042f925a324533fe2"},"面试题汇总/N 皇后.md":{"mtime":1599270096205.5735,"size":65,"hash":"1c2730709c09407baf1a08e03712e003d8f74f991def439751379f9bb4668c20"},"按题目系列分类/矩阵旋转系列问题.md":{"mtime":1599270025427.229,"size":133,"hash":"deda7052f125bbe763471ba771a2683dd17c2cceaa4683cf7f0b0fceb0cba496"},"面试题汇总/最长同值路径.md":{"mtime":1599268119677.4954,"size":114,"hash":"22a7d15195df17dd01b181381c0f89cbf8c53ec304cd258bc66d8eaab2cd3651"},"LeetCode高频题/leetcode高频题目全讲(7).md":{"mtime":1599270131928.9944,"size":413,"hash":"388851e10fb537906ce38c9fc88a210e48078f8bf95ed0362096f5baf8311b6c"},"数学基础/辗转相除法求最大公约数.md":{"mtime":1599293444712.1846,"size":42,"hash":"e237f97ea36a38465d34324c2e56449b37b59d1d66268dba44899caa38692e14"},"数学基础/最大公约数最小公倍数.md":{"mtime":1599293497064.8623,"size":346,"hash":"c6d4ecbd7d5c1d2406ba584e7f6e884514fe509f3b835de447f04a8339e34d57"},"面试题汇总/三数之和.md":{"mtime":1598670506757.0857,"size":62,"hash":"b462965239036a359a6f9de87bac037b1f327f3ed6e45d6cc28db516af718780"},"面试题汇总/删除链表的倒数第N个节点.md":{"mtime":1598670736620.5928,"size":113,"hash":"54060d4bb5f67f341c03dbf9282c198297076252e260bc0fec5bbc515c5da718"},"按题目系列分类/数组累加和系列问题.md":{"mtime":1599622113550.2961,"size":204,"hash":"562005eaa839d82b498c33f7e1a207d602b1a232bd4a4b6bb1adfd88bc556637"},"分类总结/根据具体输入数据状况看菜下饭的题目.md":{"mtime":1599627941933.9983,"size":454,"hash":"c1e401fd4bbe6fae7294773e2933a6f9b636ed1f51359b32ea7cac86a2b395d0"}},"metadata":{"632f0d15ac2c78fc92b7bcec93673a1c550514ddc98f54bbe95ed60e4a57462c":{"links":[{"lineStart":3,"lineEnd":5,"link":"两数之和","original":"[[两数之和]]","displayText":"两数之和"},{"lineStart":6,"lineEnd":8,"link":"两数相加","original":"[[两数相加]]","displayText":"两数相加"},{"lineStart":9,"lineEnd":11,"link":"无重复字符的最长子串","original":"[[无重复字符的最长子串]]","displayText":"无重复字符的最长子串"},{"lineStart":12,"lineEnd":14,"link":"寻找两个正序数组的中位数","original":"[[寻找两个正序数组的中位数]]","displayText":"寻找两个正序数组的中位数"},{"lineStart":15,"lineEnd":17,"link":"最长回文子串","original":"[[最长回文子串]]","displayText":"最长回文子串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(1)","level":1}]},"72a3c8a4af0a0e9ab115a26364bff053232742100c8faf896aeaf063195f3d4f":{"links":[],"embeds":[],"tags":[],"headings":[]},"3e08ccbc20fb57472299203a3563632089549f0b40c5d651ad3926b1049ff5e8":{"links":[],"embeds":[],"tags":[],"headings":[]},"8ba94bf9d272639c74ce77f718de2cda2aa835428b789d6ef05a38465faac5ee":{"links":[],"embeds":[],"tags":[],"headings":[]},"596be8f65207181fb9eecb14e14a3554ee7b63a183c859be70e8bee881c0adc4":{"links":[],"embeds":[],"tags":[],"headings":[]},"e18174ec67d6f79b0f28aedffdb22c6610824097788d658ef32d35567f3ca020":{"links":[],"embeds":[],"tags":[],"headings":[]},"66a914b79ac9415632fae24c63123648b7fcb41c3910817a262643ee45a43453":{"links":[],"embeds":[],"tags":[],"headings":[]},"2f8d260354fe66272803d43b9f414e44bb9c25a5deae1e42752106b19c26a5a2":{"links":[],"embeds":[],"tags":[],"headings":[]},"a97b53f92dbbecf2e2cb4de2b1491909beb4c8edfae471f76caa88ba1acb6173":{"links":[],"embeds":[],"tags":[],"headings":[]},"dad8f4cd92a62f2cc14892c6a10934f9df0c94ade5298026d2848a9e49f03ed1":{"links":[],"embeds":[],"tags":[],"headings":[]},"e9ef88c0481ea3797bcede67f4f2a0a178252365e0a52acb4eb85b64097d53ed":{"links":[],"embeds":[],"tags":[],"headings":[]},"32725b514e10b749fbaf36843241efb9ed11bd407ae8926d24a7de12f2768f8b":{"links":[],"embeds":[],"tags":[],"headings":[]},"6e68ce6d2afcb84b559ccfd1a32e8067252c61b7cf1b30630364ebbdf829c55d":{"links":[],"embeds":[],"tags":[],"headings":[]},"710ed621455f811d370de9d1e1b3045f9b2329e6195898cdfc50fd960ce7f7eb":{"links":[],"embeds":[],"tags":[],"headings":[]},"2b7254ee9ffe0c479032afad367bc96d682174d0a6b65f71bd95617e1a4dfd8c":{"links":[],"embeds":[],"tags":[],"headings":[]},"4c54ef2fd98c993ae38324b1b80d19b48f8af52ee8e6cc71b17fc58166e1248e":{"links":[],"embeds":[],"tags":[],"headings":[]},"088c23fd31a8e8cb4718cbea4179e2d69986dbab2d35e6d896e78a82916e70a1":{"links":[],"embeds":[],"tags":[],"headings":[]},"8b09dc7c4870227e8dbca332829841760be0e59ebcc91eed7b882ad3ef04fc3b":{"links":[],"embeds":[],"tags":[],"headings":[]},"192572a0db5e9fa86a0599ebdb693e2071b880c74f31e003d426715930380bda":{"links":[],"embeds":[],"tags":[],"headings":[]},"18fa70d084df99e053f03a915489bdd512be7aa46ee736a8813ae5e749d2d680":{"links":[],"embeds":[],"tags":[],"headings":[]},"29dd13c0713f1e2f0a09f7364a8922b8255bd05aaeec62d60b455dfa8a9994cb":{"links":[],"embeds":[],"tags":[],"headings":[]},"fd9ab257bd8860f1548f0a77797cde1784cdfc7973bc8acc5e14d7ea10affb45":{"links":[],"embeds":[],"tags":[],"headings":[]},"0721a67a9ecf9b6ee5ce9873b6477f954abaf447e4c39a00c8e4470b0c38c32c":{"links":[],"embeds":[],"tags":[],"headings":[]},"d1f91fde4da6dbe60a179915587ab91e0061d48f86b1e3febc81d6e9a2cd8fcf":{"links":[],"embeds":[],"tags":[],"headings":[]},"905ea238ac6b7129eb1a7ae2e23e1d8db31aa83262565bd4343edff525a9837a":{"links":[],"embeds":[],"tags":[],"headings":[]},"9e0e2c3570a9bcabbf9fc9318a65e017c64bfb4c01c2ce99bf21e470f4c12cd5":{"links":[],"embeds":[],"tags":[],"headings":[]},"99adf3f85d115e64777803f63d19c271c62b190139af979c60415be191bfcfab":{"links":[],"embeds":[],"tags":[],"headings":[]},"d23e0350ce2cefa5bd6f89b4986b05f1a1e0d9e1cf75bf5778812d2ca4481fb1":{"links":[],"embeds":[],"tags":[],"headings":[]},"fd3db03248114b1e68974a105f115f66210b7f1f5815db5615b6c9f2d31418d0":{"links":[{"lineStart":9,"lineEnd":10,"link":"求数组小和","original":"[[求数组小和]]","displayText":"求数组小和"},{"lineStart":13,"lineEnd":14,"link":"求数组中的逆序对数量","original":"[[求数组中的逆序对数量]]","displayText":"求数组中的逆序对数量"}],"embeds":[],"tags":[{"line":2,"tag":"#归并排序"}],"headings":[{"line":0,"heading":"利用归并排序做信息统计","level":1},{"line":7,"heading":"数组小和问题","level":2},{"line":11,"heading":"求逆序对","level":2}]},"429cbf9b1bf631acce0eb019b32bfb46bb6f9626fb24f60c4094c743025f2147":{"links":[{"lineStart":4,"lineEnd":5,"link":"二维数组中离给定K值最近的子矩阵累加和","original":"[[二维数组中离给定K值最近的子矩阵累加和]]","displayText":"二维数组中离给定K值最近的子矩阵累加和"},{"lineStart":5,"lineEnd":6,"link":"单调栈代码","original":"[[单调栈代码]]","displayText":"单调栈代码"},{"lineStart":6,"lineEnd":7,"link":"数组直方图装水","original":"[[数组直方图装水]]","displayText":"数组直方图装水"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"压缩数组技巧","level":1}]},"06b2d959e9451682f51db6f054b127563596a90763a9ecfa46ea71039b108ecc":{"links":[{"lineStart":9,"lineEnd":10,"link":"数组L...R范围上的累加和计算代码","original":"[[数组L...R范围上的累加和计算代码]]","displayText":"数组L...R范围上的累加和计算代码"}],"embeds":[],"tags":[{"line":2,"tag":"#预处理数组"}],"headings":[{"line":0,"heading":"数组L...R范围上的累加和计算","level":1}]},"aea30f0874df37c3e15f81d321f370bea8b0d76e3c4f89e2569a9fc758343a52":{"links":[{"lineStart":7,"lineEnd":8,"link":"求数组中的逆序对数量代码","original":"[[求数组中的逆序对数量代码]]","displayText":"求数组中的逆序对数量代码"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求数组中的逆序对数量","level":1}]},"795138a2a51debda0d04f1f26d5c628411c8ede79e977c8ac8f683f464fe7aa7":{"links":[{"lineStart":13,"lineEnd":14,"link":"荷兰国旗问题代码","original":"[[荷兰国旗问题代码]]","displayText":"荷兰国旗问题代码"}],"embeds":[],"tags":[{"line":2,"tag":"#快速排序"}],"headings":[{"line":0,"heading":"荷兰国旗问题","level":1}]},"e8662434bb1a90633afd865682352f33a6834b28d90dc9f905cf847a777c5603":{"links":[{"lineStart":39,"lineEnd":40,"link":"长方形中任意矩阵的累加和代码","original":"[[长方形中任意矩阵的累加和代码]]","displayText":"长方形中任意矩阵的累加和代码"}],"embeds":[{"lineStart":5,"lineEnd":6,"link":"Pasted image 22.png","original":"![[Pasted image 22.png]]","displayText":"Pasted image 22.png"},{"lineStart":16,"lineEnd":17,"link":"Pasted image 21.png","original":"![[Pasted image 21.png]]","displayText":"Pasted image 21.png"},{"lineStart":18,"lineEnd":20,"link":"Pasted image 23.png","original":"![[Pasted image 23.png]]","displayText":"Pasted image 23.png"},{"lineStart":21,"lineEnd":23,"link":"Pasted image 24.png","original":"![[Pasted image 24.png]]","displayText":"Pasted image 24.png"},{"lineStart":24,"lineEnd":26,"link":"Pasted image 26.png","original":"![[Pasted image 26.png]]","displayText":"Pasted image 26.png"}],"tags":[{"line":2,"tag":"#预处理数组"}],"headings":[{"line":0,"heading":"长方形中任意矩阵的累加和","level":1}]},"ad8061d51db21f6b82a98801ed064876589b218ec768c7a705f8fe482138d1f0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#bfprt"}],"headings":[{"line":0,"heading":"bfprt代码","level":1}]},"0ceed81b3056a84cd5f4a5cc1a163bbc596af12ad2251abd0c88ff789eb97cb1":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Dijkstra算法"}],"headings":[{"line":0,"heading":"Dijkstra算法代码","level":1}]},"8247f7b942ca790b1b79082fb9e10c69af8677dd9ba2021d22d8da675101c2b4":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#KMP算法"}],"headings":[{"line":0,"heading":"KMP代码","level":1}]},"d2ab0abfdaf627800f4ca10a4373371a9e0e15215b330a1308c94f6c9c87a3c3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Kruskal"}],"headings":[{"line":0,"heading":"Kruskal算法代码","level":1}]},"d07e2bae8b43bfdb047b0c2c9e7e593b72c402f0012565a7439007b8029726d3":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#LFU"}],"headings":[{"line":0,"heading":"LFU内存替换算法的实现","level":1}]},"8a90b73fa0f0f67505be6f5b176fb353c3839e63b8f81ce6e2f456b7181d117d":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#LRU"}],"headings":[{"line":0,"heading":"LRU内存替换算法的实现","level":1}]},"1c5a2a35a1f62fcb3e7db2b6ff2a4010aa8eb29b2d7d910b72e23659d5b75ee1":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Manacher算法"}],"headings":[{"line":0,"heading":"Manacher算法代码","level":1}]},"0ec0eed5bab2de84874332820dd95cb349b5c52d7eb55c0795ebbbe0e4758865":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Morris遍历"}],"headings":[{"line":0,"heading":"Morris实现中序遍历","level":1}]},"a60a684b153449cf77d1d27108c565847dc71ab7301ef5629458adfb45b56fa2":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Morris遍历"}],"headings":[{"line":0,"heading":"Morris实现前序遍历","level":1}]},"e4d7d19d0598ca42dba2b8281922e2d180d77025e6dc15fe568cc977b81bfdf0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Morris遍历"}],"headings":[{"line":0,"heading":"Morris实现后序遍历","level":1}]},"18864c15e3422e23c44ca60dbe1bd327c791dc42f117f49b848f12ff03df5678":{"links":[{"lineStart":38,"lineEnd":39,"link":"Morris实现前序遍历","original":"[[Morris实现前序遍历]]","displayText":"Morris实现前序遍历"},{"lineStart":39,"lineEnd":40,"link":"Morris实现中序遍历","original":"[[Morris实现中序遍历]]","displayText":"Morris实现中序遍历"},{"lineStart":40,"lineEnd":41,"link":"Morris实现后序遍历","original":"[[Morris实现后序遍历]]","displayText":"Morris实现后序遍历"}],"embeds":[],"tags":[{"line":2,"tag":"#Morris遍历"}],"headings":[{"line":0,"heading":"Morris遍历代码","level":1}]},"1d07793762337606b98feb2b7730795a2a1b96db528d5e47759224fb78d6d9a5":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Prim"}],"headings":[{"line":0,"heading":"Prim算法代码","level":1}]},"315d40e404352bec176bf5d406f1c2b9ed8f68d5e67dd028b32e9e3ba473eae0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#SB树"}],"headings":[{"line":0,"heading":"SB树代码","level":1}]},"12a898d5fcbb19be59da192c73bbd2a38905b48de0bbc0389a36a1dcff73de21":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两个有序数组求上中位数","level":1}]},"e9a52dea2a4284a5538503ef6b09031ea1e3540871ec5f43eb5064cf25f642cc":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#冒泡排序"}],"headings":[{"line":0,"heading":"冒泡排序","level":1}]},"31da367e97fc7afcc3fcd351722a632cea20fcfbd46471fd0bdf52ca27801ffa":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#前缀树"}],"headings":[{"line":0,"heading":"哈希表实现前缀树","level":1}]},"20658c81dfab0f1237ac8982d69ccffbc4d1c9738a578a46792e2a380d68dfbd":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#拓扑排序"}],"headings":[{"line":0,"heading":"图的拓扑排序算法","level":1}]},"d4a6255cb164bbe2c408b18d268047e7890732c4651032f713406f5615ed9a85":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"图的统一表述结构","level":1},{"line":7,"heading":"点结构描述","level":2},{"line":28,"heading":"边的描述","level":2},{"line":44,"heading":"图的描述","level":2}]},"cc2160ef278bfa3aa6d4772f7499ccaeb2bba69f8943c0bbc1207b683b7db2f0":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#基数排序"}],"headings":[{"line":0,"heading":"基数排序","level":1}]},"1dd6efd3da6fbe81d85c1b82efb81521ed9d5ba50c85b21c63a55e9336a49ebf":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#DFS"}],"headings":[{"line":0,"heading":"字符串的全排列代码","level":1}]},"69d44d2f0784c393d426b31c16a8395606df85983d0b11d8e90d366c26b4b171":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#完美洗牌算法"}],"headings":[{"line":0,"heading":"完美洗牌算法代码","level":1}]},"fcf6b594531d7633bf9838863f4c2c95fc810451907356190da47d654ecf7cf4":{"links":[{"lineStart":114,"lineEnd":115,"link":"随机生成双向链表","original":"[[随机生成双向链表]]","displayText":"随机生成双向链表"}],"embeds":[],"tags":[{"line":2,"tag":"#对数器"}],"headings":[{"line":0,"heading":"对数器","level":1},{"line":8,"heading":"数组相关","level":2},{"line":9,"heading":"随机数组生成","level":3},{"line":26,"heading":"数组拷贝","level":3},{"line":41,"heading":"相等比较","level":3},{"line":65,"heading":"打印","level":3},{"line":79,"heading":"链表","level":2}]},"4d72065fe6cf9cab6c830253b1bf6f01a5520cafef16a5abb953b1df9f129c63":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#并查集"}],"headings":[{"line":0,"heading":"并查集代码","level":1}]},"66e31cd2f6cdc43eb44d19b42f4acffb8b91bf25f688c6afcf4bff47a467f7d0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#归并排序"}],"headings":[{"line":0,"heading":"归并排序","level":1}]},"938a413c3a70bbcd60d237294df0e95acc5581847094a2005523fb7536b4ca74":{"links":[{"lineStart":8,"lineEnd":11,"link":"03 归并排序与随机快排#快速排序1 0","original":"[[03 归并排序与随机快排#快速排序1 0]]","displayText":"03 归并排序与随机快排#快速排序1 0"},{"lineStart":8,"lineEnd":11,"link":"03 归并排序与随机快排#快速排序2 0","original":"[[03 归并排序与随机快排#快速排序2 0]]","displayText":"03 归并排序与随机快排#快速排序2 0"},{"lineStart":8,"lineEnd":11,"link":"03 归并排序与随机快排#快速排序3 0 随机快排 荷兰国旗技巧优化","original":"[[03 归并排序与随机快排#快速排序3 0 随机快排 荷兰国旗技巧优化]]","displayText":"03 归并排序与随机快排#快速排序3 0 随机快排 荷兰国旗技巧优化"}],"embeds":[],"tags":[{"line":3,"tag":"#快速排序"},{"line":3,"tag":"#荷兰国旗问题"}],"headings":[{"line":0,"heading":"快速排序","level":1},{"line":14,"heading":"快速排序1.0","level":2},{"line":69,"heading":"快速排序2.0","level":2},{"line":84,"heading":"荷兰国旗问题","level":3},{"line":140,"heading":"快速排序3.0","level":2},{"line":156,"heading":"随机快排的时间复杂度分析","level":4}]},"671bc11dd2d00cbcb3795cc8204bc3b4b1ebd63b645bd0e872b5432a86418c69":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#插入排序"}],"headings":[{"line":0,"heading":"插入排序","level":1}]},"f8dff514c3960c6f21505879f078d6f7bd342722531296b2f5760544559934ef":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#预处理数组"}],"headings":[{"line":0,"heading":"数组L...R范围上的累加和计算代码","level":1}]},"ded1a0328fdc67e3604edfd9ffa6dac296503b82ef03590d452f5d3962319717":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组中离给定K值最近的子数组累加和代码","level":1}]},"c86f39fc3997f076745a4e39156a8273054234a017999e341f789a806e148ca1":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#比较器"}],"headings":[{"line":0,"heading":"比较器","level":1}]},"7894f78be8e6a31d4b826f41ad1b6fc8f844a61215af4787bda1a41ca1255aac":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求数组中的逆序对数量代码","level":1}]},"7d73ed7555759a562f73561bad506ea844aeecc24f8608e7a49e4852c3bf013b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求数组小和代码","level":1}]},"3c55882f57301682c1f8eeccaae48b02118ff7b124ff34fc624e5ac67f0c33de":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"没有小括号的表达式结果计算","level":1}]},"36b26bb253db863b6adc8fc29aaa286c9127b434900ce28495f7e9e18f9aedc6":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#线段树"}],"headings":[{"line":0,"heading":"线段树代码","level":1}]},"922d3bee5ae42401f04bba84adc5d1130e980176a62258b434142135e3d2db74":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#荷兰国旗问题"}],"headings":[{"line":0,"heading":"荷兰国旗问题代码","level":1}]},"189a3b987e361059edf4f3f98ea15cad02fc4acd61783b6e1fb982d0e6f4bdb3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#计数排序"}],"headings":[{"line":0,"heading":"计数排序","level":1}]},"ff1ce51b112a8454741494cc7366bf9080710aa3ce1fe1b363f6d13d95b3c355":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#选择排序"}],"headings":[{"line":0,"heading":"选择排序","level":1}]},"1e0a2559b7b95415bb5419a3b1cb0931ab84d3d4fb49c1c34b5d0e551b193118":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#预处理数组"}],"headings":[{"line":0,"heading":"长方形中任意矩阵的累加和代码","level":1}]},"dcad8aeffecc572789ab30d81ca25c548721762a1f6e4d56592f46563c14f63e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"随机生成双向链表","level":1}]},"52daa12eac996343353600cefba3403a216020998f596e33f1662ace4821a1eb":{"links":[{"lineStart":12,"lineEnd":13,"link":"普通硬币跟纪念币拼出指定面值","original":"[[普通硬币跟纪念币拼出指定面值]]","displayText":"普通硬币跟纪念币拼出指定面值"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"DP中斜率优化","level":1}]},"da857bc7ad42d0c5d6c84376ac8ae66f48f105e6f1e83455039ecdec64d03b60":{"links":[{"lineStart":5,"lineEnd":6,"link":"无序数组如果排序之后相邻数之间的最大差值","original":"[[无序数组如果排序之后相邻数之间的最大差值]]","displayText":"无序数组如果排序之后相邻数之间的最大差值"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"不算差的平凡解杀死可能性的技巧","level":1}]},"8ba69bb11b7d9795863a5c7de456bde09e1693df94013670e0233bc852359ba9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"外部信息简单化的处理技巧","level":1}]},"a94a8a2a51f5c7e8684c92e8c635df0ae230e4b290858c36aade2408aab43b12":{"links":[{"lineStart":6,"lineEnd":8,"link":"经典表达式计算递归结构","original":"[[经典表达式计算递归结构]]","displayText":"经典表达式计算递归结构"},{"lineStart":6,"lineEnd":8,"link":"没有小括号的表达式结果计算","original":"[[没有小括号的表达式结果计算]]","displayText":"没有小括号的表达式结果计算"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"所有编译原理,括号优先级表达式的处理办法","level":1}]},"9bbde7894082660c2edc39ba0fcc976732efeec2b913b28da25aa8de77b036ad":{"links":[{"lineStart":5,"lineEnd":6,"link":"二维数组中可以走出的单词","original":"[[二维数组中可以走出的单词]]","displayText":"二维数组中可以走出的单词"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"故意设计出来, 卡常数时间的题","level":1}]},"e5e8c3e49f9fd36b288634263f6f947660a251f33b7d0f2fe9fb09a19ab05da3":{"links":[{"lineStart":11,"lineEnd":15,"link":"整数组成的无序数组中子数组的累加和小于等于K的最大长度","original":"[[整数组成的无序数组中子数组的累加和小于等于K的最大长度]]","displayText":"整数组成的无序数组中子数组的累加和小于等于K的最大长度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"有关可能性舍弃的题","level":1}]},"cbb6fccc2460e2519441e0bc936f4e2cd59848960323234c3e5dcf6c8f1cb2e1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"系统设计之UUID","level":1}]},"0e66e3303f6ab69d69f06db81ad3663d1b38b3309902449964fce0422a52c088":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"解决子数组问题的两种想法","level":1}]},"bfad831c56787098d5fdef8b010bd397001fc4ac25b9e53ee83f057168000035":{"links":[{"lineStart":20,"lineEnd":23,"link":"二维数组最大递增链的长度","original":"[[二维数组最大递增链的长度]]","displayText":"二维数组最大递增链的长度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"记忆化搜索跟经典动态规划","level":1},{"line":3,"heading":"经典动态规划的样子","level":2},{"line":9,"heading":"记忆化搜索是否改为经典动态规划","level":2}]},"b3d90d8671a610fed88a4155d3d3a68ae6a69f9bc1a6f0df64fc916ed2533105":{"links":[{"lineStart":54,"lineEnd":55,"link":"选择排序","original":"[[选择排序]]","displayText":"选择排序"},{"lineStart":55,"lineEnd":56,"link":"冒泡排序","original":"[[冒泡排序]]","displayText":"冒泡排序"},{"lineStart":56,"lineEnd":57,"link":"插入排序","original":"[[插入排序]]","displayText":"插入排序"},{"lineStart":167,"lineEnd":168,"link":"在一个有序数组中，找某个数是否存在","original":"[[在一个有序数组中，找某个数是否存在]]","displayText":"在一个有序数组中，找某个数是否存在"},{"lineStart":168,"lineEnd":169,"link":"在一个有序数组中，找大于等于某个数最左侧的位置","original":"[[在一个有序数组中，找大于等于某个数最左侧的位置]]","displayText":"在一个有序数组中，找大于等于某个数最左侧的位置"},{"lineStart":169,"lineEnd":170,"link":"在一个有序数组中，找小于等于某个数最右侧的位置","original":"[[在一个有序数组中，找小于等于某个数最右侧的位置]]","displayText":"在一个有序数组中，找小于等于某个数最右侧的位置"},{"lineStart":170,"lineEnd":171,"link":"局部最小值问题","original":"[[局部最小值问题]]","displayText":"局部最小值问题"},{"lineStart":188,"lineEnd":192,"link":"如何不用额外变量交换两个数","original":"[[如何不用额外变量交换两个数]]","displayText":"如何不用额外变量交换两个数"},{"lineStart":188,"lineEnd":192,"link":"一个数组中出现了奇数次的数","original":"[[一个数组中出现了奇数次的数]]","displayText":"一个数组中出现了奇数次的数"},{"lineStart":188,"lineEnd":192,"link":"提取整形数最右侧的1","original":"[[提取整形数最右侧的1]]","displayText":"提取整形数最右侧的1"},{"lineStart":188,"lineEnd":192,"link":"一个数组中出现奇数次的两个数","original":"[[一个数组中出现奇数次的两个数]]","displayText":"一个数组中出现奇数次的两个数"},{"lineStart":197,"lineEnd":198,"link":"选择排序","original":"[[选择排序]]","displayText":"选择排序"},{"lineStart":198,"lineEnd":199,"link":"冒泡排序","original":"[[冒泡排序]]","displayText":"冒泡排序"},{"lineStart":199,"lineEnd":200,"link":"插入排序","original":"[[插入排序]]","displayText":"插入排序"},{"lineStart":200,"lineEnd":201,"link":"在一个有序数组中，找某个数是否存在","original":"[[在一个有序数组中，找某个数是否存在]]","displayText":"在一个有序数组中，找某个数是否存在"},{"lineStart":201,"lineEnd":202,"link":"在一个有序数组中，找大于等于某个数最左侧的位置","original":"[[在一个有序数组中，找大于等于某个数最左侧的位置]]","displayText":"在一个有序数组中，找大于等于某个数最左侧的位置"},{"lineStart":202,"lineEnd":203,"link":"在一个有序数组中，找小于等于某个数最右侧的位置","original":"[[在一个有序数组中，找小于等于某个数最右侧的位置]]","displayText":"在一个有序数组中，找小于等于某个数最右侧的位置"},{"lineStart":203,"lineEnd":204,"link":"局部最小值问题","original":"[[局部最小值问题]]","displayText":"局部最小值问题"},{"lineStart":204,"lineEnd":205,"link":"如何不用额外变量交换两个数","original":"[[如何不用额外变量交换两个数]]","displayText":"如何不用额外变量交换两个数"},{"lineStart":205,"lineEnd":206,"link":"一个数组中出现了奇数次的数","original":"[[一个数组中出现了奇数次的数]]","displayText":"一个数组中出现了奇数次的数"},{"lineStart":206,"lineEnd":207,"link":"提取整形数最右侧的1","original":"[[提取整形数最右侧的1]]","displayText":"提取整形数最右侧的1"},{"lineStart":207,"lineEnd":208,"link":"一个数组中出现奇数次的两个数","original":"[[一个数组中出现奇数次的两个数]]","displayText":"一个数组中出现奇数次的两个数"}],"embeds":[],"tags":[{"line":2,"tag":"#算法复杂度"},{"line":2,"tag":"#时间复杂度"},{"line":2,"tag":"#空间复杂度"},{"line":2,"tag":"#对数器"},{"line":2,"tag":"#二分法"},{"line":2,"tag":"#异或运算"},{"line":2,"tag":"#选择排序"},{"line":2,"tag":"#冒泡排序"},{"line":2,"tag":"#插入排序"}],"headings":[{"line":0,"heading":"认识复杂度、对数器、二分法与异或运算","level":1},{"line":7,"heading":"评估算法优劣的核心指标是什么？","level":2},{"line":16,"heading":"什么是时间复杂度？时间复杂度怎么估算？","level":2},{"line":24,"heading":"何为常数时间的操作？","level":2},{"line":28,"heading":"常见的常数时间的操作","level":2},{"line":39,"heading":"如何确定算法流程的总操作数量与样本数量之间的表达式关系？","level":2},{"line":47,"heading":"如何确定算法流程的时间复杂度？","level":2},{"line":52,"heading":"通过三个具体的例子，来实践一把时间复杂度的估算","level":2},{"line":59,"heading":"注意","level":2},{"line":68,"heading":"时间复杂度的意义","level":2},{"line":80,"heading":"额外空间复杂度","level":2},{"line":94,"heading":"算法流程的常数项","level":2},{"line":105,"heading":"算法流程的常数项的比拼方式","level":2},{"line":116,"heading":"面试、比赛、刷题中，一个问题的最优解是什么意思？","level":2},{"line":122,"heading":"常见的时间复杂度(我们陆续都会见到的)","level":2},{"line":133,"heading":"算法和数据结构学习的大脉络","level":2},{"line":143,"heading":"认识对数器","level":2},{"line":158,"heading":"认识二分法","level":2},{"line":172,"heading":"认识异或运算","level":2},{"line":181,"heading":"异或运算的性质","level":3},{"line":195,"heading":"本课题目","level":2}]},"31c6ff5d7a4c2a91f5aadd6e5fa1f2736f09a8821915fd0ede13c7b243b223a0":{"links":[{"lineStart":42,"lineEnd":43,"link":"单链表和双链表如何反转","original":"[[单链表和双链表如何反转]]","displayText":"单链表和双链表如何反转"},{"lineStart":44,"lineEnd":45,"link":"把链表中的给定值都删除","original":"[[把链表中的给定值都删除]]","displayText":"把链表中的给定值都删除"},{"lineStart":57,"lineEnd":58,"link":"双向链表实现栈和队列","original":"[[双向链表实现栈和队列]]","displayText":"双向链表实现栈和队列"},{"lineStart":59,"lineEnd":60,"link":"数组实现栈和队列","original":"[[数组实现栈和队列]]","displayText":"数组实现栈和队列"},{"lineStart":76,"lineEnd":77,"link":"数组实现栈和队列","original":"[[数组实现栈和队列]]","displayText":"数组实现栈和队列"},{"lineStart":78,"lineEnd":79,"link":"实现最小栈","original":"[[实现最小栈]]","displayText":"实现最小栈"},{"lineStart":80,"lineEnd":81,"link":"如何用栈结构实现队列结构","original":"[[如何用栈结构实现队列结构]]","displayText":"如何用栈结构实现队列结构"},{"lineStart":82,"lineEnd":83,"link":"如何用队列结构实现栈结构","original":"[[如何用队列结构实现栈结构]]","displayText":"如何用队列结构实现栈结构"},{"lineStart":92,"lineEnd":93,"link":"用递归方法求数组中的最大值","original":"[[用递归方法求数组中的最大值]]","displayText":"用递归方法求数组中的最大值"},{"lineStart":103,"lineEnd":104,"link":"Master公式","original":"[[Master公式]]","displayText":"Master公式"},{"lineStart":163,"lineEnd":164,"link":"单链表和双链表如何反转","original":"[[单链表和双链表如何反转]]","displayText":"单链表和双链表如何反转"},{"lineStart":164,"lineEnd":165,"link":"把链表中的给定值都删除","original":"[[把链表中的给定值都删除]]","displayText":"把链表中的给定值都删除"},{"lineStart":165,"lineEnd":166,"link":"双向链表实现栈和队列","original":"[[双向链表实现栈和队列]]","displayText":"双向链表实现栈和队列"},{"lineStart":166,"lineEnd":167,"link":"数组实现栈和队列","original":"[[数组实现栈和队列]]","displayText":"数组实现栈和队列"},{"lineStart":167,"lineEnd":168,"link":"实现最小栈","original":"[[实现最小栈]]","displayText":"实现最小栈"},{"lineStart":168,"lineEnd":169,"link":"如何用栈结构实现队列结构","original":"[[如何用栈结构实现队列结构]]","displayText":"如何用栈结构实现队列结构"},{"lineStart":169,"lineEnd":170,"link":"如何用队列结构实现栈结构","original":"[[如何用队列结构实现栈结构]]","displayText":"如何用队列结构实现栈结构"},{"lineStart":170,"lineEnd":171,"link":"用递归方法求数组中的最大值","original":"[[用递归方法求数组中的最大值]]","displayText":"用递归方法求数组中的最大值"}],"embeds":[],"tags":[{"line":2,"tag":"#链表"},{"line":2,"tag":"#栈"},{"line":2,"tag":"#队列"},{"line":2,"tag":"#递归"},{"line":2,"tag":"#哈希表"},{"line":2,"tag":"#有序表"}],"headings":[{"line":0,"heading":"链表结构、栈、队列、递归行为、哈希表和有序表","level":1},{"line":6,"heading":"单向链表","level":2},{"line":20,"heading":"双向链表","level":2},{"line":38,"heading":"单向链表和双向链表最简单的练习","level":2},{"line":48,"heading":"栈和队列","level":2},{"line":49,"heading":"逻辑概念","level":3},{"line":55,"heading":"栈和队列的实际实现","level":3},{"line":61,"heading":"既然语言都有这些结构和api，为什么还需要手撸练习？","level":3},{"line":69,"heading":"栈和队列的常见面试题","level":3},{"line":86,"heading":"递归？这东西是什么啊？","level":2},{"line":94,"heading":"递归的脑图和实际实现","level":2},{"line":103,"heading":"[[Master公式]]","level":2},{"line":112,"heading":"哈希表","level":2},{"line":121,"heading":"有序表","level":2},{"line":152,"heading":"哈希表和有序表的原理","level":2},{"line":161,"heading":"本课题目","level":2}]},"e615822987de10db09735acd1e88bdea37c3c7d604c9b35d0ba508718b36a834":{"links":[{"lineStart":8,"lineEnd":13,"link":"归并排序","original":"[[归并排序]]","displayText":"归并排序"},{"lineStart":25,"lineEnd":26,"link":"求数组小和","original":"[[求数组小和]]","displayText":"求数组小和"},{"lineStart":35,"lineEnd":36,"link":"荷兰国旗问题 1","original":"[[荷兰国旗问题 1]]","displayText":"荷兰国旗问题 1"},{"lineStart":98,"lineEnd":99,"link":"求数组小和","original":"[[求数组小和]]","displayText":"求数组小和"},{"lineStart":99,"lineEnd":100,"link":"荷兰国旗问题 1","original":"[[荷兰国旗问题 1]]","displayText":"荷兰国旗问题 1"},{"lineStart":100,"lineEnd":101,"link":"快速排序","original":"[[快速排序]]","displayText":"快速排序"}],"embeds":[],"tags":[{"line":2,"tag":"#归并排序"},{"line":2,"tag":"#快速排序"}],"headings":[{"line":0,"heading":"归并排序与随机快排","level":1},{"line":6,"heading":"归并排序","level":2},{"line":14,"heading":"归并排序复杂度","level":3},{"line":23,"heading":"用常见面试题再深入理解一下归并排序的精髓","level":3},{"line":27,"heading":"快速排序","level":2},{"line":37,"heading":"快速排序1.0","level":3},{"line":51,"heading":"快速排序2.0","level":3},{"line":66,"heading":"快速排序1.0和2.0的时间复杂度分析","level":3},{"line":72,"heading":"快速排序3.0(随机快排+荷兰国旗技巧优化)","level":3},{"line":87,"heading":"随机快排的时间复杂度分析","level":4},{"line":97,"heading":"本课题目","level":2}]},"eb29a807a9337eba71cded98d20311948fc0b789599db6cc829585653ceb7a3e":{"links":[{"lineStart":41,"lineEnd":42,"link":"手写堆结构","original":"[[手写堆结构]]","displayText":"手写堆结构"},{"lineStart":44,"lineEnd":45,"link":"堆排序","original":"[[堆排序]]","displayText":"堆排序"},{"lineStart":48,"lineEnd":49,"link":"相对几乎有序数组排序","original":"[[相对几乎有序数组排序]]","displayText":"相对几乎有序数组排序"},{"lineStart":54,"lineEnd":55,"link":"堆排序","original":"[[堆排序]]","displayText":"堆排序"},{"lineStart":55,"lineEnd":56,"link":"相对几乎有序数组排序","original":"[[相对几乎有序数组排序]]","displayText":"相对几乎有序数组排序"}],"embeds":[],"tags":[{"line":2,"tag":"#比较器"},{"line":2,"tag":"#堆"},{"line":2,"tag":"#堆排序"}],"headings":[{"line":0,"heading":"比较器与堆","level":1},{"line":7,"heading":"比较器","level":2},{"line":17,"heading":"任何比较器的统一约定","level":3},{"line":28,"heading":"堆结构","level":2},{"line":36,"heading":"语言提供的堆结构 vs 手写的堆结构","level":3},{"line":43,"heading":"堆排序","level":3},{"line":46,"heading":"与堆有关的题目","level":3},{"line":52,"heading":"本课题目","level":2}]},"e40b7e34c12f981a8dab88e025cf207c0219ed826d44531f9c4fb1f3f251dfaa":{"links":[{"lineStart":28,"lineEnd":29,"link":"固定数组实现前缀树","original":"[[固定数组实现前缀树]]","displayText":"固定数组实现前缀树"},{"lineStart":30,"lineEnd":31,"link":"哈希表实现前缀树","original":"[[哈希表实现前缀树]]","displayText":"哈希表实现前缀树"},{"lineStart":45,"lineEnd":46,"link":"计数排序","original":"[[计数排序]]","displayText":"计数排序"},{"lineStart":46,"lineEnd":47,"link":"基数排序","original":"[[基数排序]]","displayText":"基数排序"},{"lineStart":91,"lineEnd":92,"link":"在整型数组中把奇数放在左边偶数放在右边且保持稳定性","original":"[[在整型数组中把奇数放在左边偶数放在右边且保持稳定性]]","displayText":"在整型数组中把奇数放在左边偶数放在右边且保持稳定性"},{"lineStart":104,"lineEnd":105,"link":"固定数组实现前缀树","original":"[[固定数组实现前缀树]]","displayText":"固定数组实现前缀树"},{"lineStart":105,"lineEnd":106,"link":"哈希表实现前缀树","original":"[[哈希表实现前缀树]]","displayText":"哈希表实现前缀树"},{"lineStart":106,"lineEnd":107,"link":"计数排序","original":"[[计数排序]]","displayText":"计数排序"},{"lineStart":107,"lineEnd":108,"link":"基数排序","original":"[[基数排序]]","displayText":"基数排序"},{"lineStart":108,"lineEnd":109,"link":"在整型数组中把奇数放在左边偶数放在右边且保持稳定性","original":"[[在整型数组中把奇数放在左边偶数放在右边且保持稳定性]]","displayText":"在整型数组中把奇数放在左边偶数放在右边且保持稳定性"}],"embeds":[],"tags":[{"line":2,"tag":"#前缀树"},{"line":2,"tag":"#桶排序"},{"line":2,"tag":"#计数排序"},{"line":2,"tag":"#基数排序"}],"headings":[{"line":0,"heading":"trie、桶排序、排序总结","level":1},{"line":7,"heading":"前缀树","level":2},{"line":16,"heading":"例子","level":3},{"line":26,"heading":"前缀树路的实现方式","level":3},{"line":35,"heading":"不基于比较的排序","level":2},{"line":44,"heading":"计数排序和基数排序","level":3},{"line":54,"heading":"排序算法的稳定性","level":2},{"line":63,"heading":"排序算法总结","level":2},{"line":83,"heading":"常见的坑","level":2},{"line":94,"heading":"工程上对排序的改进","level":2},{"line":102,"heading":"本课题目","level":2}]},"229e3caae4ce9e9b9e785f610af924b669ba0b4347c635f28914afb4e3bc112a":{"links":[{"lineStart":103,"lineEnd":104,"link":"判断链表是否为回文结构","original":"[[判断链表是否为回文结构]]","displayText":"判断链表是否为回文结构"},{"lineStart":104,"lineEnd":105,"link":"完成带rand指针链表的复制","original":"[[完成带rand指针链表的复制]]","displayText":"完成带rand指针链表的复制"},{"lineStart":105,"lineEnd":106,"link":"两个可能有环的单链表相交的第一个节点","original":"[[两个可能有环的单链表相交的第一个节点]]","displayText":"两个可能有环的单链表相交的第一个节点"},{"lineStart":106,"lineEnd":107,"link":"不给单链表的头节点删除指定节点","original":"[[不给单链表的头节点删除指定节点]]","displayText":"不给单链表的头节点删除指定节点"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"链表相关面试题","level":1},{"line":2,"heading":"链表问题","level":2},{"line":10,"heading":"链表面试题常用数据结构和技巧","level":2},{"line":17,"heading":"快慢指针","level":3},{"line":101,"heading":"常见链表面试题","level":2}]},"103d1ee5a80c624e717f847a767b875f5a2504d901b21e724d8d3b8a60eae45e":{"links":[{"lineStart":42,"lineEnd":48,"link":"实现二叉树的按层遍历","original":"[[实现二叉树的按层遍历]]","displayText":"实现二叉树的按层遍历"},{"lineStart":42,"lineEnd":48,"link":"二叉树的序列化和反序列化","original":"[[二叉树的序列化和反序列化]]","displayText":"二叉树的序列化和反序列化"},{"lineStart":42,"lineEnd":48,"link":"如何设计一个打印整棵树的打印函数","original":"[[如何设计一个打印整棵树的打印函数]]","displayText":"如何设计一个打印整棵树的打印函数"},{"lineStart":42,"lineEnd":48,"link":"求二叉树最宽的层有多少个节点","original":"[[求二叉树最宽的层有多少个节点]]","displayText":"求二叉树最宽的层有多少个节点"},{"lineStart":42,"lineEnd":48,"link":"二叉树中指定节点的后继节点","original":"[[二叉树中指定节点的后继节点 ]]","displayText":"二叉树中指定节点的后继节点"},{"lineStart":42,"lineEnd":48,"link":"从上到下打印所有折痕的方向","original":"[[从上到下打印所有折痕的方向]]","displayText":"从上到下打印所有折痕的方向"}],"embeds":[],"tags":[{"line":2,"tag":"#bst"},{"line":2,"tag":"#二叉树"}],"headings":[{"line":0,"heading":"二叉树的基本算法","level":1},{"line":7,"heading":"二叉树","level":2},{"line":19,"heading":"二叉树的先序、中序、后序遍历","level":3},{"line":27,"heading":"递归方式实现二叉树的先序、中序、后序遍历","level":3},{"line":34,"heading":"非递归方式实现二叉树的先序、中序、后序遍历","level":3},{"line":40,"heading":"本课题目","level":2}]},"c70578f51a3b2696a64ff17a08b6470318064763ff750a661efb1177f7a26ee5":{"links":[{"lineStart":9,"lineEnd":10,"link":"树型dp","original":"[[树型dp]]","displayText":"树型dp"},{"lineStart":24,"lineEnd":25,"link":"判断二叉树是不是平衡二叉树","original":"[[判断二叉树是不是平衡二叉树]]","displayText":"判断二叉树是不是平衡二叉树"},{"lineStart":25,"lineEnd":26,"link":"判断二叉树是不是满二叉树","original":"[[判断二叉树是不是满二叉树]]","displayText":"判断二叉树是不是满二叉树"},{"lineStart":26,"lineEnd":27,"link":"判断二叉树是不是搜索二叉树","original":"[[判断二叉树是不是搜索二叉树]]","displayText":"判断二叉树是不是搜索二叉树"},{"lineStart":27,"lineEnd":28,"link":"二叉树中最大的二叉搜索子树的大小","original":"[[二叉树中最大的二叉搜索子树的大小]]","displayText":"二叉树中最大的二叉搜索子树的大小"},{"lineStart":28,"lineEnd":29,"link":"二叉树中最大的二叉搜索子树的头节点","original":"[[二叉树中最大的二叉搜索子树的头节点]]","displayText":"二叉树中最大的二叉搜索子树的头节点"},{"lineStart":29,"lineEnd":30,"link":"判断二叉树中是不是完全二叉树","original":"[[判断二叉树中是不是完全二叉树]]","displayText":"判断二叉树中是不是完全二叉树"},{"lineStart":30,"lineEnd":31,"link":"二叉树上两个节点的最低公共祖先","original":"[[二叉树上两个节点的最低公共祖先]]","displayText":"二叉树上两个节点的最低公共祖先"},{"lineStart":31,"lineEnd":32,"link":"求二叉树两个节点的最大距离","original":"[[求二叉树两个节点的最大距离]]","displayText":"求二叉树两个节点的最大距离"},{"lineStart":32,"lineEnd":33,"link":"派对的最大快乐值","original":"[[派对的最大快乐值]]","displayText":"派对的最大快乐值"}],"embeds":[],"tags":[{"line":2,"tag":"#bst"},{"line":2,"tag":"#二叉树"},{"line":2,"tag":"#树型dp"},{"line":2,"tag":"#动态规划"},{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树的递归套路","level":1},{"line":7,"heading":"二叉树的递归套路","level":2},{"line":22,"heading":"二叉树的递归套路深度实践","level":3}]},"cee7e0994355086ecf8806cabcba9e873b8011258ac28c299c4bdaba62055c3d":{"links":[{"lineStart":20,"lineEnd":21,"link":"字符串组成的数组拼接后字典序最小的结果","original":"[[字符串组成的数组拼接后字典序最小的结果]]","displayText":"字符串组成的数组拼接后字典序最小的结果"},{"lineStart":46,"lineEnd":50,"link":"点亮str中所有需要点亮的位置至少需要几盏灯","original":"[[点亮str中所有需要点亮的位置至少需要几盏灯]]","displayText":"点亮str中所有需要点亮的位置至少需要几盏灯"},{"lineStart":46,"lineEnd":50,"link":"金条分割的最小代价","original":"[[金条分割的最小代价]]","displayText":"金条分割的最小代价"},{"lineStart":46,"lineEnd":50,"link":"会议室能容纳的最多宣讲场次","original":"[[会议室能容纳的最多宣讲场次]]","displayText":"会议室能容纳的最多宣讲场次"},{"lineStart":46,"lineEnd":50,"link":"做项目获得的最大钱数","original":"[[做项目获得的最大钱数]]","displayText":"做项目获得的最大钱数"},{"lineStart":54,"lineEnd":55,"link":"字符串组成的数组拼接后字典序最小的结果","original":"[[字符串组成的数组拼接后字典序最小的结果]]","displayText":"字符串组成的数组拼接后字典序最小的结果"},{"lineStart":55,"lineEnd":56,"link":"点亮str中所有需要点亮的位置至少需要几盏灯","original":"[[点亮str中所有需要点亮的位置至少需要几盏灯]]","displayText":"点亮str中所有需要点亮的位置至少需要几盏灯"},{"lineStart":56,"lineEnd":57,"link":"金条分割的最小代价","original":"[[金条分割的最小代价]]","displayText":"金条分割的最小代价"},{"lineStart":57,"lineEnd":58,"link":"会议室能容纳的最多宣讲场次","original":"[[会议室能容纳的最多宣讲场次]]","displayText":"会议室能容纳的最多宣讲场次"},{"lineStart":58,"lineEnd":59,"link":"做项目获得的最大钱数","original":"[[做项目获得的最大钱数]]","displayText":"做项目获得的最大钱数"}],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"贪心算法","level":1},{"line":8,"heading":"贪心算法","level":2},{"line":18,"heading":"从头到尾讲一道利用贪心算法求解的题目","level":3},{"line":23,"heading":"贪心算法求解的标准过程","level":3},{"line":33,"heading":"贪心算法的解题套路","level":3},{"line":44,"heading":"贪心算法的解题套路实战","level":3},{"line":53,"heading":"本课题目","level":2}]},"0df694a0113b317812f8ed1e968a6a7854b8137dc7624e5ce71ca05f701beff0":{"links":[{"lineStart":18,"lineEnd":23,"link":"并查集","original":"[[并查集]]","displayText":"并查集"},{"lineStart":67,"lineEnd":68,"link":"宽度优先遍历","original":"[[宽度优先遍历]]","displayText":"宽度优先遍历"},{"lineStart":73,"lineEnd":74,"link":"深度优先遍历","original":"[[深度优先遍历]]","displayText":"深度优先遍历"},{"lineStart":79,"lineEnd":80,"link":"图的拓扑排序算法","original":"[[图的拓扑排序算法]]","displayText":"图的拓扑排序算法"},{"lineStart":87,"lineEnd":88,"link":"最小生成树算法之Kruskal","original":"[[最小生成树算法之Kruskal]]","displayText":"最小生成树算法之Kruskal"},{"lineStart":95,"lineEnd":96,"link":"最小生成树算法之Prim","original":"[[最小生成树算法之Prim]]","displayText":"最小生成树算法之Prim"},{"lineStart":103,"lineEnd":104,"link":"Dijkstra算法","original":"[[Dijkstra算法]]","displayText":"Dijkstra算法"},{"lineStart":112,"lineEnd":113,"link":"并查集","original":"[[并查集]]","displayText":"并查集"},{"lineStart":113,"lineEnd":114,"link":"图的拓扑排序算法","original":"[[图的拓扑排序算法]]","displayText":"图的拓扑排序算法"},{"lineStart":114,"lineEnd":115,"link":"最小生成树算法之Kruskal","original":"[[最小生成树算法之Kruskal]]","displayText":"最小生成树算法之Kruskal"},{"lineStart":115,"lineEnd":116,"link":"最小生成树算法之Prim","original":"[[最小生成树算法之Prim]]","displayText":"最小生成树算法之Prim"},{"lineStart":116,"lineEnd":117,"link":"Dijkstra算法","original":"[[Dijkstra算法]]","displayText":"Dijkstra算法"}],"embeds":[],"tags":[{"line":2,"tag":"#并查集"},{"line":2,"tag":"#图"},{"line":2,"tag":"#BFS"},{"line":2,"tag":"#DFS"},{"line":2,"tag":"#最小生成树算法"},{"line":2,"tag":"#Kruskal"},{"line":2,"tag":"#Prim"},{"line":2,"tag":"#Dijkstra算法"},{"line":2,"tag":"#拓扑排序"}],"headings":[{"line":0,"heading":"并查集结构和图相关的算法","level":1},{"line":8,"heading":"并查集","level":2},{"line":26,"heading":"并查集的优化","level":3},{"line":34,"heading":"并查集的应用","level":3},{"line":41,"heading":"图","level":2},{"line":49,"heading":"图结构的表达","level":3},{"line":55,"heading":"图的面试题如何搞定","level":3},{"line":65,"heading":"图的宽度优先&深度优先遍历","level":3},{"line":67,"heading":"[[宽度优先遍历]]","level":4},{"line":73,"heading":"[[深度优先遍历]]","level":4},{"line":79,"heading":"[[图的拓扑排序算法]]","level":3},{"line":87,"heading":"[[最小生成树算法之Kruskal]]","level":3},{"line":95,"heading":"[[最小生成树算法之Prim]]","level":3},{"line":103,"heading":"[[Dijkstra算法]]","level":3},{"line":111,"heading":"本课题目","level":2}]},"c3edffd40fd54153cf4fb66cc4520f4f448bfacc24fa59839b5ce4b0adbe7313":{"links":[{"lineStart":11,"lineEnd":12,"link":"数组中离给定K值最近的子数组累加和","original":"[[数组中离给定K值最近的子数组累加和]]","displayText":"数组中离给定K值最近的子数组累加和"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"子数组问题求解","level":1}]},"7b007b0af7403dc4c9b8e9e57d527037c47203dec9840ba3c24407086a861545":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"排序算法的传递性","level":1},{"line":67,"heading":"任何一个在前的跟一个在后的交换不会得到更大的字典序","level":2}]},"2514285d5048051769e541d83804a110a402116f148da9850a15d9a02d84e718":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#约瑟夫环"}],"headings":[{"line":0,"heading":"剃刀函数与坐标系移动","level":1},{"line":5,"heading":"剃刀函数","level":2},{"line":9,"heading":"坐标系移动原则","level":2}]},"5154d5cf3ac988f2eb0fc160c0db7a18915ce25259456ec1b9a57938275421b7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":3,"heading":"二项式的展开式","level":3},{"line":20,"heading":"**排列**","level":3},{"line":30,"heading":"**组合**","level":3},{"line":38,"heading":"排列与组合的区别","level":3}]},"8b5069c37da5464b43fae680ca78f89e32c9b36bb5c2b08fa236d3f72c020ac6":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"牛顿迭代法开根号","level":1}]},"35eee46af24beb6dab25be392e377a7320817290633b5f8a384cc2b26bc41f46":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"程序中的随机函数","level":1}]},"3c82a842101c4ae98b0282d8cda3d3eab7544c5f6873cac34142a3163ec24405":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#约瑟夫环"}],"headings":[{"line":0,"heading":"约瑟夫环","level":1}]},"48da6fab7041bced91ef4f2913a6143426a111020f1aa5289b9885b390f7b87a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"整数组成的无序数组中子数组的累加和小于等于K的最大长度非最优普遍解法","level":1}]},"4b8e92902b14577c2619e7c4808df39147631ae1a8e7d0a21d2605e184cf21de":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#并查集"}],"headings":[{"line":0,"heading":"真实的用户数量","level":1}]},"cc2eab140837cb545a34fdf455972e5f96bc3438efcdab614f408b26cd7161df":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#AC自动机"}],"headings":[{"line":0,"heading":"AC自动机","level":1},{"line":8,"heading":"AC自动机算法核心","level":2}]},"4d891f4a800e924e147686a7f521341a3b254d1df9203623d510b40c66f1db9a":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#有序表"},{"line":2,"tag":"#AVL"}],"headings":[{"line":0,"heading":"AVL树","level":1}]},"45c15c5ae4c286c9e56aa52fada33644496a4eeb6c3ee44e8a8fe786aed72db6":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#有序表"},{"line":2,"tag":"#AVL"},{"line":2,"tag":"#红黑树"},{"line":2,"tag":"#SB树"}],"headings":[{"line":0,"heading":"AVL树、SB树、红黑树的共性与不同","level":1},{"line":4,"heading":"AVL树、SB树、红黑树的共性","level":2},{"line":19,"heading":"AVL树、SB树、红黑树的不同","level":2}]},"4dc0e75a8463782dd8a823341d22c4ca5b4e370aabcdf97aaf6d1f42ae4a8f5d":{"links":[{"lineStart":14,"lineEnd":15,"link":"bfprt代码","original":"[[bfprt代码]]","displayText":"bfprt代码"}],"embeds":[],"tags":[{"line":2,"tag":"#bfprt"}],"headings":[{"line":0,"heading":"bfprt算法","level":1}]},"1ebd1ffba336d945c0663ae36012e2256156ddbf6472b9f3dc013cbf10ad127a":{"links":[{"lineStart":12,"lineEnd":13,"link":"Dijkstra算法代码","original":"[[Dijkstra算法代码]]","displayText":"Dijkstra算法代码"}],"embeds":[],"tags":[{"line":2,"tag":"#图"},{"line":2,"tag":"#Dijkstra算法"}],"headings":[{"line":0,"heading":"Dijstra算法","level":1}]},"2f1420fad2d6534ebbd58405ea5d955320cbec7a59322654406850a8f196b839":{"links":[{"lineStart":6,"lineEnd":7,"link":"字符串str中是否有某个子串是等于字符串match","original":"[[字符串str中是否有某个子串是等于字符串match]]","displayText":"字符串str中是否有某个子串是等于字符串match"},{"lineStart":14,"lineEnd":15,"link":"KMP代码","original":"[[KMP代码]]","displayText":"KMP代码"}],"embeds":[],"tags":[{"line":2,"tag":"#KMP算法"}],"headings":[{"line":0,"heading":"KMP算法","level":1},{"line":9,"heading":"KMP算法核心","level":2}]},"9f3966c51bb55cdcbc82e3769ed3aea0d17217aefb272e5bbc6b3e1bae419ad2":{"links":[{"lineStart":6,"lineEnd":7,"link":"最长回文子串的长度","original":"[[最长回文子串的长度]]","displayText":"最长回文子串的长度"},{"lineStart":7,"lineEnd":8,"link":"字符串变为回文需要添加的最少字符","original":"[[字符串变为回文需要添加的最少字符]]","displayText":"字符串变为回文需要添加的最少字符"},{"lineStart":15,"lineEnd":16,"link":"Manacher算法代码","original":"[[Manacher算法代码]]","displayText":"Manacher算法代码"}],"embeds":[],"tags":[{"line":2,"tag":"#Manacher算法"}],"headings":[{"line":0,"heading":"Manacher算法","level":1},{"line":9,"heading":"Manacher算法核心","level":2}]},"e78ea2e9f7950b7f2e796086fb38839f7a9b6101fb59c9b49467dd73c88c6ee1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Master公式","level":1}]},"f2bb2d645c7f6c8ad3dc8eb7633de3c54bbcaef65fe34f1da6512be55ca83635":{"links":[{"lineStart":18,"lineEnd":19,"link":"Morris遍历代码","original":"[[Morris遍历代码]]","displayText":"Morris遍历代码"},{"lineStart":28,"lineEnd":29,"link":"二叉树的最小深度","original":"[[二叉树的最小深度]]","displayText":"二叉树的最小深度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Morris遍历","level":1},{"line":9,"heading":"Morris遍历细节","level":2},{"line":20,"heading":"Morris遍历实质","level":2}]},"342b3533850fc21880546eb07d43f2f9dd24917a2aa096c3ab139c10770100b8":{"links":[{"lineStart":15,"lineEnd":16,"link":"SB树代码","original":"[[SB树代码]]","displayText":"SB树代码"}],"embeds":[],"tags":[{"line":2,"tag":"#SB树"}],"headings":[{"line":0,"heading":"SB树（size-balance-tree）","level":1},{"line":17,"heading":"SB树在使用时候的改进","level":2}]},"b7064c4f74d6e3ab9d9d349529f0b58491827e05044d13588bfd64048f9580a1":{"links":[{"lineStart":7,"lineEnd":8,"link":"哈希表实现前缀树","original":"[[哈希表实现前缀树]]","displayText":"哈希表实现前缀树"}],"embeds":[],"tags":[{"line":2,"tag":"#前缀树"},{"line":2,"tag":"#Trie"}],"headings":[{"line":0,"heading":"Trie数 or 前缀树 or 字典树","level":1}]},"4278f45ea0b8da461e4b877ff95eec53fcb4837a9122b1ea4cf279c702d96d02":{"links":[{"lineStart":4,"lineEnd":5,"link":"图的统一表述结构","original":"[[图的统一表述结构]]","displayText":"图的统一表述结构"},{"lineStart":5,"lineEnd":6,"link":"深度优先遍历","original":"[[深度优先遍历]]","displayText":"深度优先遍历"},{"lineStart":6,"lineEnd":7,"link":"宽度优先遍历","original":"[[宽度优先遍历]]","displayText":"宽度优先遍历"},{"lineStart":7,"lineEnd":8,"link":"图的拓扑排序算法","original":"[[图的拓扑排序算法]]","displayText":"图的拓扑排序算法"},{"lineStart":8,"lineEnd":9,"link":"最小生成树算法之Kruskal","original":"[[最小生成树算法之Kruskal]]","displayText":"最小生成树算法之Kruskal"},{"lineStart":9,"lineEnd":10,"link":"最小生成树算法之Prim","original":"[[最小生成树算法之Prim]]","displayText":"最小生成树算法之Prim"},{"lineStart":10,"lineEnd":11,"link":"Dijkstra算法","original":"[[Dijkstra算法]]","displayText":"Dijkstra算法"},{"lineStart":11,"lineEnd":12,"link":"TSP问题","original":"[[TSP问题]]","displayText":"TSP问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"图论知识点","level":1}]},"b34eb7ce7ae681c537b8a4f9c2bba3dee457d5c8cc89520a1a5b274cd152b093":{"links":[{"lineStart":5,"lineEnd":6,"link":"KMP算法","original":"[[KMP算法]]","displayText":"KMP算法"},{"lineStart":6,"lineEnd":7,"link":"Manacher算法","original":"[[Manacher算法]]","displayText":"Manacher算法"},{"lineStart":7,"lineEnd":8,"link":"Trie数 or 前缀树 or 字典树","original":"[[Trie数 or 前缀树 or 字典树]]","displayText":"Trie数 or 前缀树 or 字典树"},{"lineStart":8,"lineEnd":9,"link":"AC自动机","original":"[[AC自动机]]","displayText":"AC自动机"},{"lineStart":9,"lineEnd":10,"link":"后缀数组","original":"[[后缀数组]]","displayText":"后缀数组"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字符串知识点","level":1}]},"3ace72aa42ac2ed82539f480cc39c6026d6e3bfc0e7f0ffac3cb6883d1a128ad":{"links":[{"lineStart":25,"lineEnd":29,"link":"从左往右的尝试模型","original":"[[从左往右的尝试模型]]","displayText":"从左往右的尝试模型"},{"lineStart":25,"lineEnd":29,"link":"范围上的尝试模型","original":"[[范围上的尝试模型]]","displayText":"范围上的尝试模型"},{"lineStart":25,"lineEnd":29,"link":"多样本位置全对应的尝试模型","original":"[[多样本位置全对应的尝试模型]]","displayText":"多样本位置全对应的尝试模型"},{"lineStart":25,"lineEnd":29,"link":"寻找业务限制的尝试模型","original":"[[寻找业务限制的尝试模型]]","displayText":"寻找业务限制的尝试模型"}],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"暴力递归到动态规划","level":1},{"line":6,"heading":"面试中设计暴力递归过程的原则","level":2},{"line":16,"heading":"知道了面试中设计暴力递归过程的原则，然后呢？","level":2},{"line":23,"heading":"常见的4种尝试模型","level":2},{"line":30,"heading":"暴力递归到动态规划的套路","level":2}]},"7428d445b55bde898935d9a3a46e1961557c17eed621f2d2117e3f1030270320":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#哈希函数"},{"line":2,"tag":"#一致性哈希"}],"headings":[{"line":0,"heading":"一致性哈希","level":1}]},"53ecba177ab977407e2135aeb7ebd5b9db0411ec3000be5c87574bb7fafc43d9":{"links":[],"embeds":[],"tags":[],"headings":[]},"df792140b16329d98d28dc02f0789941fb9904bf91726403d69950e01152dac1":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#卡特兰数"}],"headings":[{"line":0,"heading":"卡特兰数","level":1},{"line":16,"heading":"卡特兰数的算法原型在做题时怎么发现？","level":2}]},"db4f9b03a34df700fa353f6854e03fbe8a09cf85bd6b165f065f26c415252346":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#后缀数组"}],"headings":[{"line":0,"heading":"后缀数组","level":1}]},"a3a6b7819ef89316d2ce4f12eb5ab54d02217e1f44f428e3cbec8547404c3f62":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"外排序","level":1},{"line":10,"heading":"基本思想","level":2},{"line":17,"heading":"问题实例","level":3}]},"aa1b018dd95eecb7ab5f64cb3e1cdcf267275c384290d01f7ab490b6fe06ebd6":{"links":[{"lineStart":18,"lineEnd":20,"link":"排序算法的传递性","original":"[[排序算法的传递性]]","displayText":"排序算法的传递性"},{"lineStart":21,"lineEnd":23,"link":"字符串组成的数组拼接后字典序最小的结果","original":"[[字符串组成的数组拼接后字典序最小的结果]]","displayText":"字符串组成的数组拼接后字典序最小的结果"},{"lineStart":23,"lineEnd":24,"link":"全是小写字母的字符串str，删除多余字符后达到字典序最小","original":"[[全是小写字母的字符串str，删除多余字符后达到字典序最小]]","displayText":"全是小写字母的字符串str，删除多余字符后达到字典序最小"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字典序","level":1}]},"02ca90e67e83a9cfde8b9320dbbe14931ffd4a5292fa4ca7377d5c250d6e613c":{"links":[{"lineStart":12,"lineEnd":13,"link":"完美洗牌算法代码","original":"[[完美洗牌算法代码]]","displayText":"完美洗牌算法代码"}],"embeds":[],"tags":[{"line":2,"tag":"#完美洗牌算法"}],"headings":[{"line":0,"heading":"完美洗牌算法","level":1}]},"66e9d207113204af5429ea98ae9ba187dfcc4fa9f6ab48fada12ccdf6a79fb4c":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#BFS"}],"headings":[{"line":0,"heading":"宽度优先遍历","level":1}]},"807ae0026b76d13126fa05359e90a06e6b44a67dae9f96afa9d8cbbb32fbb5bf":{"links":[{"lineStart":12,"lineEnd":13,"link":"并查集代码","original":"[[并查集代码]]","displayText":"并查集代码"},{"lineStart":16,"lineEnd":17,"link":"真实的用户数量","original":"[[真实的用户数量]]","displayText":"真实的用户数量"}],"embeds":[],"tags":[{"line":2,"tag":"#并查集"}],"headings":[{"line":0,"heading":"并查集","level":1},{"line":15,"heading":"练习题","level":2}]},"5aafdaea10288394fc2d85c3da42961e77b5c17f0d94e59debb483fe3c7fc8d9":{"links":[{"lineStart":8,"lineEnd":9,"link":"二维01矩阵中一共有多少个岛","original":"[[二维01矩阵中一共有多少个岛]]","displayText":"二维01矩阵中一共有多少个岛"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"并行算法（岛问题只是一种启发性的说明）","level":1},{"line":8,"heading":"[[二维01矩阵中一共有多少个岛]]","level":2}]},"3dc40a4386c48829811c01d518c5a2c840a640dd77ee8f89014ab056fac24281":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#打表法"}],"headings":[{"line":0,"heading":"打表法","level":1},{"line":12,"heading":"打表找规律","level":2}]},"0d27d1d05976f8f245063791d4b4c6232fce7a4018266288bcf7445723a93c0c":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#有序表"}],"headings":[{"line":0,"heading":"搜索二叉树","level":1},{"line":13,"heading":"搜索二叉树查询key（查询某个key存在还是不存在）","level":2},{"line":22,"heading":"搜索二叉树插入新的key","level":2},{"line":26,"heading":"搜索二叉树删除key","level":2},{"line":35,"heading":"搜索二叉树特别不讲究","level":2}]},"75424ec1cca7321512e5e795d18717bf5a109e5dc63e4e18f27299ee2b2d468e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"改写有序表的题目核心点","level":1}]},"9be6d83919cbffa1d7cecef4b8d5ff0bdc2efd766138366f043ce0b985ea9ee8":{"links":[{"lineStart":9,"lineEnd":10,"link":"1~N中所有数字包含1的个数","original":"[[1~N中所有数字包含1的个数]]","displayText":"1~N中所有数字包含1的个数"}],"embeds":[],"tags":[{"line":2,"tag":"#数位DP"}],"headings":[{"line":0,"heading":"数位DP","level":1}]},"1c4f8d44c522f3bafc82422bc2212e4daf5ba5fd11ccb0a0ab653779e41e3e4e":{"links":[{"lineStart":14,"lineEnd":15,"link":"Kruskal算法代码","original":"[[Kruskal算法代码]]","displayText":"Kruskal算法代码"}],"embeds":[],"tags":[{"line":2,"tag":"#图"},{"line":2,"tag":"#Kruskal"}],"headings":[{"line":0,"heading":"最小生成树算法之Kruskal","level":1}]},"7bf3cd4a831c192b619ac178cf72a7e965d481283cd485b285a11f9d973d10bd":{"links":[{"lineStart":16,"lineEnd":17,"link":"Prim算法代码","original":"[[Prim算法代码]]","displayText":"Prim算法代码"}],"embeds":[],"tags":[{"line":3,"tag":"#图"},{"line":3,"tag":"#Prim"}],"headings":[{"line":0,"heading":"最小生成树算法之Prim","level":1}]},"4b58103f7e40389032e8b16da8f1a41c194a9915f8fcd70975673951d56b93b9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"树型dp","level":1}]},"2cde11b9728af7b179949826961cbe8ae5b51086261dcecb98fa04aa735cdc4e":{"links":[{"lineStart":12,"lineEnd":15,"link":"字符串组成的数组拼接后字典序最小的结果","original":"[[字符串组成的数组拼接后字典序最小的结果]]","displayText":"字符串组成的数组拼接后字典序最小的结果"}],"embeds":[],"tags":[{"line":2,"tag":"#dfs"}],"headings":[{"line":0,"heading":"深度优先遍历","level":1}]},"71c17062c5f3f490351ac545ffb3dade8165e7c0dee3a03e31582fb1c9359d04":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#滑动窗口"},{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"滑动窗口、单调栈怎么用？","level":1}]},"8e288453d46d96a5bff45ce5b94b7aa335ad1ea974ff7947e88bc8b0836bb7cc":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"滑动窗口是什么？","level":1},{"line":15,"heading":"滑动窗口能做什么？","level":2},{"line":20,"heading":"滑动内最大值和最小值的更新结构","level":2}]},"e6338bd7738b25e4519572eb2da8ac9c53e7139c868af8f86f902f472dbd2be7":{"links":[{"lineStart":5,"lineEnd":6,"link":"zigzag打印矩阵","original":"[[zigzag打印矩阵]]","displayText":"zigzag打印矩阵"},{"lineStart":7,"lineEnd":8,"link":"转圈打印矩阵","original":"[[转圈打印矩阵]]","displayText":"转圈打印矩阵"},{"lineStart":9,"lineEnd":10,"link":"原地旋转正方形矩阵","original":"[[原地旋转正方形矩阵]]","displayText":"原地旋转正方形矩阵"}],"embeds":[],"tags":[{"line":1,"tag":"#矩阵处理技巧"}],"headings":[{"line":0,"heading":"矩阵处理技巧","level":1}]},"a96c5099d7e54cd61218dac4ddc1323186bf7cd915d53b5895db2aa7be08633a":{"links":[{"lineStart":24,"lineEnd":25,"link":"线段树代码","original":"[[线段树代码]]","displayText":"线段树代码"},{"lineStart":26,"lineEnd":27,"link":"线段树实例一","original":"[[线段树实例一]]","displayText":"线段树实例一"},{"lineStart":27,"lineEnd":28,"link":"方块掉落之后的最大高度","original":"[[方块掉落之后的最大高度]]","displayText":"方块掉落之后的最大高度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"线段树","level":1}]},"e444ad93f3dec89f4a30f298261085dfa9ba7466fc5763ab0824c646834c7034":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#网络流"}],"headings":[{"line":0,"heading":"网络流","level":1}]},"ec2d2f7d6e3228a32de937ccf1135ab9967bd7e5b091645c83b13efc191b02ff":{"links":[{"lineStart":8,"lineEnd":9,"link":"机器所有吐出的球都等概率放进袋子里","original":"[[机器所有吐出的球都等概率放进袋子里]]","displayText":"机器所有吐出的球都等概率放进袋子里"}],"embeds":[],"tags":[{"line":2,"tag":"#蓄水池算法"}],"headings":[{"line":0,"heading":"蓄水池算法","level":1}]},"f24ea684759cd4603232a3af8cc4f173dabb284ae09ceb1d32fe21bf6471290f":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#哈希函数"}],"headings":[{"line":0,"heading":"认识哈希函数","level":1},{"line":13,"heading":"哈希函数作用：可以把数据根据不同值，几乎均匀的分开","level":2}]},"0cbf054ae35ff7588e83980a8e9ffd1d9062436c08ef0aa6523757cb1bd633c2":{"links":[{"lineStart":7,"lineEnd":14,"link":"外排序","original":"[[外排序]]","displayText":"外排序"}],"embeds":[],"tags":[{"line":3,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"资源限制技巧汇总","level":1}]},"c7a99fdbd793b3b5331f48ca22e18877ccdfd39567fc283299366a84b0cb022f":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#跳表"},{"line":2,"tag":"#SkipList"}],"headings":[{"line":0,"heading":"跳表（skiplist）","level":1}]},"0c82edd5c20e4fd1bd9023da764504f9381e505c62bb308e6db1d868b64f1194":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"100亿个URL的大文件中找出其中所有重复的URL","level":1},{"line":10,"heading":"某搜索公司一天的用户搜索词汇是海量的, 求出每天热门Top100词汇","level":2}]},"3702e35b3dbe5457b9a7f33fdc29895fd62f86270d6dc70b603cbc373ac573c9":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#数位DP"}],"headings":[{"line":0,"heading":"1~N中所有数字包含1的个数","level":1}]},"2fbd9fa5f2188e3959eb36fd69db8c71a7b127ec9640617c4d3fcadfa55ea807":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"40亿个无符号整数找出所有出现了两次的数","level":1}]},"894f301339b1736020aa91f76eb74e0bc32e9e28cb1a8d0a759349402d62301b":{"links":[],"embeds":[],"tags":[{"line":4,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"40亿个无符号整数的中位数","level":1}]},"f0d26635e4a2ebc81088ca22096215c5ed57b836629e7b806acce1e660b526b9":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"40亿个无符号整数的文件中找到出现次数最多的数","level":1}]},"56198fffde24363568cf7b7db24752b7b646759619f252cc59a0e45bc53186b1":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"40亿个无符号整数的文件中找到所有未出现过的数","level":1}]},"8bb585a5f5f8f1d79d5ae5c93af46ee0d78de41375b54e76fd4a64795e6d1e44":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#暴力递归"},{"line":2,"tag":"#范围上尝试的模型"}],"headings":[{"line":0,"heading":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数","level":1}]},"6aa295b04a56365537e23d00003fcd16525f49e79df1242e5bcc18ce0c36534a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Nim博弈问题","level":1}]},"a28b7606307848a9b0ec54293743365d5058ff8f0f4c985138c501e313b6553b":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#暴力递归"},{"line":2,"tag":"#范围上尝试的模型"}],"headings":[{"line":0,"heading":"N皇后问题","level":1}]},"799351dec8bf1951d94ac44fc2b165615185a856b35935fa4f6eac29e25c2aa7":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#矩阵处理技巧"}],"headings":[{"line":0,"heading":"zigzag打印矩阵","level":1}]},"929643f1612c4094b5e3b2dd58ceff47cf210e0617508bd15a53d7528e4fcfe6":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"“马”从(0,0)位置出发，必须走k步最后落在(x,y)上的方法数有多少种","level":1}]},"6cb445229973ce6f29aaea0a46de368b45337c35f661519260a492d76fd3a5d5":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一个人迈上N级台阶的方法数","level":1}]},"b510f255cc0b0b6e9dd145e6b5b97d8a5bc2a9098679915bd984453817acbdf3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一个括号字符串中，最长的括号有效子串的长度","level":1}]},"79c09fa0086c5c60a8a09ab4fb02f668b7ddae205e8d9132f8b28dd4a6b27397":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#异或运算"}],"headings":[{"line":0,"heading":"一个数组中出现了奇数次的数","level":1}]},"6d72b41fca95407785059563c0c102f73fb771a2a5deedafdf51d1a3c450f0d5":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#异或运算"}],"headings":[{"line":0,"heading":"一个数组中出现奇数次的两个数","level":1}]},"a027162b8f39b4e19de2caabeef45d0df1968f5d4e28fa9c825a3985ab2d8fc1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一条直线最多能穿过多少个点","level":1}]},"669304025f4b2339af7c935bc2b49cfc03a817eb3429da5fb8514278f1d04515":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一种消息接收并打印的结构设计","level":1}]},"7eedc47faecb64197f9510d5ebe0c1ed03055653ea381aedf4495d9a56cbf96f":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"},{"line":2,"tag":"#坑题"}],"headings":[{"line":0,"heading":"不给单链表的头节点删除指定节点","level":1}]},"bc1c6e536490828a5c57f61d4c7dfd63c19ac29dfb5712a894d7b7484ba90098":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"丢棋子问题","level":1}]},"10a7113bfaf593bf4398213753229602bbb87218aad7b594cac691f800d8273c":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"},{"line":2,"tag":"#快慢指针"}],"headings":[{"line":0,"heading":"两个可能有环的单链表相交的第一个节点","level":1}]},"c09c73d613b15fa6aa5c940935edf055973e76bb9e8a33514578092eaadf0c8a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两个字符串的最短的变换路径","level":1}]},"072501f7cef323a50f931f26330b538d8303c1bfd541c01ec9d9e2aaa024bd2d":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"两个字符串的最长公共子序列问题","level":1}]},"be6cb51f32338888d67ff2e4d26680482aea14177de3b599784d85d6deeb2fa3":{"links":[{"lineStart":11,"lineEnd":12,"link":"两个有序数组求上中位数","original":"[[两个有序数组求上中位数]]","displayText":"两个有序数组求上中位数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两个有序数组中最大的k个数","level":1}]},"496aa8951c87c0961b0e25530ea6cf9abeb8cf1e0017ad379902eb29a73c2f7a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"两人操作开关比赛","level":2}]},"d49439b3deba2562eabf3a14a44f7c79b79068d663f7b35d16b049d28c932d96":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两数之和","level":1}]},"9061bda1e6eab7c2738076881b4411453e75681c4616c8a74ee821e46ad6fedd":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两数相加","level":1}]},"1ed30f91293b710864d03b9d6bd7120838fbefe66809423636257f89dacaa341":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#KMP算法"}],"headings":[{"line":1,"heading":"两棵二叉树是否有一致结构的子树","level":1}]},"4714bf40a994868c708edc99bc3992ef182f0acaa6e3d0d1277cc64b8bb8e6f8":{"links":[],"embeds":[{"lineStart":5,"lineEnd":6,"link":"Pasted image 17.png","original":"![[Pasted image 17.png]]","displayText":"Pasted image 17.png"}],"tags":[],"headings":[{"line":0,"heading":"主播们能获得的最大收益","level":1}]},"eb3d55dfea4793f616f1cf1fff8ba0f2c8512ab9a0fdb38f021f81620c9396f4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"乘客坐船使用的最少船数","level":1}]},"ae2269e46256c4128a903eb94a4d9478ffc5670c701b82cafc8393da018e4218":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树上两个节点的最低公共祖先","level":1}]},"66453a37d080dc5e0e86edc75c5adcef449b95d65e64bc7223ef1ddc5c410355":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#二叉树"}],"headings":[{"line":0,"heading":"二叉树中指定节点的后继节点","level":1}]},"c80ba2a6803520f1683e93089af3bd166b5a6468867303a0574df92fc9424c6a":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树中最大的二叉搜索子树的大小","level":1}]},"98c6570b0abcab523bd52be3abe7695d970b7df4ed48be0f82a155f292344757":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树中最大的二叉搜索子树的头节点","level":1}]},"cd1f1f06903a4c6cd44b2de8d1182b9aecf36d939477f3d99a2f33461831e8a8":{"links":[],"embeds":[{"lineStart":15,"lineEnd":16,"link":"Pasted image 19.png","original":"![[Pasted image 19.png]]","displayText":"Pasted image 19.png"},{"lineStart":24,"lineEnd":25,"link":"Pasted image 20.png","original":"![[Pasted image 20.png]]","displayText":"Pasted image 20.png"}],"tags":[{"line":3,"tag":"#递归"},{"line":3,"tag":"#贪心"},{"line":3,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树放置照相机","level":1}]},"579ad331b050c8b8d840b4c17d4f968aadd962a5cfbeb4954cde4b5178f678fe":{"links":[],"embeds":[],"tags":[{"line":4,"tag":"#二叉树"},{"line":4,"tag":"#二叉树遍历"}],"headings":[{"line":0,"heading":"二叉树的序列化和反序列化","level":1}]},"c4a1b9682e61945d63dbd2a039de55be47c241f0e96f34cbdd53f9466a70fe66":{"links":[],"embeds":[],"tags":[],"headings":[{"line":1,"heading":"二叉树的最小深度","level":1}]},"a498223c89cc8308d9cfc7a5c914fb8c3d453cf83d68d9ba1b1fb206ffb0915e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二叉树节点间最近公共祖先的批量查询问题","level":1}]},"0d41a3778edfa1d43c0980b21afad70c186862fa59ebf509964490329409eada":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#并行算法"}],"headings":[{"line":0,"heading":"二维01矩阵中一共有多少个岛","level":1}]},"7730ba42f57790a502bf5c7a883fc1c51a0480ea5d069481cc8510b2e0214861":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二维数组中可以走出的单词","level":1}]},"460fa281cf356ea85b3628a8568cca9b1228826513bd42fbd31894b6888ec66d":{"links":[{"lineStart":13,"lineEnd":14,"link":"压缩数组技巧","original":"[[压缩数组技巧]]","displayText":"压缩数组技巧"}],"embeds":[],"tags":[{"line":2,"tag":"#压缩数组技巧"}],"headings":[{"line":0,"heading":"二维数组中离给定K值最近的子矩阵累加和","level":1}]},"7b880a2c189e5d1937b4eda6833755beede359ae3c86e0623a76078a317dc376":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二维数组最大递增链的长度","level":1}]},"0376c2aa77b92f080ade0c91d936d4b3d3752bc022682534b2c375f71bfb6f98":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二维数组最小路径和","level":1}]},"7aefe5437bf1ff2d5bf02d7a174826aac6879682f9af79ef0e74578fa7a8142c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二维数组直方图装水","level":1}]},"659e050ddc09de8b24b741408c448a093d0b7dc6a1b47ae040db8d65a21acc7b":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树"}],"headings":[{"line":0,"heading":"从上到下打印所有折痕的方向","level":1}]},"48ffe4c8b1283ed77171a3460736daabfa28b253ce3b195640ed404217eab310":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"以最少的跳跃次数跳到最后一个数","level":1}]},"225909e2c4781ed82bf3ef8f03c5833d4f39c975498087c22fa6146e94d05857":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"会议室能容纳的最多宣讲场次","level":1}]},"e44e50be388962f9eb360426222302728e9187be4cea6cd91172f303bf10239d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"使用单词表拼接长字符串的方法数","level":1}]},"60c1d2b70c80048ed467dd4abbeb6530464512841e9e69e1b3b43a3b29771ef5":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"做项目获得的最大钱数","level":1}]},"7358689ac5e48cd39610686a13d05b7cbe6eb26a9d7d80bbeeb07f1f037e4b47":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1","level":1}]},"b31433f8e0192378886773137986b555698b12618a80e5f962b933345b80cc77":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"全是小写字母的字符串str，删除多余字符后达到字典序最小","level":1}]},"eb171afc08f8d26d9996bd2beb721d350679b3d21924a418a50d1705f1eff2b1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"分糖果问题","level":1}]},"441282104055a725e22c35a4889422cff37ce918da0d659b707273b67880cf72":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"判断二叉树中是不是完全二叉树","level":1}]},"76ef52c2f3abc0eca6a4c7f360ff69d16524b732e4e9aab0e32350f5e12d1818":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"判断二叉树是不是平衡二叉树","level":1}]},"388da5210ec8d85d74600833f901aafbf1cf2d4b33dd147b3523548f4a391543":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#二叉树的递归套路"}],"headings":[{"line":1,"heading":"判断二叉树是不是搜索二叉树","level":1}]},"949487df123efc880924b6a76165bbb9d4221da627c6f348732b3d30b5c0fe59":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"判断二叉树是不是满二叉树","level":1}]},"6a830a4b3ef837af8fd1005f7d71365eec9b6b37c2e4afc44f68db7afbda3cdb":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"判断字符串aim是否是str1和str2交错组成","level":1}]},"03740b6d60b42f8c170b8bddcb7a530e931b7a9dac890447c6f51fb2a33af90d":{"links":[],"embeds":[{"lineStart":15,"lineEnd":18,"link":"Pasted image 7.png","original":"![[Pasted image 7.png]]","displayText":"Pasted image 7.png"},{"lineStart":15,"lineEnd":18,"link":"Pasted image 1 1.png","original":"![[Pasted image 1 1.png]]","displayText":"Pasted image 1 1.png"},{"lineStart":15,"lineEnd":18,"link":"Pasted image 2.png","original":"![[Pasted image 2.png]]","displayText":"Pasted image 2.png"},{"lineStart":39,"lineEnd":41,"link":"Pasted image 3.png","original":"![[Pasted image 3.png]]","displayText":"Pasted image 3.png"},{"lineStart":39,"lineEnd":41,"link":"Pasted image 4.png","original":"![[Pasted image 4.png]]","displayText":"Pasted image 4.png"},{"lineStart":69,"lineEnd":70,"link":"Pasted image 5.png","original":"![[Pasted image 5.png]]","displayText":"Pasted image 5.png"},{"lineStart":73,"lineEnd":75,"link":"Pasted image 6.png","original":"![[Pasted image 6.png]]","displayText":"Pasted image 6.png"}],"tags":[{"line":1,"tag":"#链表"}],"headings":[{"line":0,"heading":"判断链表是否为回文结构","level":1}]},"232182bf70dc88de3c5feb63a072d0d61531e05febb60e297e95678983ec31ce":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"}],"headings":[{"line":0,"heading":"单链表和双链表如何反转","level":1}]},"643b00a79008ab02d4f60789037d0d10e907b56b8fd60e757afdf71ed3a11efa":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#卡特兰数"}],"headings":[{"line":0,"heading":"卡特兰数题目一","level":1}]},"f90d5440c31ee8864897a4b090bd1dec6ae577eb02d9c3ab62b2b5050897bd0e":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#卡特兰数"}],"headings":[{"line":0,"heading":"卡特兰数题目二","level":1}]},"33c75f1d14d3f4decf3ce80573dff3c905bb7bccf2d75f8361ae10589a255468":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#矩阵处理技巧"}],"headings":[{"line":0,"heading":"原地旋转正方形矩阵","level":1}]},"459e3297483d989274ec0007d8a259874294326a3e646472caaa6edde9a3e9a3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"},{"line":2,"tag":"#栈"},{"line":2,"tag":"#队列"}],"headings":[{"line":0,"heading":"双向链表实现栈和队列","level":1}]},"5c18d912d314c3fcf816ff966936339bd679a14038d6d702abac343f1dcb79e8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"只做一次交易买卖股票的最大钱数","level":1}]},"5244d910352c90574a880fd8abef539eaf9a27ef3e25548f5b9b0d4f364d0ee9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"合并相邻K个数字的最小代价","level":1}]},"6a30600e1f9d2ce542631093b1a56d20453b5fdc196bae8fc02904dee6021ef3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"喝咖啡的最好时间","level":1}]},"0973e65e76f03cee06ef55c20ef71bc6220deb0e2d688a099d87bff9936c43eb":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"喝完咖啡并洗完咖啡杯的时间点","level":1}]},"519ee0b142c2eff67fda11a21f5e2c939691710123749ac6034c218c11758bfe":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#前缀树"}],"headings":[{"line":0,"heading":"固定数组实现前缀树","level":1}]},"e53d9ed155330d98a84949972eb796d0e71a84653d55ddff662f0fe16c5e1cda":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"在一个字符串中找到没有重复字符子串中最长的长度","level":1}]},"1546c15eb7bda2b40aa286da4cb3fdc43ad8b6b2355f66a925288482e7e6f00c":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二分法"}],"headings":[{"line":0,"heading":"在一个有序数组中，找大于等于某个数最左侧的位置","level":1}]},"ea2dd0571fb3af99bcc2df217d5505bb4500ff6f95de3facb0c5c0a5fe01e99b":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二分法"}],"headings":[{"line":0,"heading":"在一个有序数组中，找小于等于某个数最右侧的位置","level":1}]},"27599d509069643240a2bef1ce5facecaae02b52183bbbc221800ffdedb7aa2e":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二分法"}],"headings":[{"line":0,"heading":"在一个有序数组中，找某个数是否存在","level":1}]},"e97afc8976a1da464f2514ef4b68347716f075d67e5afcf8297fac5eea1768c6":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字","level":1}]},"4073d64c41659ac873525897431dd0a7e167636ac2945c675ed68fd7138ccdce":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#坑题"}],"headings":[{"line":1,"heading":"在整型数组中把奇数放在左边偶数放在右边且保持稳定性","level":1}]},"c46a66d4dc9fb5d10d620c7217ac81a4f1aa30eab1256c242a7474cd44ddfff6":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#快速排序"},{"line":2,"tag":"#bfprt"},{"line":2,"tag":"#荷兰国旗问题"}],"headings":[{"line":0,"heading":"在无序数组中求第K小的数","level":1}]},"e901b871241c2ae0462b0aa6c3b4f416f7410131440957969b08d772c987b038":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"在行有序、列也有序的二维数组中，找num","level":1}]},"c167a91b48603bc932877ddcd99be3a594a069c1fd07ac55491b7de259abab2c":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#暴力递归"},{"line":3,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"多少张贴纸可以贴出给定字符串","level":1}]},"456fda878a4449d834500a247dfc45a497a54cde23dd1274a15006de7154c54b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"多次交易买卖股票的最大钱数","level":1}]},"b963fffb25f4bf96c6b0ba50b2ad4f4d7b38a7d322a215e3fa54e3353d45081e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"大楼最高点变化的轮廓线","level":1}]},"57fe737a869e351825bf1fcf4193c26d2955da0bef432c0e786cd2540412f2db":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"奇怪的打印机","level":1}]},"552d97554a71ceafd530d15a7f3ce1b977f31252925930512c16bc5c67b3980c":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#异或运算"}],"headings":[{"line":0,"heading":"如何不用额外变量交换两个数","level":1}]},"1596c6522ba3de4bda2a156ba2d98ff4439b495efd6f48fb1f54a59250285286":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#栈"},{"line":2,"tag":"#队列"}],"headings":[{"line":0,"heading":"如何用栈结构实现队列结构","level":1}]},"63c43c839efc785ca1387714782e7e148b0b4c160b9cb11ba026d4caab940c09":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#栈"},{"line":2,"tag":"#队列"}],"headings":[{"line":0,"heading":"如何用队列结构实现栈结构","level":1}]},"cbcc39213cfd9373a9f9e906710c9c25086a65ed0e7af5be9e94173debb52fce":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树遍历"}],"headings":[{"line":0,"heading":"如何设计一个打印整棵树的打印函数","level":1}]},"066b655cea1fbb8b4b8e4e39eb4713065693edc7665a8bdc3406152727894da7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"子序列回文","level":1}]},"93d824fe44e80d0162fbc89c3fd48f5878a2be8f4e59b3cb94cde64a6a4fc05f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字符串express能有多少种组合 方式，可以达到desired的结果","level":1}]},"1f2c0a3b28743a6730aa08c2003cebb56ed86fbc052cbe47224eb619b24ad5f0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#KMP算法"}],"headings":[{"line":0,"heading":"字符串str中是否有某个子串是等于字符串match","level":1}]},"048282a70521905e02a68ab803a528d808a85a6db46c4e1e52f6c44f1044e0af":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#字符串匹配"},{"line":1,"tag":"#dfs"}],"headings":[{"line":0,"heading":"字符串匹配问题","level":1}]},"c2a59356526b77da5bf70ab57810c348d0bc4e6564f458279b968231498c90d7":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Manacher算法"}],"headings":[{"line":0,"heading":"字符串变为回文需要添加的最少字符","level":1}]},"a51fafb510aecbfed5f7dc4c2562c04d7b611a0bcbfac261c78c3406c2b8fb26":{"links":[{"lineStart":10,"lineEnd":15,"link":"字典序","original":"[[字典序]]","displayText":"字典序"},{"lineStart":10,"lineEnd":15,"link":"排序算法的传递性","original":"[[排序算法的传递性]]","displayText":"排序算法的传递性"},{"lineStart":10,"lineEnd":15,"link":"字符串的全排列代码","original":"[[字符串的全排列代码]]","displayText":"字符串的全排列代码"}],"embeds":[],"tags":[{"line":3,"tag":"#贪心"}],"headings":[{"line":0,"heading":"字符串组成的数组拼接后字典序最小的结果","level":1}]},"0ba7a7b62642b8531648365d88619c523d97a3732e9fd635a87d8dbc61263c8b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字符串转换整数 (atoi)","level":1}]},"812ba8205b46659cae230a371175c599d8155338cc188c7d67d88f0d8ff258a9":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"}],"headings":[{"line":0,"heading":"完成带rand指针链表的复制","level":1}]},"2a48b81f82b9f30ae27108aa84e0885d1814da6f0b70212a19a65dc70895f549":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树"},{"line":2,"tag":"#二叉树遍历"},{"line":2,"tag":"#BFS"},{"line":2,"tag":"#队列"}],"headings":[{"line":0,"heading":"实现二叉树的按层遍历","level":1}]},"d737e61aa24518efd1c8953e74bbf65dd09a521dab64a796ff907b604cc678d3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#栈"}],"headings":[{"line":0,"heading":"实现最小栈","level":1}]},"445455e2f59f2bd656cf17a6945ea8cd4c62d06c92e8b7e590daa5f56abc1ef7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"寻找两个正序数组的中位数","level":1}]},"ff2a77f26c3e749316a795709935e0ebc1acff33742e8fb8d88a2c278efc3389":{"links":[{"lineStart":4,"lineEnd":10,"link":"0,1],[1,0],[3,2],[2,4","original":"[[0,1],[1,0],[3,2],[2,4]]","displayText":"0,1],[1,0],[3,2],[2,4"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"寻找回文串","level":1}]},"65471a6020c00ea288890088249fad91e65b07825e85b5affbe11bc9c745499f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"将长度为2N数组的前半跟后半数组每个数交替","level":1}]},"f473fd316aecf3a74d82aa1f5ddebbbf81f35c38819bd7529dd0cc6004a83cc0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二分法"}],"headings":[{"line":0,"heading":"局部最小值问题","level":1}]},"2c263cc1904e2a5da3b336d59e9bf190f62892652438214196f90c3c40396ec5":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数","level":1}]},"5d672023c83946b5f4d760f5bb4aca7ed23d3fb0b1852b1d620a7535722a784b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印n层汉诺塔从最左边移动到最右边的全部过程","level":1}]},"cd801df1195b621e156e9f187d9da380b9fdb24ba2636606c983a10ad1b45aef":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印一个字符串的全部子序列","level":1}]},"ff4f40be06cf5953236792c432169693c53b55f0504546531cc1913afd919b29":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列","level":1}]},"8f7ce51509185a2bf5d41882961fbc8e6aa458c0d26108bdbe2dc02dfa47d605":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印一个字符串的全部排列","level":1}]},"5093432f334324360082827e000217746e541cc6025f6c9c53328bf91cc411cb":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印一个字符串的全部排列，要求不要出现重复的排列","level":1}]},"ea95fc085f91faf6c4664030f6a867e2dafbe3c6a5439686bceafc6a2e93b163":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打印目录结构","level":1}]},"78e28801a5cd22c1e18dc7f40dd895b7843d6c5082020bc7b928ec62b962a5ec":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打怪兽需要花的最小钱数","level":1}]},"424e9780d6ba9b55df8b3c25ef015bae59351dbbbdf84c70933909cf418a7417":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打气球的最大分数","level":1}]},"cc42574962ca52fa0e9217551e84ddaa7cc23cfcf4b6a4f3b28c8e4fe4f1aea3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"找出最大的左部分最大值减去右部分最大值的绝对值","level":1}]},"1699441216fec9a48d7c1effdaa0906d16f5c453e9399d65c15da0968e55a507":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"找到数组中只出现1次的数","level":1}]},"f382f902c732a3959bb9976ede7337e21f8da25e679febade82c3c8f8877eaf1":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#链表"}],"headings":[{"line":0,"heading":"把链表中的给定值都删除","level":1}]},"2c73ad2a9a2b74e76c7c0944ef5012e1dc91c6689a7c3b190113e221cd3aa1ac":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"指定结构中加入的所有字符串中，词频最大的K个","level":1}]},"e333c773cea7498325e7ba6c8e51298744e9c59a0d20d69680a322576b7421f7":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#线段树"}],"headings":[{"line":0,"heading":"指定范围上涂色的房子有多少种","level":1}]},"2a57d466a186f46398ef2d6afbbebec318d9858fd9d1315cd04300310ca80e1c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"提取整形数最右侧的1","level":1}]},"bca7d538bf57c244a0e554a05ffec41cca207fe954aa5ee302ffcdca563019ae":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"搜索二叉树转换为有序的双向链表","level":1}]},"a6fef34ed053592944730185603360668020d7af881e4ae297007499f1c45109":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#递归"},{"line":2,"tag":"#从左往右的尝试模型"}],"headings":[{"line":0,"heading":"数字转化为字符串的结果数","level":1}]},"a7f5595a1690959bc43e0481945ee4a27c0ed7966f7868e3423385aef906532d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组中出现次数超过一半及超过N除K的数","level":1}]},"ae874df5f376219d3e79d72a83caf9edb96f24de7f1ff9e21a313a0efe27c064":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组中最大的正方形","level":1}]},"734c59b76ec44866049722fa227148296c9a50eec5924c75ff8eba2ab113d7e0":{"links":[{"lineStart":8,"lineEnd":9,"link":"数组中离给定K值最近的子数组累加和代码","original":"[[数组中离给定K值最近的子数组累加和代码]]","displayText":"数组中离给定K值最近的子数组累加和代码"},{"lineStart":11,"lineEnd":12,"link":"整数组成的无序数组中子数组的累加和小于等于K的最大长度","original":"[[整数组成的无序数组中子数组的累加和小于等于K的最大长度]]","displayText":"整数组成的无序数组中子数组的累加和小于等于K的最大长度"},{"lineStart":12,"lineEnd":13,"link":"整数组成的无序数组中子数组的累加和小于等于K的最大长度非最优普遍解法","original":"[[整数组成的无序数组中子数组的累加和小于等于K的最大长度非最优普遍解法]]","displayText":"整数组成的无序数组中子数组的累加和小于等于K的最大长度非最优普遍解法"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组中离给定K值最近的子数组累加和","level":1}]},"10918b34ba4c4abd0c91998c067e9cbac6cf2d7a8ecc0fa17eedc9162fab866a":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#链表"},{"line":3,"tag":"#栈"},{"line":3,"tag":"#队列"}],"headings":[{"line":0,"heading":"数组实现栈和队列","level":1}]},"5533ef8f480736d2249efcc721351300528d9469b9d10d67ee1c9847b3c4721c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组最大的三子数组的最大和","level":1}]},"7d93727990d35348b3c6625c55fe9433723bfae85932ce053538cd503452b4d0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组直方图装水","level":1}]},"ab6fae70dca36d6351a2ae5df4fcf19123e6a12a642a52a51ed21229be810059":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组能不能分成4个相等的部分","level":1}]},"5a08990354346d252b5bebdeaeba34af241b998489a4265fa58f1754269f47af":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#滑动窗口"}],"headings":[{"line":0,"heading":"整形数组中子数组最大值减最小值达标的子数组个数","level":1}]},"f47df7e5d9e43d2992e67b0a3ee74c9bd51b56651ee62654d65e05ecc8b57c00":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"整形数组中子数组累加和乘最小值的最大值","level":1}]},"9780bd7a69b6e949846c705eeb67a8eedeb9ad2daf07520f8b4943fddf02455e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"整数反转","level":1}]},"a6a6b10d6eb986ac22d7e73981b1413331bd5121406c3db7a90fe933ea7185f3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#数组累加和"},{"line":2,"tag":"#可能性舍弃"}],"headings":[{"line":0,"heading":"整数组成的无序数组中子数组的累加和小于等于K的最大长度","level":1}]},"c3467295e5cacce015ab71831cd0a14bfa57738ee7f2d23144de7ef4e78570ef":{"links":[],"embeds":[],"tags":[{"line":4,"tag":"#数组累加和"}],"headings":[{"line":2,"heading":"整数组成的无序数组中子数组的累加和等于K的最大长度","level":1}]},"6f253415be5e15700f7fc4a4555ded0852d133cbe26a8435eb334e40441684ff":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"整数组成的无序数组中达标的含有1跟2的最大子数组长度","level":1}]},"813ceb478234810df34fce0246cfef3d38783d7642abcef6d7076788bb41030d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"整数转罗马数字","level":1}]},"5e1f271efc710cbac2f36eb41fa9dd9114e2ac6e9254a2b8eabdc7b68a785005":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Fibnacci"}],"headings":[{"line":0,"heading":"斐波那契数列矩阵乘法方式的实现","level":1}]},"80a3169cee34b7bdee379b0eb7f8a71ac566e187271753a940ccdcac65db8acc":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#线段树"}],"headings":[{"line":0,"heading":"方块掉落之后的最大高度","level":1}]},"8d30b7014d2bb484d15da23ce506c6b153ef8d18e10ec02b6ffff056bd45dfaf":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#范围上尝试的模型"}],"headings":[{"line":0,"heading":"旋变字符串","level":1}]},"d7d2bc2389ac91fe99acaad5cbfdd3bc01a03f0ebdd4459176961baebf063ab8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"无序数组中最长的连续序列的长度","level":1}]},"ac3117bad97ca50bb8fc90d677d090c9643832b6d4318176ad0b685848ebbe70":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"无序数组如果排序之后相邻数之间的最大差值","level":1}]},"035dbb6fb0c4cc7880a0ec3ff3c09493997f54ca00ecf4f14c3e7d759332bb48":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"无序数组需要排序的最短子数组长度","level":1}]},"d5b0307041dbd89fbb3155bc4564d11e441fe55c45a77bfd51c6dc2eb02786f7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"无重复字符的最长子串","level":1}]},"9e72b3375c5fe6c43c5016573b28871255140cc1b0746dca9214ef9fe03e8af0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"普通硬币跟纪念币拼出指定面值","level":1}]},"0d62c6f9cc28f2fa04f36cf894f693da4e47fd40f2c749b507edf61308360051":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最多K次交易买卖股票的最大钱数","level":1}]},"dc91ee1a919f25068ac9d0992487263aa8e81d25c6f62f18fc1e884eafa94400":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最大可整合子数组的长度","level":1}]},"0314ee88078ac2837ae26223e38c426feb84b5d4ed4f8909ee1c976a37b1e212":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#线段树"},{"line":2,"tag":"#优先队列"}],"headings":[{"line":0,"heading":"最大线段重叠问题","level":1}]},"8f317f673de19ba27a27df3ce72c65b62a9582354be8e9b8abc67d97e7732cf2":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最小区间","level":1}]},"1a5736a71ffffdd183cdb7edd80d88953a61f2fa7a3ada87599a70d25a49374e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最少需要涂染几个正方形","level":1}]},"c7336b9953cd02ea1a027ad04fb6e22ceaeadcfde0628b663f0c85962b755f73":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最长回文子串","level":1}]},"0e67cecf977b031aaad29db4e3070d5ed761b646e9a47d9194a263b71aec7aa9":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#Manacher算法"}],"headings":[{"line":0,"heading":"最长回文子串的长度","level":1}]},"42667b837c5e5bcb58d4f5cb3ffe88d6bd7e62d57be9314b42a24536f365b6ca":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最长回文子序列长度","level":1}]},"39d46256da259217b3af7452beec704a54499df5beae6db3bb605fe5e181e6d4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最长递增子序列问题的O(N*logN)的解法","level":1}]},"721c40210dac1a900d80a58e0733afbaa3a2c0098f133920b6a30449aa0b77db":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"有一个10G大小的文件中的数字排序","level":1}]},"1fc25baafffc53f6d04d4b9bc3007e2698424573b6a6f82307c9666e9dbca847":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#暴力递归"},{"line":2,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"机器人必须走 K 步，最终能来到P位置的方法有多少种","level":1}]},"9f2b48861ab49acfed17e1645d136e99f5dfb1729fa8264e634e05816fff0aa7":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#蓄水池算法"}],"headings":[{"line":0,"heading":"机器所有吐出的球都等概率放进袋子里","level":1}]},"24bded953bd6c4f46951ac3b13ae02463bd56a65a2ca622cd6217393bcc91722":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"正则表达式匹配","level":1}]},"625108f55e7b9ca5d95b2cc2e6d152f4dbf5012459c16d00928c5b53753db8bf":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#数组累加和"}],"headings":[{"line":1,"heading":"正整数组成的无序数组中子数组的累加和等于K的最大长度","level":1}]},"2adca6dcd714c0175ab610a65408463bf6b57132c27a33ce22d2c387436e0fb7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"母牛生小牛, N年后牛的数量","level":1}]},"cf7b92f43cdfa477a8e94b9dd430c6ebfd4e4a4c6772b4bda75774b231b700e8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"每个人按照标准选工作后所能获得的最高报酬","level":1}]},"cbb814a380a16c698302aacf87c28f341e98747d71114e95707c3213ea9a5132":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求1~N所有数字排列中,等于指定K个逆序对数的排列数","level":1}]},"7c0d9d1e409a6452030e00798e16d2a60454b2f94d53946e07c88d07dcc32d1e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求两个数累加和最大的前K个","level":1}]},"f3c97682d152b3c7eec183d592052f9b58cce9e6a53a00438604a12996e51489":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"求二叉树两个节点的最大距离","level":1}]},"d659c2b3adc13c7b94e2ac017db6a826d65d70decaf8af3f5d4f17515fb649e7":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#bst"}],"headings":[{"line":0,"heading":"求二叉树中复合BST的最大拓扑结构的大小","level":1}]},"df3ae865f333a279d0a8c564a34891443a19376a04351fa8560a171e4037c735":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树"}],"headings":[{"line":0,"heading":"求二叉树最宽的层有多少个节点","level":1}]},"c7a0ac33f37bc71686fcb59fbe6abd98a679fea2f99fb5d6f74c72b98774b545":{"links":[],"embeds":[],"tags":[],"headings":[{"line":1,"heading":"求二叉树路径累加和为K是最长路径的节点数","level":1}]},"ff3bbf2769668a85c8f29134419800ab6fe996ae7f954f8a557eb78dce008c3e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求字符串str1的子串中含有str2所有字符的最小子串长度","level":1}]},"6d4b1a09a8dbfecf26e6e4eea5e0215e6efc1ef4ded34d8a8e2a75d8703be6d4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求完全二叉树节点的个数","level":1}]},"8d334e76f1b1e4b5e5218e2be657d9c1a3bb45bb0c5c16c32917fdaefb15450c":{"links":[{"lineStart":15,"lineEnd":16,"link":"求数组小和代码","original":"[[求数组小和代码]]","displayText":"求数组小和代码"}],"embeds":[],"tags":[{"line":2,"tag":"#归并排序"}],"headings":[{"line":0,"heading":"求数组小和","level":1}]},"73a1f73643e91e3dde0c6fc4a9940f6b595b1dab6aaebb8895651410d5690f27":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求数组调整之后的逆序对数量","level":1}]},"5ea47773f0e1f7bfa8513cde6f4c8f30860064f042ae01851769d155f8c2e528":{"links":[{"lineStart":26,"lineEnd":27,"link":"斐波那契数列矩阵乘法方式的实现","original":"[[斐波那契数列矩阵乘法方式的实现]]","displayText":"斐波那契数列矩阵乘法方式的实现"},{"lineStart":27,"lineEnd":28,"link":"一个人迈上N级台阶的方法数","original":"[[一个人迈上N级台阶的方法数]]","displayText":"一个人迈上N级台阶的方法数"},{"lineStart":28,"lineEnd":29,"link":"母牛生小牛, N年后牛的数量","original":"[[母牛生小牛, N年后牛的数量]]","displayText":"母牛生小牛, N年后牛的数量"},{"lineStart":29,"lineEnd":30,"link":"由0和1两种字符构成的达标字符串","original":"[[由0和1两种字符构成的达标字符串]]","displayText":"由0和1两种字符构成的达标字符串"}],"embeds":[],"tags":[{"line":2,"tag":"#Fibnacci"}],"headings":[{"line":0,"heading":"求斐波那契数列矩阵乘法的方法","level":1},{"line":15,"heading":"类似斐波那契数列的递归优化","level":2},{"line":25,"heading":"题目","level":2}]},"f2ac58bc49feba4ab92e74e323309eebf3d123cb4334dc88a952251273ac432f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求最大子数组异或和","level":1}]},"7a28b7f8a962099b5dced7095d00a67976faf94486fe52d43bedf377f66fddee":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"汉诺塔游戏的最佳状态","level":1}]},"cd58c438a426415459448bfb0c4b0ec7d7cfd68f0e2850c56907579d26931f0b":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"派对的最大快乐值","level":1}]},"5335df337a3c20cb58811c0bb13abe460ac180e1ad567293eafe5be9a0bbd15c":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#滑动窗口"}],"headings":[{"line":0,"heading":"滑动窗口内的最大值","level":1}]},"cbd5f15eaf219ac55a5533293bc5d5cd6602477336864ece4caf1d631d3ea663":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"点亮str中所有需要点亮的位置至少需要几盏灯","level":1}]},"31c264814ff78edfea78506501b96183ac3d824cb50c6809e2d5cdcfcdd44ad7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"牛牛分田","level":1}]},"c40c0b5c6a477f2d241c988a04ee30e4ecc0ec2a6e27ef7803a1f07e9b7852b9":{"links":[],"embeds":[],"tags":[{"line":1,"tag":"#打表法"}],"headings":[{"line":0,"heading":"牛羊吃N份青草谁会赢","level":1}]},"e3fe1b3a0a26a0cfa357ac2f81353f883a09a6bc89639fe08ccf649d484e5f9b":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#递归"}],"headings":[{"line":0,"heading":"用递归方法求数组中的最大值","level":1}]},"0fce0317d6f25a578cca8f25b5fd8d64b7186515fcafee49ed7bdf8fe356dd12":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"由0和1两种字符构成的达标字符串","level":1}]},"45b480260fa9728d211d59645ebe2a4f39bfdd64ab7d8e6090abff5dd8a85052":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"画匠问题","level":1}]},"4d65fbfc4822500fb18d33f0ec00042ddb1fca7ed2ff2a97cf19d041d27cde5f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"盛最多水的容器","level":1}]},"ce21355bd43fdc62f5087b8088f2ae8ee27ca684550061f56caad67cfa77050f":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#堆排序"}],"headings":[{"line":0,"heading":"相对几乎有序数组排序","level":1}]},"e19b5db2178a9f36964ccfcd212b2d9ed1a5bab85f0862eb5d87844bf9e0e177":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#优先队列"}],"headings":[{"line":0,"heading":"矩形重叠问题","level":1}]},"61ab845f3452b51d730a99e1de443102028c60700be000f6a151015fabca094b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"矩阵往返一次的最大路径和","level":1}]},"24dc893bdfcb09024a0dc15a35cfec19a9e8281e1333afc935d4c243550261f2":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"矩阵路径中最小的路径和","level":1}]},"6b32db8500babcbc86fd9151ad625194c075b5d1c270f675e88ef1acc5f5153d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"移除盒子","level":1}]},"58b6502fd0c51cfcd311dca3af4cf8cc7564203f371e08975024dde8123685ae":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"第k小的数值对","level":1}]},"284516a855be810b64295e07439bb43d977023a2afbb562f87186c45dd2d6a4c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"等累加和集合对中最大的累加和","level":1}]},"a259a6b06062e4c3329ac1eaedd3a07cd81f2e2fda3925b38fdacf0bb0431195":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"粘在天花板上的数字与炸弹","level":1}]},"cbd10bc806527bb959f63096fe4a230b0d3fb96575b1ea4c91724aae598d3803":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#约瑟夫环"}],"headings":[{"line":0,"heading":"约瑟夫环的拓展","level":1}]},"198f8e40596e5ba86c8065b7e2d9d452ad8d20d6a69176f7a1f90e62a2736102":{"links":[{"lineStart":9,"lineEnd":10,"link":"剃刀函数与坐标系移动","original":"[[剃刀函数与坐标系移动]]","displayText":"剃刀函数与坐标系移动"},{"lineStart":12,"lineEnd":13,"link":"约瑟夫环的拓展","original":"[[约瑟夫环的拓展]]","displayText":"约瑟夫环的拓展"}],"embeds":[],"tags":[{"line":2,"tag":"#约瑟夫环"}],"headings":[{"line":0,"heading":"约瑟夫环问题","level":1}]},"43d404568a43f3fa38de882cc0647f2def23cdc9fea7f85741874e3ec24cf0d8":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#线段树"}],"headings":[{"line":0,"heading":"线段树实例一","level":1}]},"4e1945b67d274e0911867a617769bae2990cd5faa4c83fa611869ce516e36e63":{"links":[],"embeds":[],"tags":[{"line":4,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"组成aim面值使用的货币的方法数","level":1}]},"47da82d7a980bd7798575fb869cf48f635507cb82a2b86220f5baa85cef8d963":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"给定一个参数N，返回是不是可以表示成若干连续正数和的数","level":1}]},"e9fdb22a57ffc41f04ce2d469aa1c40b571a437c7415a71f86270aad147dabda":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"给定一个数组arr，返回子数组的最大累加和","level":1}]},"814d16d65109058c9bb09a21cbdeab1d0b7351c92b5e57e217490ce1c1c5d1e9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"给定一个整型矩阵，返回子矩阵的最大累计和","level":1}]},"b8803a080ac8f4585c04812e2a27af023a847a5bffda1dace2d27bb75ecea951":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#动态规划"},{"line":2,"tag":"#从左往右的尝试模型"}],"headings":[{"line":0,"heading":"给定一个正整数n, 求裂开的方法数","level":1}]},"23b86150de9020c91f9e0c14e7a6a28bc26fd3c2ed3c03766f6017c83ee84150":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#打表法"}],"headings":[{"line":0,"heading":"给定一个正整数N，返回至少使用多少袋子装苹果","level":1}]},"31f98c96c503b1b0e260b626735c0b7912c57fbfbbd69f46b83f6c09f1bea124":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数","level":1}]},"d36c7309b896f9b3652fa72a7f2b387c5904b02d76291ee8604b6e9de253f6ea":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"给定字符串中有多少个字面值不相同的子序列","level":1}]},"bc46d509520a733c56d16320ee77c47e0565db7862586744fa265a9d9a10f166":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"罗马数字转整数","level":1}]},"740e661ec0c1471dd49a3c06c18a4940a3a770dfd026faf3fca600f034ae2f16":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"背包中有多少种零食放法","level":1}]},"33a17874323dbb7744e7930e5bcbea60cb44846276de062e344465a7d157485b":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#递归"},{"line":3,"tag":"#从左往右的尝试模型"}],"headings":[{"line":0,"heading":"背包能装下最多的价值","level":1}]},"66e9f84f7a02aae26ccac5fefde973f73a906f7f699628c4b6ec14fcfee0c0da":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"背包问题的动态规划解法","level":1}]},"3afb90b0eae83d3dd336a4b1528e6190386561d2584e2a15c3bd0616bb209037":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"能够互相看见环形山的对数","level":1}]},"250bf42278c93aa8c6e963b8a1be9776366ece458efce6737b89138bb7829358":{"links":[],"embeds":[{"lineStart":15,"lineEnd":16,"link":"Pasted image 14.png","original":"![[Pasted image 14.png]]","displayText":"Pasted image 14.png"}],"tags":[],"headings":[{"line":1,"heading":"514. 自由之路","level":1}]},"69423642be3fe1677cdb4f88e7377eba0d688912ec9c5222a99e617079728d6e":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#滑动窗口"}],"headings":[{"line":0,"heading":"良好出发点的加油站","level":1}]},"e78890af88c1e3bc6646bdbe6d13b4229bf0b5534d3989c6a669ab2f86fbe06a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"蛇走的轨迹问题","level":1}]},"f6e871d5e9407fb284d262ef8d9053f22e55d0737af4442455fbc6289569f6dc":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"计算str表达式结果","level":1}]},"1fd74d9b1a073bebaead8e2c9e06b6cfde99a1fc750b6c1882c0e83f49ada82d":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"让所有咖啡杯变干净的最早完成时间","level":1}]},"0f229516cf66faf9b6111331338391b139c09559f72fe4426e2cde3f22050a6b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"词频最大的前K个字符串","level":1}]},"a0a8aff2e67b57319dfc1c3f50d020b49aa775ee538343df5b5ab9e8b4789c29":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#bst"}],"headings":[{"line":0,"heading":"调整BST中错误的两个节点","level":1}]},"070ab0eb48cd00b59af6247663a140470ed4f315e8065ea2a53599d39425f61b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"贴瓷砖问题","level":1}]},"ba935e4bc1df32bf29fc16dcd0d3a6355b6123ef3a36ae0b04e009fa7f416d70":{"links":[],"embeds":[{"lineStart":4,"lineEnd":11,"link":"Pasted image 18.png","original":"![[Pasted image 18.png]]","displayText":"Pasted image 18.png"}],"tags":[],"headings":[{"line":0,"heading":"距离首都距离","level":1}]},"89c0fb16a6127074712cdcb1802169c544d8f341a20e96d12edc8399894ef582":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#矩阵处理技巧"}],"headings":[{"line":0,"heading":"转圈打印矩阵","level":1}]},"de9b1a1a021bd63d645d15201f7884d8356ccde71224d44f8d8fa7fc69028292":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"输油管道问题","level":1}]},"f387e6189127067a62690ffdcefc28369e8970887bc6a60a2ce598b02146fbee":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"边框全是1的最大正方形的边长","level":1}]},"b6c89f4f6239454a553cb02fc937bf1ca940b95befdc07daf7a62e52539b3bec":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"返回数组中，有多少个独立的域","level":1}]},"3e2096e6466e2e08c7300055dbd868e8944144c414277dc0526d31b06b63551e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"返回正数数组 arr 的最小不可组成和","level":1}]},"105e3492f86e2da79248c1db9d91a8385eb9d8350eca005f7a1e52fed9b6c92b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"还原数组丢失的数字","level":1}]},"5d73442d8a17c7534d6bb2b5d4c2440824efb0c7b661cd8fbb3884f38fc8be97":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#递归"},{"line":2,"tag":"#栈"}],"headings":[{"line":0,"heading":"递归逆序一个栈","level":1}]},"89655602e1dbbfb7cc908099f522f6c51e509f77a21ed33bf0bd9c998a43dcd7":{"links":[{"lineStart":2,"lineEnd":3,"link":"输油管道问题","original":"[[输油管道问题]]","displayText":"输油管道问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"邮局选址问题","level":1}]},"80bcbda37410732a690f37848a8b38c69ce95cdccd2a435dc2a158c8436cdb39":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"金条分割的最小代价","level":1}]},"af733b47632d9f996bc1fbe7194948cec9e7cdbbebaff7413fed716f8ef385f9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"问字符串s2最少删除多少字符可以成为s1的子串","level":1}]},"1cfbf57ead50bbc09d76375ae2570dc1872de45b59e8790848392e1ba7c5e251":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"非负数组子序列中累加和%m的最大值","level":1}]},"b8a2399905fd2e17bc3c72c24d25f38dfaf71e5f6c9d610954697ec0dad201a2":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#手写堆"}],"headings":[{"line":0,"heading":"项目经理和程序员","level":1}]},"dbf7e4c2f5d76debb8973fdf34e8eb5460f548b0452b9baf73e684223ae9093e":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"骑士能见到公主的最少初始血量","level":1}]},"ab485d58d410b24c41492f4b513ca6808b3724bd6985da12ca55ce4f26d5a4e2":{"links":[{"lineStart":3,"lineEnd":4,"link":"冒泡排序","original":"[[冒泡排序]]","displayText":"冒泡排序"},{"lineStart":4,"lineEnd":5,"link":"插入排序","original":"[[插入排序]]","displayText":"插入排序"},{"lineStart":5,"lineEnd":6,"link":"选择排序","original":"[[选择排序]]","displayText":"选择排序"},{"lineStart":6,"lineEnd":7,"link":"归并排序","original":"[[归并排序]]","displayText":"归并排序"},{"lineStart":7,"lineEnd":8,"link":"快速排序","original":"[[快速排序]]","displayText":"快速排序"},{"lineStart":9,"lineEnd":10,"link":"05 trie、桶排序、排序总结","original":"[[05 trie、桶排序、排序总结]]","displayText":"05 trie、桶排序、排序总结"},{"lineStart":11,"lineEnd":12,"link":"计数排序","original":"[[计数排序]]","displayText":"计数排序"},{"lineStart":12,"lineEnd":13,"link":"基数排序","original":"[[基数排序]]","displayText":"基数排序"},{"lineStart":14,"lineEnd":15,"link":"图的拓扑排序算法","original":"[[图的拓扑排序算法]]","displayText":"图的拓扑排序算法"},{"lineStart":17,"lineEnd":18,"link":"Master公式","original":"[[Master公式]]","displayText":"Master公式"},{"lineStart":22,"lineEnd":23,"link":"在一个有序数组中，找某个数是否存在","original":"[[在一个有序数组中，找某个数是否存在]]","displayText":"在一个有序数组中，找某个数是否存在"},{"lineStart":23,"lineEnd":24,"link":"在一个有序数组中，找大于等于某个数最左侧的位置","original":"[[在一个有序数组中，找大于等于某个数最左侧的位置]]","displayText":"在一个有序数组中，找大于等于某个数最左侧的位置"},{"lineStart":24,"lineEnd":25,"link":"在一个有序数组中，找小于等于某个数最右侧的位置","original":"[[在一个有序数组中，找小于等于某个数最右侧的位置]]","displayText":"在一个有序数组中，找小于等于某个数最右侧的位置"},{"lineStart":27,"lineEnd":28,"link":"对数器","original":"[[对数器]]","displayText":"对数器"},{"lineStart":28,"lineEnd":29,"link":"比较器","original":"[[比较器]]","displayText":"比较器"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"基础知识点","level":1},{"line":2,"heading":"排序算法","level":2},{"line":16,"heading":"算法复杂度","level":2},{"line":21,"heading":"二分法","level":2},{"line":26,"heading":"基本工具","level":2}]},"86404bef4a1d1bf10707ffb36799dafc3702859fcbe6bb8509d75e6efcc81b28":{"links":[{"lineStart":5,"lineEnd":6,"link":"滑动窗口是什么？","original":"[[滑动窗口是什么？]]","displayText":"滑动窗口是什么？"},{"lineStart":6,"lineEnd":7,"link":"滑动窗口是什么？#滑动窗口能做什么？","original":"[[滑动窗口是什么？#滑动窗口能做什么？]]","displayText":"滑动窗口是什么？#滑动窗口能做什么？"},{"lineStart":7,"lineEnd":8,"link":"滑动窗口是什么？#滑动内最大值和最小值的更新结构","original":"[[滑动窗口是什么？#滑动内最大值和最小值的更新结构]]","displayText":"滑动窗口是什么？#滑动内最大值和最小值的更新结构"},{"lineStart":9,"lineEnd":10,"link":"滑动窗口内的最大值","original":"[[滑动窗口内的最大值]]","displayText":"滑动窗口内的最大值"},{"lineStart":10,"lineEnd":11,"link":"整形数组中子数组最大值减最小值达标的子数组个数","original":"[[整形数组中子数组最大值减最小值达标的子数组个数]]","displayText":"整形数组中子数组最大值减最小值达标的子数组个数"},{"lineStart":12,"lineEnd":13,"link":"单调栈是什么？","original":"[[单调栈是什么？]]","displayText":"单调栈是什么？"},{"lineStart":13,"lineEnd":14,"link":"整形数组中子数组累加和乘最小值的最大值","original":"[[整形数组中子数组累加和乘最小值的最大值]]","displayText":"整形数组中子数组累加和乘最小值的最大值"},{"lineStart":15,"lineEnd":16,"link":"滑动窗口、单调栈怎么用？","original":"[[滑动窗口、单调栈怎么用？]]","displayText":"滑动窗口、单调栈怎么用？"}],"embeds":[],"tags":[{"line":1,"tag":"#滑动窗口"},{"line":1,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"滑动窗口和单调栈","level":1}]},"bef784cfeb33393d2b3e7506fdb3b470a23120bfa1d0940ab639c7ad793f8958":{"links":[{"lineStart":6,"lineEnd":7,"link":"求斐波那契数列矩阵乘法的方法","original":"[[求斐波那契数列矩阵乘法的方法]]","displayText":"求斐波那契数列矩阵乘法的方法"},{"lineStart":7,"lineEnd":8,"link":"求斐波那契数列矩阵乘法的方法#类似斐波那契数列的递归优化","original":"[[求斐波那契数列矩阵乘法的方法#类似斐波那契数列的递归优化]]","displayText":"求斐波那契数列矩阵乘法的方法#类似斐波那契数列的递归优化"},{"lineStart":9,"lineEnd":10,"link":"斐波那契数列矩阵乘法方式的实现","original":"[[斐波那契数列矩阵乘法方式的实现]]","displayText":"斐波那契数列矩阵乘法方式的实现"},{"lineStart":10,"lineEnd":11,"link":"一个人迈上N级台阶的方法数","original":"[[一个人迈上N级台阶的方法数]]","displayText":"一个人迈上N级台阶的方法数"},{"lineStart":11,"lineEnd":12,"link":"母牛生小牛, N年后牛的数量","original":"[[母牛生小牛, N年后牛的数量]]","displayText":"母牛生小牛, N年后牛的数量"},{"lineStart":12,"lineEnd":13,"link":"由0和1两种字符构成的达标字符串","original":"[[由0和1两种字符构成的达标字符串]]","displayText":"由0和1两种字符构成的达标字符串"}],"embeds":[],"tags":[{"line":2,"tag":"#Fibnacci"}],"headings":[{"line":0,"heading":"求斐波那契数列矩阵乘法的方法","level":1}]},"8759f7ddb79232b002126eadd205661457b4856bea09e402a2b75fa8a9b72af6":{"links":[{"lineStart":4,"lineEnd":5,"link":"在无序数组中求第K小的数","original":"[[在无序数组中求第K小的数]]","displayText":"在无序数组中求第K小的数"},{"lineStart":6,"lineEnd":7,"link":"bfprt算法","original":"[[bfprt算法]]","displayText":"bfprt算法"},{"lineStart":7,"lineEnd":8,"link":"蓄水池算法","original":"[[蓄水池算法]]","displayText":"蓄水池算法"}],"embeds":[],"tags":[{"line":2,"tag":"#bfprt"},{"line":2,"tag":"#蓄水池算法"}],"headings":[{"line":0,"heading":"bfprt算法及蓄水池算法","level":1}]},"82368d963255639a61e158cc579fa352715ac24708a275d14ae5e5368525bbbd":{"links":[{"lineStart":5,"lineEnd":6,"link":"KMP算法","original":"[[KMP算法]]","displayText":"KMP算法"},{"lineStart":6,"lineEnd":7,"link":"KMP算法#KMP算法核心","original":"[[KMP算法#KMP算法核心]]","displayText":"KMP算法#KMP算法核心"},{"lineStart":7,"lineEnd":8,"link":"字符串str中是否有某个子串是等于字符串match","original":"[[字符串str中是否有某个子串是等于字符串match]]","displayText":"字符串str中是否有某个子串是等于字符串match"},{"lineStart":8,"lineEnd":9,"link":"两棵二叉树是否有一致结构的子树","original":"[[两棵二叉树是否有一致结构的子树]]","displayText":"两棵二叉树是否有一致结构的子树"}],"embeds":[],"tags":[{"line":1,"tag":"#KMP算法"}],"headings":[{"line":0,"heading":"KMP算法","level":1}]},"6a2bf0361bc461ed9ea1b74eb8e93587bf1e70bd1c6a44a17590b883e7daf9f5":{"links":[{"lineStart":0,"lineEnd":1,"link":"Manacher算法","original":"[[Manacher算法]]","displayText":"Manacher算法"},{"lineStart":1,"lineEnd":2,"link":"Manacher算法#Manacher算法核心","original":"[[Manacher算法#Manacher算法核心]]","displayText":"Manacher算法#Manacher算法核心"},{"lineStart":2,"lineEnd":3,"link":"最长回文子串的长度","original":"[[最长回文子串的长度]]","displayText":"最长回文子串的长度"},{"lineStart":3,"lineEnd":4,"link":"字符串变为回文需要添加的最少字符","original":"[[字符串变为回文需要添加的最少字符]]","displayText":"字符串变为回文需要添加的最少字符"},{"lineStart":4,"lineEnd":5,"link":"两棵二叉树是否有一致结构的子树","original":"[[两棵二叉树是否有一致结构的子树]]","displayText":"两棵二叉树是否有一致结构的子树"}],"embeds":[],"tags":[],"headings":[]},"1c07191027a5439d958ae34a6b5ed952c0dd8656600e54d090d31915eefe34f0":{"links":[{"lineStart":6,"lineEnd":7,"link":"Morris遍历","original":"[[Morris遍历]]","displayText":"Morris遍历"},{"lineStart":7,"lineEnd":8,"link":"Morris遍历#Morris遍历细节","original":"[[Morris遍历#Morris遍历细节]]","displayText":"Morris遍历#Morris遍历细节"},{"lineStart":8,"lineEnd":9,"link":"Morris遍历#Morris遍历实质","original":"[[Morris遍历#Morris遍历实质]]","displayText":"Morris遍历#Morris遍历实质"},{"lineStart":9,"lineEnd":10,"link":"二叉树的最小深度","original":"[[二叉树的最小深度]]","displayText":"二叉树的最小深度"}],"embeds":[],"tags":[{"line":2,"tag":"#Morris遍历"}],"headings":[{"line":0,"heading":"Morris遍历","level":1}]},"0b926e893bb0c040ef80759f4f71b52491641883bd350a361c487785d04351f4":{"links":[{"lineStart":6,"lineEnd":7,"link":"线段树","original":"[[线段树]]","displayText":"线段树"},{"lineStart":7,"lineEnd":8,"link":"线段树实例一","original":"[[线段树实例一]]","displayText":"线段树实例一"},{"lineStart":8,"lineEnd":9,"link":"方块掉落之后的最大高度","original":"[[方块掉落之后的最大高度]]","displayText":"方块掉落之后的最大高度"},{"lineStart":9,"lineEnd":10,"link":"指定范围上涂色的房子有多少种","original":"[[指定范围上涂色的房子有多少种]]","displayText":"指定范围上涂色的房子有多少种"},{"lineStart":10,"lineEnd":11,"link":"最大线段重叠问题","original":"[[最大线段重叠问题]]","displayText":"最大线段重叠问题"},{"lineStart":11,"lineEnd":12,"link":"矩形重叠问题","original":"[[矩形重叠问题]]","displayText":"矩形重叠问题"}],"embeds":[],"tags":[{"line":2,"tag":"#线段树"}],"headings":[{"line":0,"heading":"线段树","level":1}]},"d77a53cdc6ac7dedca889675bb87fb5eb3c7d0f27e68eacdfcdf5556b542e2b3":{"links":[{"lineStart":6,"lineEnd":7,"link":"AC自动机","original":"[[AC自动机]]","displayText":"AC自动机"},{"lineStart":7,"lineEnd":8,"link":"AC自动机#AC自动机算法核心","original":"[[AC自动机#AC自动机算法核心]]","displayText":"AC自动机#AC自动机算法核心"}],"embeds":[],"tags":[{"line":2,"tag":"#AC自动机"}],"headings":[{"line":0,"heading":"AC自动机","level":1}]},"256c2d2941f61d8c82cde99b416fad4c17bc81821c7228667dbe800028881a77":{"links":[{"lineStart":6,"lineEnd":7,"link":"正整数组成的无序数组中子数组的累加和等于K的最大长度","original":"[[正整数组成的无序数组中子数组的累加和等于K的最大长度]]","displayText":"正整数组成的无序数组中子数组的累加和等于K的最大长度"},{"lineStart":7,"lineEnd":8,"link":"整数组成的无序数组中子数组的累加和等于K的最大长度","original":"[[整数组成的无序数组中子数组的累加和等于K的最大长度]]","displayText":"整数组成的无序数组中子数组的累加和等于K的最大长度"},{"lineStart":8,"lineEnd":9,"link":"整数组成的无序数组中达标的含有1跟2的最大子数组长度","original":"[[整数组成的无序数组中达标的含有1跟2的最大子数组长度]]","displayText":"整数组成的无序数组中达标的含有1跟2的最大子数组长度"},{"lineStart":9,"lineEnd":10,"link":"整数组成的无序数组中子数组的累加和小于等于K的最大长度","original":"[[整数组成的无序数组中子数组的累加和小于等于K的最大长度]]","displayText":"整数组成的无序数组中子数组的累加和小于等于K的最大长度"},{"lineStart":15,"lineEnd":16,"link":"解决子数组问题的两种想法","original":"[[解决子数组问题的两种想法]]","displayText":"解决子数组问题的两种想法"},{"lineStart":16,"lineEnd":17,"link":"有关可能性舍弃的题","original":"[[有关可能性舍弃的题]]","displayText":"有关可能性舍弃的题"}],"embeds":[],"tags":[{"line":2,"tag":"#数组累加和"}],"headings":[{"line":0,"heading":"数组累加和问题三连","level":1}]},"51590af86a8c83fe8f36fe51310cfbbb194995b0485801ba807b5124ef4f3b1d":{"links":[{"lineStart":7,"lineEnd":8,"link":"认识哈希函数","original":"[[认识哈希函数]]","displayText":"认识哈希函数"},{"lineStart":8,"lineEnd":9,"link":"认识哈希函数#哈希函数作用：可以把数据根据不同值，几乎均匀的分开","original":"[[认识哈希函数#哈希函数作用：可以把数据根据不同值，几乎均匀的分开]]","displayText":"认识哈希函数#哈希函数作用：可以把数据根据不同值，几乎均匀的分开"},{"lineStart":9,"lineEnd":10,"link":"布隆过滤器","original":"[[布隆过滤器]]","displayText":"布隆过滤器"},{"lineStart":10,"lineEnd":11,"link":"布隆过滤器#布隆过滤器重要的三个公式","original":"[[布隆过滤器#布隆过滤器重要的三个公式]]","displayText":"布隆过滤器#布隆过滤器重要的三个公式"},{"lineStart":11,"lineEnd":12,"link":"一致性哈希","original":"[[一致性哈希]]","displayText":"一致性哈希"},{"lineStart":12,"lineEnd":13,"link":"并行算法","original":"[[并行算法]]","displayText":"并行算法"}],"embeds":[],"tags":[{"line":2,"tag":"#哈希函数"},{"line":2,"tag":"#布隆过滤器"},{"line":2,"tag":"#并行算法"},{"line":2,"tag":"#一致性哈希"}],"headings":[{"line":0,"heading":"哈希函数有关的结构和岛问题","level":1}]},"47a03de4d88b931ddc5c60fb240f756dc0447bbd8f515cbed8a471d907dec282":{"links":[{"lineStart":7,"lineEnd":8,"link":"资源限制技巧汇总","original":"[[资源限制技巧汇总]]","displayText":"资源限制技巧汇总"},{"lineStart":8,"lineEnd":9,"link":"40亿个无符号整数的文件中找到出现次数最多的数","original":"[[40亿个无符号整数的文件中找到出现次数最多的数]]","displayText":"40亿个无符号整数的文件中找到出现次数最多的数"},{"lineStart":9,"lineEnd":10,"link":"40亿个无符号整数的文件中找到所有未出现过的数","original":"[[40亿个无符号整数的文件中找到所有未出现过的数]]","displayText":"40亿个无符号整数的文件中找到所有未出现过的数"},{"lineStart":10,"lineEnd":11,"link":"100亿个URL的大文件中找出其中所有重复的URL","original":"[[100亿个URL的大文件中找出其中所有重复的URL]]","displayText":"100亿个URL的大文件中找出其中所有重复的URL"},{"lineStart":11,"lineEnd":12,"link":"100亿个URL的大文件中找出其中所有重复的URL#某搜索公司一天的用户搜索词汇是海量的, 求出每天热门Top100词汇","original":"[[100亿个URL的大文件中找出其中所有重复的URL#某搜索公司一天的用户搜索词汇是海量的, 求出每天热门Top100词汇]]","displayText":"100亿个URL的大文件中找出其中所有重复的URL#某搜索公司一天的用户搜索词汇是海量的, 求出每天热门Top100词汇"},{"lineStart":12,"lineEnd":13,"link":"40亿个无符号整数找出所有出现了两次的数","original":"[[40亿个无符号整数找出所有出现了两次的数]]","displayText":"40亿个无符号整数找出所有出现了两次的数"},{"lineStart":13,"lineEnd":14,"link":"40亿个无符号整数的中位数","original":"[[40亿个无符号整数的中位数]]","displayText":"40亿个无符号整数的中位数"},{"lineStart":14,"lineEnd":15,"link":"有一个10G大小的文件中的数字排序","original":"[[有一个10G大小的文件中的数字排序]]","displayText":"有一个10G大小的文件中的数字排序"}],"embeds":[],"tags":[{"line":2,"tag":"#资源限制类题目"}],"headings":[{"line":0,"heading":"如何解决资源限制类题目","level":1}]},"24f2a8f7638c49260a9a0978be22205fa9898157d45eb975e86d6f5443edc8d2":{"links":[{"lineStart":6,"lineEnd":7,"link":"搜索二叉树","original":"[[搜索二叉树]]","displayText":"搜索二叉树"},{"lineStart":7,"lineEnd":8,"link":"搜索二叉树#搜索二叉树查询key（查询某个key存在还是不存在）","original":"[[搜索二叉树#搜索二叉树查询key（查询某个key存在还是不存在）]]","displayText":"搜索二叉树#搜索二叉树查询key（查询某个key存在还是不存在）"},{"lineStart":8,"lineEnd":9,"link":"搜索二叉树#搜索二叉树插入新的key","original":"[[搜索二叉树#搜索二叉树插入新的key]]","displayText":"搜索二叉树#搜索二叉树插入新的key"},{"lineStart":9,"lineEnd":10,"link":"搜索二叉树#搜索二叉树删除key","original":"[[搜索二叉树#搜索二叉树删除key]]","displayText":"搜索二叉树#搜索二叉树删除key"},{"lineStart":10,"lineEnd":11,"link":"搜索二叉树#搜索二叉树特别不讲究","original":"[[搜索二叉树#搜索二叉树特别不讲究]]","displayText":"搜索二叉树#搜索二叉树特别不讲究"},{"lineStart":11,"lineEnd":12,"link":"AVL树、SB树、红黑树的共性与不同","original":"[[AVL树、SB树、红黑树的共性与不同]]","displayText":"AVL树、SB树、红黑树的共性与不同"},{"lineStart":12,"lineEnd":13,"link":"AVL树","original":"[[AVL树]]","displayText":"AVL树"}],"embeds":[],"tags":[{"line":2,"tag":"#有序表"},{"line":2,"tag":"#AVL"},{"line":2,"tag":"#红黑树"},{"line":2,"tag":"#SB树"}],"headings":[{"line":0,"heading":"有序表的原理、应用、扩展","level":1}]},"9bb0f6bb48289fc2adcbc14bd737a1f30659f4ca35513053a033acf7b8a53c0a":{"links":[{"lineStart":3,"lineEnd":4,"link":"打表法","original":"[[打表法]]","displayText":"打表法"},{"lineStart":4,"lineEnd":5,"link":"打表法#打表找规律","original":"[[打表法#打表找规律]]","displayText":"打表法#打表找规律"},{"lineStart":5,"lineEnd":6,"link":"给定一个正整数N，返回至少使用多少袋子装苹果","original":"[[给定一个正整数N，返回至少使用多少袋子装苹果]]","displayText":"给定一个正整数N，返回至少使用多少袋子装苹果"},{"lineStart":6,"lineEnd":7,"link":"牛羊吃N份青草谁会赢","original":"[[牛羊吃N份青草谁会赢]]","displayText":"牛羊吃N份青草谁会赢"},{"lineStart":7,"lineEnd":8,"link":"给定一个参数N，返回是不是可以表示成若干连续正数和的数","original":"[[给定一个参数N，返回是不是可以表示成若干连续正数和的数]]","displayText":"给定一个参数N，返回是不是可以表示成若干连续正数和的数"},{"lineStart":8,"lineEnd":9,"link":"两人操作开关比赛","original":"[[两人操作开关比赛]]","displayText":"两人操作开关比赛"},{"lineStart":10,"lineEnd":11,"link":"矩阵处理技巧","original":"[[矩阵处理技巧]]","displayText":"矩阵处理技巧"},{"lineStart":11,"lineEnd":12,"link":"zigzag打印矩阵","original":"[[zigzag打印矩阵]]","displayText":"zigzag打印矩阵"},{"lineStart":12,"lineEnd":13,"link":"转圈打印矩阵","original":"[[转圈打印矩阵]]","displayText":"转圈打印矩阵"},{"lineStart":13,"lineEnd":14,"link":"原地旋转正方形矩阵","original":"[[原地旋转正方形矩阵]]","displayText":"原地旋转正方形矩阵"}],"embeds":[],"tags":[{"line":1,"tag":"#打表法"},{"line":1,"tag":"#矩阵处理技巧"}],"headings":[{"line":0,"heading":"打表法及矩阵处理技巧","level":1}]},"92ffb8b7b0284eef409379f5dbb579fc40c1d68e43721d21f406597474d5492f":{"links":[{"lineStart":0,"lineEnd":1,"link":"在行有序、列也有序的二维数组中，找num","original":"[[在行有序、列也有序的二维数组中，找num]]","displayText":"在行有序、列也有序的二维数组中，找num"},{"lineStart":1,"lineEnd":2,"link":"使每个打包机器上的物品数量相等需要搬动的最小轮数","original":"[[使每个打包机器上的物品数量相等需要搬动的最小轮数]]","displayText":"使每个打包机器上的物品数量相等需要搬动的最小轮数"},{"lineStart":2,"lineEnd":3,"link":"找出最大的左部分最大值减去右部分最大值的绝对值","original":"[[找出最大的左部分最大值减去右部分最大值的绝对值]]","displayText":"找出最大的左部分最大值减去右部分最大值的绝对值"},{"lineStart":3,"lineEnd":4,"link":"数组直方图装水","original":"[[数组直方图装水]]","displayText":"数组直方图装水"},{"lineStart":4,"lineEnd":5,"link":"二维数组直方图装水","original":"[[二维数组直方图装水]]","displayText":"二维数组直方图装水"},{"lineStart":5,"lineEnd":6,"link":"累加和为aim的所有二元组跟三元组","original":"[[累加和为aim的所有二元组跟三元组]]","displayText":"累加和为aim的所有二元组跟三元组"},{"lineStart":6,"lineEnd":7,"link":"第k小的数值对","original":"[[第k小的数值对]]","displayText":"第k小的数值对"}],"embeds":[],"tags":[],"headings":[]},"cec55784ef6e22047b86bb9c99ed5130958bc0d481a7659f45961b7107068092":{"links":[{"lineStart":0,"lineEnd":1,"link":"打印目录结构","original":"[[打印目录结构]]","displayText":"打印目录结构"},{"lineStart":1,"lineEnd":2,"link":"搜索二叉树转换为有序的双向链表","original":"[[搜索二叉树转换为有序的双向链表]]","displayText":"搜索二叉树转换为有序的双向链表"},{"lineStart":2,"lineEnd":3,"link":"已知中序遍历数组和先序遍历数组，返回后序遍历数组","original":"[[已知中序遍历数组和先序遍历数组，返回后序遍历数组]]","displayText":"已知中序遍历数组和先序遍历数组，返回后序遍历数组"},{"lineStart":3,"lineEnd":4,"link":"最长递增子序列问题的O(NxlogN)的解法","original":"[[最长递增子序列问题的O(NxlogN)的解法]]","displayText":"最长递增子序列问题的O(NxlogN)的解法"},{"lineStart":4,"lineEnd":5,"link":"给你一批信封，返回最大的嵌套层数","original":"[[给你一批信封，返回最大的嵌套层数]]","displayText":"给你一批信封，返回最大的嵌套层数"},{"lineStart":5,"lineEnd":6,"link":"给定一个数组arr，返回子数组的最大累加和","original":"[[给定一个数组arr，返回子数组的最大累加和]]","displayText":"给定一个数组arr，返回子数组的最大累加和"},{"lineStart":6,"lineEnd":7,"link":"给定一个整型矩阵，返回子矩阵的最大累计和","original":"[[给定一个整型矩阵，返回子矩阵的最大累计和]]","displayText":"给定一个整型矩阵，返回子矩阵的最大累计和"}],"embeds":[],"tags":[],"headings":[]},"cfdc9e73a221d5b0e7e9f0639f3729db7a3e6b550cc22e33745840b8ccbb1a9e":{"links":[{"lineStart":0,"lineEnd":1,"link":"求最大子数组异或和","original":"[[求最大子数组异或和]]","displayText":"求最大子数组异或和"},{"lineStart":1,"lineEnd":2,"link":"字符串express能有多少种组合 方式，可以达到desired的结果","original":"[[字符串express能有多少种组合 方式，可以达到desired的结果]]","displayText":"字符串express能有多少种组合 方式，可以达到desired的结果"},{"lineStart":2,"lineEnd":3,"link":"以最少的跳跃次数跳到最后一个数","original":"[[以最少的跳跃次数跳到最后一个数]]","displayText":"以最少的跳跃次数跳到最后一个数"},{"lineStart":3,"lineEnd":4,"link":"求两个数累加和最大的前K个","original":"[[求两个数累加和最大的前K个]]","displayText":"求两个数累加和最大的前K个"},{"lineStart":4,"lineEnd":5,"link":"数组能不能分成4个相等的部分","original":"[[数组能不能分成4个相等的部分]]","displayText":"数组能不能分成4个相等的部分"},{"lineStart":5,"lineEnd":6,"link":"判断字符串aim是否是str1和str2交错组成","original":"[[判断字符串aim是否是str1和str2交错组成]]","displayText":"判断字符串aim是否是str1和str2交错组成"}],"embeds":[],"tags":[],"headings":[]},"808f0ddf3cd0d35de69e7e91821723e7c803a3325c94a89f1d8baeac13b87812":{"links":[{"lineStart":0,"lineEnd":1,"link":"无序数组需要排序的最短子数组长度","original":"[[无序数组需要排序的最短子数组长度]]","displayText":"无序数组需要排序的最短子数组长度"},{"lineStart":1,"lineEnd":2,"link":"返回正数数组 arr 的最小不可组成和","original":"[[返回正数数组 arr 的最小不可组成和]]","displayText":"返回正数数组 arr 的最小不可组成和"},{"lineStart":2,"lineEnd":3,"link":"想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数","original":"[[想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数]]","displayText":"想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数"},{"lineStart":3,"lineEnd":4,"link":"返回数组中，有多少个独立的域","original":"[[返回数组中，有多少个独立的域]]","displayText":"返回数组中，有多少个独立的域"},{"lineStart":4,"lineEnd":5,"link":"全是小写字母的字符串str，删除多余字符后达到字典序最小","original":"[[全是小写字母的字符串str，删除多余字符后达到字典序最小]]","displayText":"全是小写字母的字符串str，删除多余字符后达到字典序最小"},{"lineStart":5,"lineEnd":6,"link":"在一个字符串中找到没有重复字符子串中最长的长度","original":"[[在一个字符串中找到没有重复字符子串中最长的长度]]","displayText":"在一个字符串中找到没有重复字符子串中最长的长度"},{"lineStart":6,"lineEnd":7,"link":"一条直线最多能穿过多少个点","original":"[[一条直线最多能穿过多少个点]]","displayText":"一条直线最多能穿过多少个点"}],"embeds":[],"tags":[],"headings":[]},"314b1b8f5cfb89cf8ffd6873ff9626073b0b79bc494decee1555203c9546bc86":{"links":[{"lineStart":0,"lineEnd":1,"link":"一种消息接收并打印的结构设计","original":"[[一种消息接收并打印的结构设计]]","displayText":"一种消息接收并打印的结构设计"},{"lineStart":1,"lineEnd":2,"link":"普通硬币跟纪念币拼出指定面值","original":"[[普通硬币跟纪念币拼出指定面值]]","displayText":"普通硬币跟纪念币拼出指定面值"},{"lineStart":2,"lineEnd":3,"link":"1~N中所有数字包含1的个数","original":"[[1~N中所有数字包含1的个数]]","displayText":"1~N中所有数字包含1的个数"},{"lineStart":3,"lineEnd":4,"link":"打怪兽需要花的最小钱数","original":"[[打怪兽需要花的最小钱数]]","displayText":"打怪兽需要花的最小钱数"},{"lineStart":4,"lineEnd":5,"link":"最大可整合子数组的长度","original":"[[最大可整合子数组的长度]]","displayText":"最大可整合子数组的长度"},{"lineStart":5,"lineEnd":6,"link":"最少添加多少字符使字符串变为回文串","original":"[[最少添加多少字符使字符串变为回文串]]","displayText":"最少添加多少字符使字符串变为回文串"}],"embeds":[],"tags":[],"headings":[]},"c270ce3d6bf5702683f5c3b1dcaec6eeeca1fd02e4f75f6023e07d411c0af6de":{"links":[{"lineStart":0,"lineEnd":1,"link":"二维数组最大递增链的长度","original":"[[二维数组最大递增链的长度]]","displayText":"二维数组最大递增链的长度"},{"lineStart":1,"lineEnd":2,"link":"数组中离给定K值最近的子数组累加和","original":"[[数组中离给定K值最近的子数组累加和]]","displayText":"数组中离给定K值最近的子数组累加和"},{"lineStart":2,"lineEnd":3,"link":"二维数组中离给定K值最近的子矩阵累加和","original":"[[二维数组中离给定K值最近的子矩阵累加和]]","displayText":"二维数组中离给定K值最近的子矩阵累加和"},{"lineStart":3,"lineEnd":4,"link":"二维数组中可以走出的单词","original":"[[二维数组中可以走出的单词]]","displayText":"二维数组中可以走出的单词"},{"lineStart":4,"lineEnd":5,"link":"数组中添加加减乘除运算符得到指定值的所有方法","original":"[[数组中添加加减乘除运算符得到指定值的所有方法]]","displayText":"数组中添加加减乘除运算符得到指定值的所有方法"}],"embeds":[],"tags":[],"headings":[]},"8250614d59aa8bae6b8c2fffbab11f85d9b03b5bc9d5c785c1b6ea6bddb299ff":{"links":[{"lineStart":0,"lineEnd":1,"link":"只做一次交易买卖股票的最大钱数","original":"[[只做一次交易买卖股票的最大钱数]]","displayText":"只做一次交易买卖股票的最大钱数"},{"lineStart":1,"lineEnd":2,"link":"多次交易买卖股票的最大钱数","original":"[[多次交易买卖股票的最大钱数]]","displayText":"多次交易买卖股票的最大钱数"},{"lineStart":2,"lineEnd":3,"link":"最多K次交易买卖股票的最大钱数","original":"[[最多K次交易买卖股票的最大钱数]]","displayText":"最多K次交易买卖股票的最大钱数"},{"lineStart":3,"lineEnd":4,"link":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数","original":"[[给定两个字符串S和T，返回S子序列等于T的不同子序列个数]]","displayText":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数"},{"lineStart":4,"lineEnd":5,"link":"骑士能见到公主的最少初始血量","original":"[[骑士能见到公主的最少初始血量]]","displayText":"骑士能见到公主的最少初始血量"},{"lineStart":5,"lineEnd":6,"link":"矩阵往返一次的最大路径和","original":"[[矩阵往返一次的最大路径和]]","displayText":"矩阵往返一次的最大路径和"}],"embeds":[],"tags":[],"headings":[]},"6cc47ffb257aac17341596ab3eac7aa2966eb45c0a63b727334594176e039ce7":{"links":[{"lineStart":0,"lineEnd":1,"link":"无序数组如果排序之后相邻数之间的最大差值","original":"[[无序数组如果排序之后相邻数之间的最大差值]]","displayText":"无序数组如果排序之后相邻数之间的最大差值"},{"lineStart":1,"lineEnd":2,"link":"使用单词表拼接长字符串的方法数","original":"[[使用单词表拼接长字符串的方法数]]","displayText":"使用单词表拼接长字符串的方法数"},{"lineStart":2,"lineEnd":3,"link":"求二叉树路径累加和为K是最长路径的节点数","original":"[[求二叉树路径累加和为K是最长路径的节点数]]","displayText":"求二叉树路径累加和为K是最长路径的节点数"},{"lineStart":3,"lineEnd":4,"link":"找到数组中只出现1次的数","original":"[[找到数组中只出现1次的数]]","displayText":"找到数组中只出现1次的数"},{"lineStart":4,"lineEnd":5,"link":"数组中出现次数超过一半及超过N除K的数","original":"[[数组中出现次数超过一半及超过N除K的数]]","displayText":"数组中出现次数超过一半及超过N除K的数"}],"embeds":[],"tags":[],"headings":[]},"ea580726287191e164331ef803b38025b38d28162f28debc1c4518f0bc4e07b0":{"links":[{"lineStart":0,"lineEnd":1,"link":"大楼最高点变化的轮廓线","original":"[[大楼最高点变化的轮廓线]]","displayText":"大楼最高点变化的轮廓线"},{"lineStart":1,"lineEnd":2,"link":"两个有序数组中最大的k个数","original":"[[两个有序数组中最大的k个数]]","displayText":"两个有序数组中最大的k个数"},{"lineStart":2,"lineEnd":3,"link":"Nim博弈问题","original":"[[Nim博弈问题]]","displayText":"Nim博弈问题"},{"lineStart":3,"lineEnd":4,"link":"约瑟夫环问题","original":"[[约瑟夫环问题]]","displayText":"约瑟夫环问题"},{"lineStart":4,"lineEnd":5,"link":"乘客坐船使用的最少船数","original":"[[乘客坐船使用的最少船数]]","displayText":"乘客坐船使用的最少船数"},{"lineStart":5,"lineEnd":6,"link":"喝完咖啡并洗完咖啡杯的时间点","original":"[[喝完咖啡并洗完咖啡杯的时间点]]","displayText":"喝完咖啡并洗完咖啡杯的时间点"},{"lineStart":6,"lineEnd":7,"link":"喝咖啡的最好时间","original":"[[喝咖啡的最好时间]]","displayText":"喝咖啡的最好时间"}],"embeds":[],"tags":[],"headings":[]},"35fdc5cdb758b112858047405f6563652245785ae5d97c2e01ebaeda93af93b5":{"links":[{"lineStart":0,"lineEnd":1,"link":"项目经理和程序员","original":"[[项目经理和程序员]]","displayText":"项目经理和程序员"},{"lineStart":1,"lineEnd":2,"link":"调整BST中错误的两个节点","original":"[[调整BST中错误的两个节点]]","displayText":"调整BST中错误的两个节点"},{"lineStart":2,"lineEnd":3,"link":"能够互相看见环形山的对数","original":"[[能够互相看见环形山的对数]]","displayText":"能够互相看见环形山的对数"},{"lineStart":3,"lineEnd":4,"link":"非负数组子序列中累加和%m的最大值","original":"[[非负数组子序列中累加和%m的最大值]]","displayText":"非负数组子序列中累加和%m的最大值"}],"embeds":[],"tags":[],"headings":[]},"7372a83a6b3550594085ea77804b30615d69385503e2bda6e38f2b3232fc0852":{"links":[{"lineStart":0,"lineEnd":1,"link":"字符串匹配问题","original":"[[字符串匹配问题]]","displayText":"字符串匹配问题"},{"lineStart":1,"lineEnd":2,"link":"自由之路","original":"[[自由之路]]","displayText":"自由之路"},{"lineStart":2,"lineEnd":3,"link":"打气球的最大分数","original":"[[打气球的最大分数]]","displayText":"打气球的最大分数"},{"lineStart":3,"lineEnd":4,"link":"汉诺塔游戏的最佳状态","original":"[[汉诺塔游戏的最佳状态]]","displayText":"汉诺塔游戏的最佳状态"},{"lineStart":4,"lineEnd":5,"link":"合并相邻K个数字的最小代价","original":"[[合并相邻K个数字的最小代价]]","displayText":"合并相邻K个数字的最小代价"}],"embeds":[],"tags":[],"headings":[]},"06fc8b36b5601b669978d2ef1c3dfa105e546d248e4f95008631db8910015a1f":{"links":[{"lineStart":0,"lineEnd":1,"link":"旋变字符串","original":"[[旋变字符串]]","displayText":"旋变字符串"},{"lineStart":1,"lineEnd":2,"link":"求字符串str1的子串中含有str2所有字符的最小子串长度","original":"[[求字符串str1的子串中含有str2所有字符的最小子串长度]]","displayText":"求字符串str1的子串中含有str2所有字符的最小子串长度"},{"lineStart":2,"lineEnd":3,"link":"LFU内存替换算法的实现","original":"[[LFU内存替换算法的实现]]","displayText":"LFU内存替换算法的实现"},{"lineStart":3,"lineEnd":4,"link":"良好出发点的加油站","original":"[[良好出发点的加油站]]","displayText":"良好出发点的加油站"}],"embeds":[],"tags":[],"headings":[]},"e9485942e619bcf2cd0d909279d3d1fae1b13a7d03192aca48037a283004c454":{"links":[{"lineStart":0,"lineEnd":1,"link":"距离首都距离","original":"[[距离首都距离]]","displayText":"距离首都距离"},{"lineStart":1,"lineEnd":2,"link":"分糖果问题","original":"[[分糖果问题]]","displayText":"分糖果问题"},{"lineStart":2,"lineEnd":3,"link":"二叉树放置照相机","original":"[[二叉树放置照相机]]","displayText":"二叉树放置照相机"},{"lineStart":3,"lineEnd":4,"link":"数组最大的三子数组的最大和","original":"[[数组最大的三子数组的最大和]]","displayText":"数组最大的三子数组的最大和"}],"embeds":[],"tags":[],"headings":[]},"50a4b5263d3acd050e09b4c62a48f4da0a0e49cfbf3d55dfbc533920e44c3417":{"links":[{"lineStart":0,"lineEnd":1,"link":"牛牛分田地","original":"[[牛牛分田地]]","displayText":"牛牛分田地"},{"lineStart":1,"lineEnd":2,"link":"粘在天花板上的数字与炸弹","original":"[[粘在天花板上的数字与炸弹]]","displayText":"粘在天花板上的数字与炸弹"},{"lineStart":2,"lineEnd":3,"link":"等累加和集合对中最大的累加和","original":"[[等累加和集合对中最大的累加和]]","displayText":"等累加和集合对中最大的累加和"},{"lineStart":3,"lineEnd":4,"link":"给定字符串中有多少个字面值不相同的子序列","original":"[[给定字符串中有多少个字面值不相同的子序列]]","displayText":"给定字符串中有多少个字面值不相同的子序列"},{"lineStart":4,"lineEnd":5,"link":"数组中最大的正方形","original":"[[数组中最大的正方形]]","displayText":"数组中最大的正方形"}],"embeds":[],"tags":[],"headings":[]},"68557a182e35f893d22a2cda9c2b62f1390ae752eb329dc6dbf40e8d579f4492":{"links":[{"lineStart":0,"lineEnd":1,"link":"画匠问题","original":"[[画匠问题]]","displayText":"画匠问题"},{"lineStart":1,"lineEnd":2,"link":"丢棋子问题","original":"[[丢棋子问题]]","displayText":"丢棋子问题"},{"lineStart":2,"lineEnd":3,"link":"邮局选址问题","original":"[[邮局选址问题]]","displayText":"邮局选址问题"},{"lineStart":3,"lineEnd":4,"link":"求数组调整之后的逆序对数量","original":"[[求数组调整之后的逆序对数量]]","displayText":"求数组调整之后的逆序对数量"}],"embeds":[],"tags":[],"headings":[]},"c1be8e7eed681c16cf68c045abf6456e3eb5c4cc0f7191c2ea0c26d94b432742":{"links":[{"lineStart":0,"lineEnd":1,"link":"寻找回文串","original":"[[寻找回文串]]","displayText":"寻找回文串"},{"lineStart":1,"lineEnd":2,"link":"无序数组中最长的连续序列的长度","original":"[[无序数组中最长的连续序列的长度]]","displayText":"无序数组中最长的连续序列的长度"},{"lineStart":2,"lineEnd":3,"link":"二叉树节点间最近公共祖先的批量查询问题","original":"[[二叉树节点间最近公共祖先的批量查询问题]]","displayText":"二叉树节点间最近公共祖先的批量查询问题"},{"lineStart":3,"lineEnd":4,"link":"全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1","original":"[[全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1]]","displayText":"全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1"}],"embeds":[],"tags":[],"headings":[]},"7ec43f41ff8909de11c4e603e8c9db49a139e864d77a41dcc0cb599e45d5dcbb":{"links":[{"lineStart":0,"lineEnd":1,"link":"移除盒子","original":"[[移除盒子]]","displayText":"移除盒子"},{"lineStart":1,"lineEnd":2,"link":"奇怪的打印机","original":"[[奇怪的打印机]]","displayText":"奇怪的打印机"},{"lineStart":2,"lineEnd":3,"link":"最小区间","original":"[[最小区间]]","displayText":"最小区间"},{"lineStart":3,"lineEnd":4,"link":"还原数组丢失的数字","original":"[[还原数组丢失的数字]]","displayText":"还原数组丢失的数字"}],"embeds":[],"tags":[],"headings":[]},"987cdfdddcdc14d7d69ae046a4d666f5385616fd93d35ef8070ddda1b4b7dc98":{"links":[{"lineStart":0,"lineEnd":1,"link":"TSP问题","original":"[[TSP问题 ]]","displayText":"TSP问题"},{"lineStart":1,"lineEnd":2,"link":"贴瓷砖问题","original":"[[贴瓷砖问题]]","displayText":"贴瓷砖问题"}],"embeds":[],"tags":[],"headings":[]},"27b6473e59f89a91ab4856f88f2e8559e5ded70a11b89e946b0d9ca1df52760c":{"links":[{"lineStart":0,"lineEnd":1,"link":"后缀数组","original":"[[后缀数组]]","displayText":"后缀数组"},{"lineStart":1,"lineEnd":2,"link":"在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字","original":"[[在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字]]","displayText":"在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字"}],"embeds":[],"tags":[],"headings":[]},"805c8252deb20c92eb235a1e420e722f6e901fac32e2f3d64774bb0eaa5fda76":{"links":[{"lineStart":53,"lineEnd":57,"link":"点亮str中所有需要点亮的位置至少需要几盏灯","original":"[[点亮str中所有需要点亮的位置至少需要几盏灯]]","displayText":"点亮str中所有需要点亮的位置至少需要几盏灯"},{"lineStart":53,"lineEnd":57,"link":"金条分割的最小代价","original":"[[金条分割的最小代价]]","displayText":"金条分割的最小代价"},{"lineStart":53,"lineEnd":57,"link":"会议室能容纳的最多宣讲场次","original":"[[会议室能容纳的最多宣讲场次]]","displayText":"会议室能容纳的最多宣讲场次"},{"lineStart":53,"lineEnd":57,"link":"做项目获得的最大钱数","original":"[[做项目获得的最大钱数]]","displayText":"做项目获得的最大钱数"}],"embeds":[],"tags":[{"line":2,"tag":"#贪心"}],"headings":[{"line":0,"heading":"贪心算法","level":1},{"line":6,"heading":"贪心算法","level":2},{"line":17,"heading":"贪心算法求解的标准过程","level":2},{"line":26,"heading":"贪心算法的解题套路","level":2},{"line":35,"heading":"贪心算法在笔试跟面试中的地位","level":2}]},"232f74ee9a7f932a6d3bd418f928f98663fef0da3b031ab7b51a84b8450df97e":{"links":[{"lineStart":6,"lineEnd":9,"link":"银行家算法","original":"[[银行家算法]]","displayText":"银行家算法"},{"lineStart":6,"lineEnd":9,"link":"网络流","original":"[[网络流]]","displayText":"网络流"},{"lineStart":6,"lineEnd":9,"link":"红黑树","original":"[[红黑树]]","displayText":"红黑树"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"跟面试官聊的算法","level":1}]},"9cfc973e1d56de5052cd1eb4610e1b4810da5794911e8c7667f9473492dcd9a5":{"links":[{"lineStart":4,"lineEnd":6,"link":"二维数组中可以走出的单词","original":"[[二维数组中可以走出的单词]]","displayText":"二维数组中可以走出的单词"},{"lineStart":13,"lineEnd":14,"link":"数组中添加加减乘除运算符得到指定值的所有方法","original":"[[数组中添加加减乘除运算符得到指定值的所有方法]]","displayText":"数组中添加加减乘除运算符得到指定值的所有方法"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"递归能力练习题目","level":1}]},"9e233a7167be0568b8a92d37327f3c4b798e59df47560b2871e77880bc822efd":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#堆排序"}],"headings":[{"line":0,"heading":"堆排序","level":1}]},"1d444faff072be46e06b605fd8f4456aad54a90dff9c7c54480cc4acfc3fd1c3":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#手写堆"}],"headings":[{"line":0,"heading":"手写堆代码","level":1}]},"2c2880e1b54acb76ea30b7257dcabc063a51678527aa6b517095812264ec62d6":{"links":[{"lineStart":18,"lineEnd":19,"link":"打印n层汉诺塔从最左边移动到最右边的全部过程","original":"[[打印n层汉诺塔从最左边移动到最右边的全部过程]]","displayText":"打印n层汉诺塔从最左边移动到最右边的全部过程"},{"lineStart":19,"lineEnd":20,"link":"打印一个字符串的全部子序列","original":"[[打印一个字符串的全部子序列]]","displayText":"打印一个字符串的全部子序列"},{"lineStart":20,"lineEnd":21,"link":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列","original":"[[打印一个字符串的全部子序列，要求不要出现重复字面值的子序列]]","displayText":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列"},{"lineStart":21,"lineEnd":22,"link":"打印一个字符串的全部排列","original":"[[打印一个字符串的全部排列]]","displayText":"打印一个字符串的全部排列"},{"lineStart":22,"lineEnd":23,"link":"打印一个字符串的全部排列，要求不要出现重复的排列","original":"[[打印一个字符串的全部排列，要求不要出现重复的排列]]","displayText":"打印一个字符串的全部排列，要求不要出现重复的排列"},{"lineStart":27,"lineEnd":28,"link":"递归逆序一个栈","original":"[[递归逆序一个栈]]","displayText":"递归逆序一个栈"},{"lineStart":31,"lineEnd":32,"link":"数字转化为字符串的结果数","original":"[[数字转化为字符串的结果数]]","displayText":"数字转化为字符串的结果数"},{"lineStart":32,"lineEnd":33,"link":"背包能装下最多的价值","original":"[[背包能装下最多的价值]]","displayText":"背包能装下最多的价值"},{"lineStart":36,"lineEnd":37,"link":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数","original":"[[A,B玩家从左右两边拿纸牌,返回最后获胜者的分数]]","displayText":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数"},{"lineStart":37,"lineEnd":38,"link":"N皇后问题","original":"[[N皇后问题]]","displayText":"N皇后问题"},{"lineStart":53,"lineEnd":54,"link":"打印n层汉诺塔从最左边移动到最右边的全部过程","original":"[[打印n层汉诺塔从最左边移动到最右边的全部过程]]","displayText":"打印n层汉诺塔从最左边移动到最右边的全部过程"},{"lineStart":54,"lineEnd":55,"link":"打印一个字符串的全部子序列","original":"[[打印一个字符串的全部子序列]]","displayText":"打印一个字符串的全部子序列"},{"lineStart":55,"lineEnd":56,"link":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列","original":"[[打印一个字符串的全部子序列，要求不要出现重复字面值的子序列]]","displayText":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列"},{"lineStart":56,"lineEnd":57,"link":"打印一个字符串的全部排列","original":"[[打印一个字符串的全部排列]]","displayText":"打印一个字符串的全部排列"},{"lineStart":57,"lineEnd":58,"link":"打印一个字符串的全部排列，要求不要出现重复的排列","original":"[[打印一个字符串的全部排列，要求不要出现重复的排列]]","displayText":"打印一个字符串的全部排列，要求不要出现重复的排列"},{"lineStart":58,"lineEnd":59,"link":"递归逆序一个栈","original":"[[递归逆序一个栈]]","displayText":"递归逆序一个栈"},{"lineStart":59,"lineEnd":60,"link":"数字转化为字符串的结果数","original":"[[数字转化为字符串的结果数]]","displayText":"数字转化为字符串的结果数"},{"lineStart":60,"lineEnd":61,"link":"背包能装下最多的价值","original":"[[背包能装下最多的价值]]","displayText":"背包能装下最多的价值"},{"lineStart":61,"lineEnd":62,"link":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数","original":"[[A,B玩家从左右两边拿纸牌,返回最后获胜者的分数]]","displayText":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数"},{"lineStart":62,"lineEnd":63,"link":"N皇后问题","original":"[[N皇后问题]]","displayText":"N皇后问题"}],"embeds":[],"tags":[{"line":2,"tag":"#递归"},{"line":2,"tag":"#暴力递归"},{"line":2,"tag":"#从左往右的尝试模型"},{"line":2,"tag":"#范围上尝试的模型"}],"headings":[{"line":0,"heading":"暴力递归","level":1},{"line":8,"heading":"暴力递归","level":2},{"line":16,"heading":"熟悉什么叫尝试？","level":3},{"line":25,"heading":"仰望好的尝试？","level":3},{"line":30,"heading":"从左往右的尝试模型","level":3},{"line":35,"heading":"范围上尝试的模型","level":3},{"line":39,"heading":"怎么尝试一件事？","level":3},{"line":52,"heading":"本课题目","level":2}]},"8e902c2ebbb9ecbe810eb3cb936399f0451364935996a639351d2a2d5d4300d3":{"links":[{"lineStart":5,"lineEnd":8,"link":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数","original":"[[A,B玩家从左右两边拿纸牌,返回最后获胜者的分数]]","displayText":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数"},{"lineStart":5,"lineEnd":8,"link":"旋变字符串","original":"[[旋变字符串]]","displayText":"旋变字符串"},{"lineStart":5,"lineEnd":8,"link":"奇怪的打印机","original":"[[奇怪的打印机]]","displayText":"奇怪的打印机"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"范围上的尝试模型","level":1}]},"cc1df16c0ab45d3018e88db443e728c950622b0b55f56df0eae8dbedd03581e1":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#博弈论"}],"headings":[{"line":0,"heading":"小人过有鳄鱼的河","level":1}]},"fa8c44b3ce0f57e35899995306e356ac7dc0d6074f07292b56bf277b6f3d15ab":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#博弈论"}],"headings":[{"line":0,"heading":"海盗分金币问题","level":1}]},"2258f9da05b7fa9e266318bf64e699f426b2919a16e164d1d3ece0376f61554c":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#博弈论"}],"headings":[{"line":0,"heading":"欧拉信封问题","level":1}]},"c0d1ffe27ecdb9c9a3e708041f02e46007fc949aa5660dd2fb3228782c7efc37":{"links":[{"lineStart":8,"lineEnd":11,"link":"小人过有鳄鱼的河","original":"[[小人过有鳄鱼的河]]","displayText":"小人过有鳄鱼的河"},{"lineStart":8,"lineEnd":11,"link":"海盗分金币问题","original":"[[海盗分金币问题]]","displayText":"海盗分金币问题"},{"lineStart":8,"lineEnd":11,"link":"欧拉信封问题","original":"[[欧拉信封问题]]","displayText":"欧拉信封问题"}],"embeds":[],"tags":[{"line":2,"tag":"#博弈论"}],"headings":[{"line":0,"heading":"博弈论问题","level":1}]},"7cd0c6603544571498cdba3b6f5fcc75dc95ac9fa3a08163566f74da7f304998":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#TSP问题"}],"headings":[{"line":0,"heading":"TSP问题","level":1}]},"6609be3fcba6c33a8a296a676e5b7ee8917181d5860330bb95b6d9bc524b51d5":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"算法学习Tips","level":1},{"line":6,"heading":"在扣边界的时候为什么写不出来?","level":3},{"line":17,"heading":"算法学习中的注意点","level":3},{"line":27,"heading":"递归与迭代","level":3},{"line":34,"heading":"关于暴力解","level":3}]},"e1ae20d0a1d242ca5fc5ae4fde296daae42b7a5ee03229f7d153e23dc516adf3":{"links":[{"lineStart":5,"lineEnd":6,"link":"让所有咖啡杯变干净的最早完成时间","original":"[[让所有咖啡杯变干净的最早完成时间]]","displayText":"让所有咖啡杯变干净的最早完成时间"}],"embeds":[],"tags":[{"line":2,"tag":"#寻找业务限制的尝试模型"}],"headings":[{"line":0,"heading":"寻找业务限制的尝试模型","level":1}]},"0172ee60afdbc77f34610e552abea51cc6ddad32013233c88761b267cc455fb0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#红黑树"}],"headings":[{"line":0,"heading":"红黑树","level":1}]},"40adb2a50bf9357c939a769230b0e0aa036b695a8d2809e3e6c925fd73ba4c82":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#有序表"}],"headings":[{"line":0,"heading":"包含每个数组至少一个数的最窄的且开始位置最小的区间","level":1}]},"1b36ae19ffa24747dc0ac10feab117f30433308d4ccf0c1fd8b13182819165d9":{"links":[{"lineStart":4,"lineEnd":5,"link":"SB树（size-balance-tree）","original":"[[SB树（size-balance-tree）]]","displayText":"SB树（size-balance-tree）"},{"lineStart":5,"lineEnd":6,"link":"SB树（size-balance-tree）#SB树在使用时候的改进","original":"[[SB树（size-balance-tree）#SB树在使用时候的改进]]","displayText":"SB树（size-balance-tree）#SB树在使用时候的改进"},{"lineStart":6,"lineEnd":7,"link":"跳表（skiplist）","original":"[[跳表（skiplist）]]","displayText":"跳表（skiplist）"},{"lineStart":7,"lineEnd":8,"link":"红黑树","original":"[[红黑树]]","displayText":"红黑树"},{"lineStart":11,"lineEnd":12,"link":"包含每个数组至少一个数的最窄的且开始位置最小的区间","original":"[[包含每个数组至少一个数的最窄的且开始位置最小的区间]]","displayText":"包含每个数组至少一个数的最窄的且开始位置最小的区间"}],"embeds":[],"tags":[{"line":2,"tag":"#SB树"},{"line":2,"tag":"#跳表"},{"line":2,"tag":"#SkipList"},{"line":2,"tag":"#红黑树"}],"headings":[{"line":0,"heading":"SB树、跳表、红黑树","level":1}]},"4d013ce5685cbc8019c7bdf9871cdfbba97fa0aad1db60c384c74e9ac56a2248":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"327. 区间和的个数","level":1}]},"f49da04c9c96b91011db2fc8fdb113a837463ce8ca04ce0e835b5dadda5319be":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"480. 滑动窗口中位数","level":1}]},"a5da98d0fbf0708e675fe17b63198285a614f5578d1aff189f6bbf0afbc3c0ca":{"links":[{"lineStart":7,"lineEnd":8,"link":"327. 区间和的个数","original":"[[327. 区间和的个数|需要改写有序表的题目一]]","displayText":"需要改写有序表的题目一"},{"lineStart":8,"lineEnd":9,"link":"480. 滑动窗口中位数","original":"[[480. 滑动窗口中位数|需要改写有序表的题目二]]","displayText":"需要改写有序表的题目二"},{"lineStart":9,"lineEnd":10,"link":"改写有序表的题目核心点","original":"[[改写有序表的题目核心点]]","displayText":"改写有序表的题目核心点"}],"embeds":[],"tags":[{"line":2,"tag":"#有序表"}],"headings":[{"line":0,"heading":"有序表的原理、应用、扩展（二）","level":1}]},"823035b08c491abc470be1f799f61d676e713e8a9f69c23e1cb53599137ef97f":{"links":[{"lineStart":6,"lineEnd":7,"link":"327. 区间和的个数","original":"[[327. 区间和的个数]]","displayText":"327. 区间和的个数"},{"lineStart":7,"lineEnd":8,"link":"480. 滑动窗口中位数","original":"[[480. 滑动窗口中位数]]","displayText":"480. 滑动窗口中位数"}],"embeds":[],"tags":[],"headings":[]},"8765d4516ba010801cba3753b491a204afe25d2ea428bb96355a286907318b11":{"links":[{"lineStart":7,"lineEnd":8,"link":"01 认识复杂度、对数器、二分法与异或运算","original":"[[01 认识复杂度、对数器、二分法与异或运算]]","displayText":"01 认识复杂度、对数器、二分法与异或运算"},{"lineStart":8,"lineEnd":9,"link":"02 链表结构、栈、队列、递归行为、哈希表和有序表","original":"[[02 链表结构、栈、队列、递归行为、哈希表和有序表]]","displayText":"02 链表结构、栈、队列、递归行为、哈希表和有序表"},{"lineStart":9,"lineEnd":10,"link":"03 归并排序与随机快排","original":"[[03 归并排序与随机快排]]","displayText":"03 归并排序与随机快排"},{"lineStart":10,"lineEnd":11,"link":"04 比较器与堆","original":"[[04 比较器与堆]]","displayText":"04 比较器与堆"},{"lineStart":11,"lineEnd":12,"link":"05 trie、桶排序、排序总结","original":"[[05 trie、桶排序、排序总结]]","displayText":"05 trie、桶排序、排序总结"},{"lineStart":12,"lineEnd":13,"link":"06 链表相关面试题","original":"[[06 链表相关面试题]]","displayText":"06 链表相关面试题"},{"lineStart":13,"lineEnd":14,"link":"07 二叉树的基本算法","original":"[[07 二叉树的基本算法]]","displayText":"07 二叉树的基本算法"},{"lineStart":14,"lineEnd":15,"link":"08 二叉树的递归套路","original":"[[08 二叉树的递归套路]]","displayText":"08 二叉树的递归套路"},{"lineStart":15,"lineEnd":16,"link":"09 贪心算法","original":"[[09 贪心算法]]","displayText":"09 贪心算法"},{"lineStart":16,"lineEnd":17,"link":"10 并查集结构和图相关的算法","original":"[[10 并查集结构和图相关的算法]]","displayText":"10 并查集结构和图相关的算法"},{"lineStart":17,"lineEnd":18,"link":"11 暴力递归","original":"[[11 暴力递归]]","displayText":"11 暴力递归"},{"lineStart":18,"lineEnd":19,"link":"12 暴力递归到动态规划","original":"[[12 暴力递归到动态规划]]","displayText":"12 暴力递归到动态规划"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"基础班课程","level":1}]},"401aba82801907f46e88e946a8dd1c553185a1e59de56f20354dd8f74ca2da4c":{"links":[{"lineStart":0,"lineEnd":1,"link":"一根长度为K的绳子，最多能盖住几个点","original":"[[一根长度为K的绳子，最多能盖住几个点]]","displayText":"一根长度为K的绳子，最多能盖住几个点"},{"lineStart":1,"lineEnd":2,"link":"括号有效配对问题","original":"[[括号有效配对问题]]","displayText":"括号有效配对问题"},{"lineStart":2,"lineEnd":3,"link":"最长的括号有效子串的长度","original":"[[最长的括号有效子串的长度]]","displayText":"最长的括号有效子串的长度"},{"lineStart":3,"lineEnd":4,"link":"最少需要涂染几个正方形","original":"[[最少需要涂染几个正方形]]","displayText":"最少需要涂染几个正方形"},{"lineStart":4,"lineEnd":5,"link":"边框全是1的最大正方形的边长","original":"[[边框全是1的最大正方形的边长]]","displayText":"边框全是1的最大正方形的边长"},{"lineStart":5,"lineEnd":6,"link":"根据要求构造出一个长度为M的数组","original":"[[根据要求构造出一个长度为M的数组]]","displayText":"根据要求构造出一个长度为M的数组"},{"lineStart":6,"lineEnd":7,"link":"二叉树的最大路径和","original":"[[二叉树的最大路径和]]","displayText":"二叉树的最大路径和"}],"embeds":[],"tags":[],"headings":[]},"7fedc012f1f28240f77d21d350c027dd3aa87346b1688f28bf2b3036ced9e3da":{"links":[{"lineStart":5,"lineEnd":6,"link":"一根长度为K的绳子，最多能盖住几个点","original":"[[一根长度为K的绳子，最多能盖住几个点]]","displayText":"一根长度为K的绳子，最多能盖住几个点"},{"lineStart":6,"lineEnd":7,"link":"括号有效配对问题","original":"[[括号有效配对问题]]","displayText":"括号有效配对问题"},{"lineStart":7,"lineEnd":8,"link":"最长的括号有效子串的长度","original":"[[最长的括号有效子串的长度]]","displayText":"最长的括号有效子串的长度"},{"lineStart":8,"lineEnd":9,"link":"最少需要涂染几个正方形","original":"[[最少需要涂染几个正方形]]","displayText":"最少需要涂染几个正方形"},{"lineStart":9,"lineEnd":10,"link":"边框全是1的最大正方形的边长","original":"[[边框全是1的最大正方形的边长]]","displayText":"边框全是1的最大正方形的边长"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(一)","level":1}]},"e2a8904f8e082c69ea5975fbd9acc731f2740c01b5c07116799af83c47f7eba1":{"links":[{"lineStart":5,"lineEnd":6,"link":"根据要求构造出一个长度为M的数组","original":"[[根据要求构造出一个长度为M的数组]]","displayText":"根据要求构造出一个长度为M的数组"},{"lineStart":6,"lineEnd":7,"link":"二叉树的最大路径和","original":"[[二叉树的最大路径和]]","displayText":"二叉树的最大路径和"},{"lineStart":10,"lineEnd":11,"link":"使每个打包机器上的物品数量相等需要搬动的最小轮数","original":"[[使每个打包机器上的物品数量相等需要搬动的最小轮数]]","displayText":"使每个打包机器上的物品数量相等需要搬动的最小轮数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二)","level":1}]},"5a79218cd2be8713055ae1fdced3f8cc9b20f06b96d2201090aa03073b9bca62":{"links":[{"lineStart":7,"lineEnd":8,"link":"数组直方图装水","original":"[[数组直方图装水]]","displayText":"数组直方图装水"},{"lineStart":8,"lineEnd":9,"link":"二维数组直方图装水","original":"[[二维数组直方图装水]]","displayText":"二维数组直方图装水"},{"lineStart":9,"lineEnd":10,"link":"累加和为aim的所有二元组跟三元组","original":"[[累加和为aim的所有二元组跟三元组]]","displayText":"累加和为aim的所有二元组跟三元组"},{"lineStart":10,"lineEnd":11,"link":"第k小的数值对","original":"[[第k小的数值对]]","displayText":"第k小的数值对"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(三)","level":1}]},"229277d2daa7a15760892be93e1bb6aa8d2bc0ed0e978676d9869456c823433f":{"links":[{"lineStart":6,"lineEnd":7,"link":"每个人按照标准选工作后所能获得的最高报酬","original":"[[每个人按照标准选工作后所能获得的最高报酬]]","displayText":"每个人按照标准选工作后所能获得的最高报酬"},{"lineStart":7,"lineEnd":8,"link":"背包中有多少种零食放法","original":"[[背包中有多少种零食放法]]","displayText":"背包中有多少种零食放法"},{"lineStart":8,"lineEnd":9,"link":"二维数组最小路径和","original":"[[二维数组最小路径和]]","displayText":"二维数组最小路径和"},{"lineStart":9,"lineEnd":10,"link":"两个字符的最长公共子序列","original":"[[两个字符的最长公共子序列]]","displayText":"两个字符的最长公共子序列"},{"lineStart":10,"lineEnd":11,"link":"两个字符串的最长公共子串","original":"[[两个字符串的最长公共子串]]","displayText":"两个字符串的最长公共子串"},{"lineStart":11,"lineEnd":12,"link":"词频最大的前K个字符串","original":"[[词频最大的前K个字符串]]","displayText":"词频最大的前K个字符串"},{"lineStart":12,"lineEnd":13,"link":"指定结构中加入的所有字符串中，词频最大的K个","original":"[[指定结构中加入的所有字符串中，词频最大的K个]]","displayText":"指定结构中加入的所有字符串中，词频最大的K个"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(四)","level":1}]},"4f2d1d5cfaa1c6d3a6178c946d0d7fbe8318e15fce371141e28add03cec38dcd":{"links":[{"lineStart":0,"lineEnd":1,"link":"每个人按照标准选工作后所能获得的最高报酬","original":"[[每个人按照标准选工作后所能获得的最高报酬]]","displayText":"每个人按照标准选工作后所能获得的最高报酬"},{"lineStart":1,"lineEnd":2,"link":"背包中有多少种零食放法","original":"[[背包中有多少种零食放法]]","displayText":"背包中有多少种零食放法"},{"lineStart":2,"lineEnd":3,"link":"二维数组最小路径和","original":"[[二维数组最小路径和]]","displayText":"二维数组最小路径和"},{"lineStart":3,"lineEnd":4,"link":"两个字符的最长公共子序列","original":"[[两个字符的最长公共子序列]]","displayText":"两个字符的最长公共子序列"},{"lineStart":4,"lineEnd":5,"link":"两个字符串的最长公共子串","original":"[[两个字符串的最长公共子串]]","displayText":"两个字符串的最长公共子串"},{"lineStart":5,"lineEnd":6,"link":"词频最大的前K个字符串","original":"[[词频最大的前K个字符串]]","displayText":"词频最大的前K个字符串"},{"lineStart":6,"lineEnd":7,"link":"指定结构中加入的所有字符串中，词频最大的K个","original":"[[指定结构中加入的所有字符串中，词频最大的K个]]","displayText":"指定结构中加入的所有字符串中，词频最大的K个"}],"embeds":[],"tags":[],"headings":[]},"39a9af11c4ba4ab57b790f288089280283a680f96ab46622354b9ffa7fa8ff95":{"links":[{"lineStart":5,"lineEnd":6,"link":"求最大子数组异或和","original":"[[求最大子数组异或和]]","displayText":"求最大子数组异或和"},{"lineStart":6,"lineEnd":7,"link":"字符串express能有多少种组合 方式，可以达到desired的结果","original":"[[字符串express能有多少种组合 方式，可以达到desired的结果]]","displayText":"字符串express能有多少种组合 方式，可以达到desired的结果"},{"lineStart":7,"lineEnd":8,"link":"以最少的跳跃次数跳到最后一个数","original":"[[以最少的跳跃次数跳到最后一个数]]","displayText":"以最少的跳跃次数跳到最后一个数"},{"lineStart":8,"lineEnd":9,"link":"一个字符串至少切几刀,能让切出来的部分全是回文串","original":"[[一个字符串至少切几刀,能让切出来的部分全是回文串]]","displayText":"一个字符串至少切几刀,能让切出来的部分全是回文串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(八)","level":1}]},"d883b1ff01a8415de0192e2f11cdab82841235ce86a57adb05289d49a721d4d0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一个字符串至少切几刀,能让切出来的部分全是回文串","level":1}]},"2a5c81881fb84f4023d3943f9d07c58c74596ac22b0332d82ad99182d9c5056d":{"links":[{"lineStart":7,"lineEnd":8,"link":"求两个数累加和最大的前K个","original":"[[求两个数累加和最大的前K个]]","displayText":"求两个数累加和最大的前K个"},{"lineStart":8,"lineEnd":9,"link":"数组能不能分成4个相等的部分","original":"[[数组能不能分成4个相等的部分]]","displayText":"数组能不能分成4个相等的部分"},{"lineStart":9,"lineEnd":10,"link":"判断字符串aim是否是str1和str2交错组成","original":"[[判断字符串aim是否是str1和str2交错组成]]","displayText":"判断字符串aim是否是str1和str2交错组成"},{"lineStart":12,"lineEnd":13,"link":"无序数组需要排序的最短子数组长度","original":"[[无序数组需要排序的最短子数组长度]]","displayText":"无序数组需要排序的最短子数组长度"},{"lineStart":13,"lineEnd":14,"link":"返回正数数组 arr 的最小不可组成和","original":"[[返回正数数组 arr 的最小不可组成和]]","displayText":"返回正数数组 arr 的最小不可组成和"},{"lineStart":14,"lineEnd":15,"link":"想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数","original":"[[想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数]]","displayText":"想累加得 到 1~range 范围上所有的数，返回数组arr最少还缺几个数"},{"lineStart":15,"lineEnd":16,"link":"在一个字符串中找到没有重复字符子串中最长的长度","original":"[[在一个字符串中找到没有重复字符子串中最长的长度]]","displayText":"在一个字符串中找到没有重复字符子串中最长的长度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(九)","level":1}]},"7caff48e8a64727c3c8dbf1a4ed4ccdb85adbfa8ee4949ec59c49472334a53fc":{"links":[{"lineStart":6,"lineEnd":7,"link":"返回数组中，有多少个独立的域","original":"[[返回数组中，有多少个独立的域]]","displayText":"返回数组中，有多少个独立的域"},{"lineStart":7,"lineEnd":8,"link":"全是小写字母的字符串str，删除多余字符后达到字典序最小","original":"[[全是小写字母的字符串str，删除多余字符后达到字典序最小]]","displayText":"全是小写字母的字符串str，删除多余字符后达到字典序最小"},{"lineStart":8,"lineEnd":9,"link":"一条直线最多能穿过多少个点","original":"[[一条直线最多能穿过多少个点]]","displayText":"一条直线最多能穿过多少个点"},{"lineStart":11,"lineEnd":12,"link":"打怪兽需要花的最小钱数","original":"[[打怪兽需要花的最小钱数]]","displayText":"打怪兽需要花的最小钱数"},{"lineStart":12,"lineEnd":13,"link":"最少添加多少字符使字符串变为回文串","original":"[[最少添加多少字符使字符串变为回文串]]","displayText":"最少添加多少字符使字符串变为回文串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十)","level":1}]},"07509de776b1c1d566c72ecf66fb855c95589823ba494d3ae4ee8fb6fe73c5b4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最少添加多少字符使字符串变为回文串","level":1}]},"f67ec709ae3e674672ca14b0f079ef0166b140a0dcf3271c2f9450991c76ad98":{"links":[{"lineStart":6,"lineEnd":7,"link":"一种消息接收并打印的结构设计","original":"[[一种消息接收并打印的结构设计]]","displayText":"一种消息接收并打印的结构设计"},{"lineStart":7,"lineEnd":8,"link":"普通硬币跟纪念币拼出指定面值","original":"[[普通硬币跟纪念币拼出指定面值]]","displayText":"普通硬币跟纪念币拼出指定面值"},{"lineStart":8,"lineEnd":9,"link":"1~N中所有数字包含1的个数","original":"[[1~N中所有数字包含1的个数]]","displayText":"1~N中所有数字包含1的个数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十一)","level":1}]},"1aaea286c1718a0001995a185e0f03788866e9584ef26b5afdc09892d2dcf08a":{"links":[{"lineStart":7,"lineEnd":8,"link":"数组中离给定K值最近的子数组累加和","original":"[[数组中离给定K值最近的子数组累加和]]","displayText":"数组中离给定K值最近的子数组累加和"},{"lineStart":8,"lineEnd":9,"link":"二维数组中离给定K值最近的子矩阵累加和","original":"[[二维数组中离给定K值最近的子矩阵累加和]]","displayText":"二维数组中离给定K值最近的子矩阵累加和"},{"lineStart":9,"lineEnd":10,"link":"二维数组最大递增链的长度","original":"[[二维数组最大递增链的长度]]","displayText":"二维数组最大递增链的长度"},{"lineStart":10,"lineEnd":11,"link":"二维数组中可以走出的单词","original":"[[二维数组中可以走出的单词]]","displayText":"二维数组中可以走出的单词"},{"lineStart":13,"lineEnd":14,"link":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数","original":"[[给定两个字符串S和T，返回S子序列等于T的不同子序列个数]]","displayText":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十三)","level":1}]},"c45744b6baab1751326203b7e06871a6acd65cbf1ad9c03ef3e3391aae4e59f6":{"links":[{"lineStart":5,"lineEnd":6,"link":"骑士能见到公主的最少初始血量","original":"[[骑士能见到公主的最少初始血量]]","displayText":"骑士能见到公主的最少初始血量"},{"lineStart":6,"lineEnd":7,"link":"矩阵往返一次的最大路径和","original":"[[矩阵往返一次的最大路径和]]","displayText":"矩阵往返一次的最大路径和"},{"lineStart":9,"lineEnd":10,"link":"无序数组如果排序之后相邻数之间的最大差值","original":"[[无序数组如果排序之后相邻数之间的最大差值]]","displayText":"无序数组如果排序之后相邻数之间的最大差值"},{"lineStart":10,"lineEnd":11,"link":"使用单词表拼接长字符串的方法数","original":"[[使用单词表拼接长字符串的方法数]]","displayText":"使用单词表拼接长字符串的方法数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十四)","level":1}]},"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b":{"links":[],"embeds":[],"tags":[],"headings":[]},"78fd83e158926a07a9f857694c3adf3aea4559ee0a2c320f7edd5c0220056f94":{"links":[{"lineStart":6,"lineEnd":7,"link":"等累加和集合对中最大的累加和","original":"[[等累加和集合对中最大的累加和]]","displayText":"等累加和集合对中最大的累加和"},{"lineStart":7,"lineEnd":8,"link":"给定字符串中有多少个字面值不相同的子序列","original":"[[给定字符串中有多少个字面值不相同的子序列]]","displayText":"给定字符串中有多少个字面值不相同的子序列"},{"lineStart":10,"lineEnd":11,"link":"求数组调整之后的逆序对数量","original":"[[求数组调整之后的逆序对数量]]","displayText":"求数组调整之后的逆序对数量"},{"lineStart":13,"lineEnd":14,"link":"数组中最大的正方形","original":"[[数组中最大的正方形]]","displayText":"数组中最大的正方形"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十八)","level":1}]},"4728ee8ce4a8595a693ad0a1a2b12d702de7902f0a4e9d1bb763a927095dd3bf":{"links":[{"lineStart":5,"lineEnd":6,"link":"求二叉树路径累加和为K是最长路径的节点数","original":"[[求二叉树路径累加和为K是最长路径的节点数]]","displayText":"求二叉树路径累加和为K是最长路径的节点数"},{"lineStart":6,"lineEnd":7,"link":"找到数组中只出现1次的数","original":"[[找到数组中只出现1次的数]]","displayText":"找到数组中只出现1次的数"},{"lineStart":7,"lineEnd":8,"link":"数组中出现次数超过一半及超过N除K的数","original":"[[数组中出现次数超过一半及超过N除K的数]]","displayText":"数组中出现次数超过一半及超过N除K的数"},{"lineStart":9,"lineEnd":11,"link":"喝咖啡问题","original":"[[喝咖啡问题]]","displayText":"喝咖啡问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十五)","level":1}]},"bfe23bb9381c6c4513b19518d0a03b4870da9986ecbda8ce52378cc59d23f5e9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"喝咖啡问题","level":1}]},"33155176ba49b82a68ab5d01502b8c011b9bab18e489e7c9ea4ed1ba4cb57b75":{"links":[{"lineStart":7,"lineEnd":8,"link":"两个有序数组中最大的k个数","original":"[[两个有序数组中最大的k个数]]","displayText":"两个有序数组中最大的k个数"},{"lineStart":12,"lineEnd":13,"link":"约瑟夫环","original":"[[约瑟夫环]]","displayText":"约瑟夫环"},{"lineStart":14,"lineEnd":15,"link":"约瑟夫环拓展","original":"[[约瑟夫环拓展]]","displayText":"约瑟夫环拓展"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十六)","level":1},{"line":12,"heading":"[[约瑟夫环]]","level":2}]},"75130dca146ca7799b42e0374e644f270b55accc0c31127308c1bb595ada00fb":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#约瑟夫环"}],"headings":[{"line":0,"heading":"约瑟夫环拓展","level":1}]},"434a8cf0f47097fb3c9e137233fe5f0fc6582c844efe1d3fdb1cb77541bfa52a":{"links":[{"lineStart":6,"lineEnd":7,"link":"大楼最高点变化的轮廓线","original":"[[大楼最高点变化的轮廓线]]","displayText":"大楼最高点变化的轮廓线"},{"lineStart":7,"lineEnd":8,"link":"Nim博弈问题","original":"[[Nim博弈问题]]","displayText":"Nim博弈问题"},{"lineStart":8,"lineEnd":9,"link":"乘客坐船使用的最少船数","original":"[[乘客坐船使用的最少船数]]","displayText":"乘客坐船使用的最少船数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十七)","level":1}]},"b0135dccc57d655d2770f1e37b920e65f6b61ea18128924f572f83365e3814ee":{"links":[{"lineStart":0,"lineEnd":1,"link":"最长回文子序列长度","original":"[[最长回文子序列长度]]","displayText":"最长回文子序列长度"},{"lineStart":1,"lineEnd":2,"link":"蛇走的轨迹问题","original":"[[蛇走的轨迹问题]]","displayText":"蛇走的轨迹问题"},{"lineStart":2,"lineEnd":3,"link":"计算str表达式结果","original":"[[计算str表达式结果]]","displayText":"计算str表达式结果"},{"lineStart":3,"lineEnd":4,"link":"子序列回文","original":"[[子序列回文]]","displayText":"子序列回文"}],"embeds":[],"tags":[],"headings":[]},"1d0edb4e43504cca1173fc100d326cca179d54b541c081fbf4b4815cb2dc02ec":{"links":[{"lineStart":5,"lineEnd":6,"link":"最长回文子序列长度","original":"[[最长回文子序列长度]]","displayText":"最长回文子序列长度"},{"lineStart":6,"lineEnd":7,"link":"蛇走的轨迹问题","original":"[[蛇走的轨迹问题]]","displayText":"蛇走的轨迹问题"},{"lineStart":7,"lineEnd":8,"link":"计算str表达式结果","original":"[[计算str表达式结果]]","displayText":"计算str表达式结果"},{"lineStart":8,"lineEnd":9,"link":"子序列回文","original":"[[子序列回文]]","displayText":"子序列回文"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十八)","level":1}]},"3d5e5ef5bfa2fbb6bd7657972f41381373b6794bcb63e2a06ec2290e99652872":{"links":[{"lineStart":0,"lineEnd":1,"link":"给定一个正整数n, 求裂开的方法数","original":"[[给定一个正整数n, 求裂开的方法数]]","displayText":"给定一个正整数n, 求裂开的方法数"},{"lineStart":1,"lineEnd":2,"link":"求1~N所有数字排列中,等于指定K个逆序对数的排列数","original":"[[求1~N所有数字排列中,等于指定K个逆序对数的排列数]]","displayText":"求1~N所有数字排列中,等于指定K个逆序对数的排列数"},{"lineStart":2,"lineEnd":3,"link":"求二叉树中复合BST的最大拓扑结构的大小","original":"[[求二叉树中复合BST的最大拓扑结构的大小]]","displayText":"求二叉树中复合BST的最大拓扑结构的大小"},{"lineStart":3,"lineEnd":4,"link":"将长度为2N数组的前半跟后半数组每个数交替","original":"[[将长度为2N数组的前半跟后半数组每个数交替]]","displayText":"将长度为2N数组的前半跟后半数组每个数交替"}],"embeds":[],"tags":[],"headings":[]},"e8177db4395457d867d2b5c769aa3cc316483fee21d1c456e7e6fa2c44367294":{"links":[{"lineStart":6,"lineEnd":7,"link":"给定一个正整数n, 求裂开的方法数","original":"[[给定一个正整数n, 求裂开的方法数]]","displayText":"给定一个正整数n, 求裂开的方法数"},{"lineStart":7,"lineEnd":8,"link":"求1~N所有数字排列中,等于指定K个逆序对数的排列数","original":"[[求1~N所有数字排列中,等于指定K个逆序对数的排列数]]","displayText":"求1~N所有数字排列中,等于指定K个逆序对数的排列数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十九)","level":1}]},"873a476181af223fabb65ea2cd51ad9c8855bb2e7e08c5d8c316bfbcbde64560":{"links":[{"lineStart":5,"lineEnd":6,"link":"求二叉树中复合BST的最大拓扑结构的大小","original":"[[求二叉树中复合BST的最大拓扑结构的大小]]","displayText":"求二叉树中复合BST的最大拓扑结构的大小"},{"lineStart":6,"lineEnd":7,"link":"将长度为2N数组的前半跟后半数组每个数交替","original":"[[将长度为2N数组的前半跟后半数组每个数交替]]","displayText":"将长度为2N数组的前半跟后半数组每个数交替"},{"lineStart":10,"lineEnd":11,"link":"能够互相看见环形山的对数","original":"[[能够互相看见环形山的对数]]","displayText":"能够互相看见环形山的对数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十)","level":1}]},"1e1474293f854ff5fea64f345fbff43d1ea477a958de0d9d5dd86e796bb46207":{"links":[{"lineStart":6,"lineEnd":7,"link":"调整BST中错误的两个节点","original":"[[调整BST中错误的两个节点]]","displayText":"调整BST中错误的两个节点"},{"lineStart":7,"lineEnd":8,"link":"非负数组子序列中累加和%m的最大值","original":"[[非负数组子序列中累加和%m的最大值]]","displayText":"非负数组子序列中累加和%m的最大值"},{"lineStart":8,"lineEnd":9,"link":"项目经理和程序员","original":"[[项目经理和程序员]]","displayText":"项目经理和程序员"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十一)","level":1}]},"b6dfd7193fcea3bc014415f3d50dbdfd00dd9bd80def44a742545d9fe556c1f5":{"links":[{"lineStart":6,"lineEnd":7,"link":"字符串匹配问题","original":"[[字符串匹配问题]]","displayText":"字符串匹配问题"},{"lineStart":7,"lineEnd":8,"link":"自由之路","original":"[[自由之路]]","displayText":"自由之路"},{"lineStart":8,"lineEnd":9,"link":"打气球的最大分数","original":"[[打气球的最大分数]]","displayText":"打气球的最大分数"},{"lineStart":9,"lineEnd":10,"link":"汉诺塔游戏的最佳状态","original":"[[汉诺塔游戏的最佳状态]]","displayText":"汉诺塔游戏的最佳状态"},{"lineStart":10,"lineEnd":11,"link":"合并相邻K个数字的最小代价","original":"[[合并相邻K个数字的最小代价]]","displayText":"合并相邻K个数字的最小代价"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十二)","level":1}]},"7434e351946884b368d4b324406ae43f0459538ef026f0ab8427ffe8eb9db46a":{"links":[{"lineStart":6,"lineEnd":7,"link":"求字符串str1的子串中含有str2所有字符的最小子串长度","original":"[[求字符串str1的子串中含有str2所有字符的最小子串长度]]","displayText":"求字符串str1的子串中含有str2所有字符的最小子串长度"},{"lineStart":7,"lineEnd":8,"link":"旋变字符串","original":"[[旋变字符串]]","displayText":"旋变字符串"},{"lineStart":8,"lineEnd":9,"link":"良好出发点的加油站","original":"[[良好出发点的加油站]]","displayText":"良好出发点的加油站"},{"lineStart":9,"lineEnd":10,"link":"LFU内存替换算法的实现","original":"[[LFU内存替换算法的实现]]","displayText":"LFU内存替换算法的实现"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十三)","level":1}]},"66ca732e729e1225aa0e82f3a1a470839abf7a6f2ce618131a3af039233aa7a6":{"links":[{"lineStart":6,"lineEnd":7,"link":"数组最大的三子数组的最大和","original":"[[数组最大的三子数组的最大和]]","displayText":"数组最大的三子数组的最大和"},{"lineStart":7,"lineEnd":8,"link":"分糖果问题","original":"[[分糖果问题]]","displayText":"分糖果问题"},{"lineStart":8,"lineEnd":9,"link":"二叉树放置照相机","original":"[[二叉树放置照相机]]","displayText":"二叉树放置照相机"},{"lineStart":9,"lineEnd":10,"link":"距离首都距离","original":"[[距离首都距离]]","displayText":"距离首都距离"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十四)","level":1}]},"447d3849713e4601f6068e451bbd992808d939f80fd8a6c7d70bec21f721f51a":{"links":[{"lineStart":12,"lineEnd":13,"link":"邮局选址问题","original":"[[邮局选址问题]]","displayText":"邮局选址问题"}],"embeds":[],"tags":[{"line":2,"tag":"#四边形不等式优化"}],"headings":[{"line":0,"heading":"动态规划中的四边形不等式优化","level":1},{"line":10,"heading":"题目","level":2}]},"4d30d83c02ba25ceb42c54e63436a2da5ebd75e3d4d3a7a127040195b7c50b77":{"links":[],"embeds":[],"tags":[],"headings":[]},"3e5ac2b0e7f0e23165d072891be172cce8743d12d4a231aaea225000938b599d":{"links":[{"lineStart":6,"lineEnd":7,"link":"移除盒子","original":"[[移除盒子]]","displayText":"移除盒子"},{"lineStart":7,"lineEnd":8,"link":"奇怪的打印机","original":"[[奇怪的打印机]]","displayText":"奇怪的打印机"},{"lineStart":8,"lineEnd":9,"link":"最小区间","original":"[[最小区间]]","displayText":"最小区间"},{"lineStart":9,"lineEnd":10,"link":"还原数组丢失的数字","original":"[[还原数组丢失的数字]]","displayText":"还原数组丢失的数字"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(三十一)","level":1}]},"8aaed9f1b72e56ecfb554874ca5bddcd6850dcc06f4824d1858987ac8278c12d":{"links":[{"lineStart":4,"lineEnd":5,"link":"AC自动机","original":"[[AC自动机]]","displayText":"AC自动机"}],"embeds":[],"tags":[{"line":2,"tag":"#AC自动机"}],"headings":[{"line":0,"heading":"AC自动机","level":1}]},"7a0d40dd0748b7bc9e8c23a4506b55e9ef5ba9e4edb3eee7c0e84f69b1bfb3f0":{"links":[{"lineStart":5,"lineEnd":6,"link":"最大可整合子数组的长度","original":"[[最大可整合子数组的长度]]","displayText":"最大可整合子数组的长度"},{"lineStart":8,"lineEnd":9,"link":"卡特兰数","original":"[[卡特兰数]]","displayText":"卡特兰数"},{"lineStart":9,"lineEnd":10,"link":"卡特兰数题目一","original":"[[卡特兰数题目一]]","displayText":"卡特兰数题目一"},{"lineStart":10,"lineEnd":11,"link":"卡特兰数题目二","original":"[[卡特兰数题目二]]","displayText":"卡特兰数题目二"},{"lineStart":11,"lineEnd":12,"link":"卡特兰数#卡特兰数的算法原型在做题时怎么发现？","original":"[[卡特兰数#卡特兰数的算法原型在做题时怎么发现？]]","displayText":"卡特兰数#卡特兰数的算法原型在做题时怎么发现？"},{"lineStart":28,"lineEnd":29,"link":"只做一次交易买卖股票的最大钱数","original":"[[只做一次交易买卖股票的最大钱数]]","displayText":"只做一次交易买卖股票的最大钱数"},{"lineStart":29,"lineEnd":30,"link":"多次交易买卖股票的最大钱数","original":"[[多次交易买卖股票的最大钱数]]","displayText":"多次交易买卖股票的最大钱数"},{"lineStart":30,"lineEnd":31,"link":"最多K次交易买卖股票的最大钱数","original":"[[最多K次交易买卖股票的最大钱数]]","displayText":"最多K次交易买卖股票的最大钱数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(十二)","level":1},{"line":8,"heading":"[[卡特兰数]]","level":2}]},"64c0076ba6b64dcdf9219d5e57dce29fdbd3eca6795618efcf3be0f2fcd40ad5":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"后缀数组DC3算法实现代码","level":1}]},"b2f62612ff12c28fb4f3ccbaf46625ebd9fdfc21cfc155f14c4ac8dceb291e30":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"三人赛跑, 得第二三名的概率","level":1}]},"54fdc8165c40b97ee432b46b4dd264bf40b5b309d2fb1bad94c4bcdb9bb4c279":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"圆环上随机取3个点组成一个锐角,钝角,直角三角形的概率","level":1}]},"5b5d6488a8c63f7624587489fd7bd740222d05555b644debbf9b589ec2b9f611":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"随机在圆上生成n个点,这n个点在同一半圆的概率是多少?","level":1}]},"da35fe9629d7860cf2a8e7bfa3f9d8a4de6576bb3a4180cfbecd714c1f468cb7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"64匹马，8个赛道，找出跑得最快的4匹马，至少比赛几场？","level":1}]},"3e79138dc6edb0e06889b1510a7db754360a44b01fff3e4d065cb4016ee60b2a":{"links":[{"lineStart":7,"lineEnd":8,"link":"寻找回文串","original":"[[寻找回文串]]","displayText":"寻找回文串"},{"lineStart":8,"lineEnd":9,"link":"无序数组中最长的连续序列的长度","original":"[[无序数组中最长的连续序列的长度]]","displayText":"无序数组中最长的连续序列的长度"},{"lineStart":9,"lineEnd":10,"link":"二叉树节点间最近公共祖先的批量查询问题","original":"[[二叉树节点间最近公共祖先的批量查询问题]]","displayText":"二叉树节点间最近公共祖先的批量查询问题"},{"lineStart":10,"lineEnd":11,"link":"全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1","original":"[[全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1]]","displayText":"全是1的所有子矩阵中，含有最多1的子矩阵中，含有几个1"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十九)","level":1}]},"75f853917757777a064a202f5f62f941a9d3d7244ee385a47ab1d2962063cd90":{"links":[{"lineStart":7,"lineEnd":8,"link":"后缀数组","original":"[[后缀数组]]","displayText":"后缀数组"},{"lineStart":8,"lineEnd":9,"link":"在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字","original":"[[在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字]]","displayText":"在两个给定整形数组中从左往右挑选K个数的所有结果中的最大数字"},{"lineStart":13,"lineEnd":14,"link":"算法课练习小题","original":"[[算法课练习小题]]","displayText":"算法课练习小题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(三十二)","level":1},{"line":11,"heading":"练习题","level":2}]},"636aea1692224b22ba5c6f86cb0e8294d7e9ad544a00de7f3257abf365d1bdef":{"links":[{"lineStart":4,"lineEnd":5,"link":"TSP问题","original":"[[TSP问题 ]]","displayText":"TSP问题"},{"lineStart":5,"lineEnd":6,"link":"贴瓷砖问题","original":"[[贴瓷砖问题]]","displayText":"贴瓷砖问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(三十)","level":1}]},"bd3acdaa4f30d09723457ed8ccc9b7496132b0e0d5798686277614db65fdd440":{"links":[{"lineStart":5,"lineEnd":6,"link":"牛牛分田地","original":"[[牛牛分田地]]","displayText":"牛牛分田地"},{"lineStart":6,"lineEnd":7,"link":"粘在天花板上的数字与炸弹","original":"[[粘在天花板上的数字与炸弹]]","displayText":"粘在天花板上的数字与炸弹"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十七)","level":1}]},"febcbd3c2f8aca5b73d804dcbb240cd86caf14b5d7a09b7885222d30bb16e05d":{"links":[{"lineStart":5,"lineEnd":6,"link":"距离首都距离","original":"[[距离首都距离]]","displayText":"距离首都距离"},{"lineStart":9,"lineEnd":10,"link":"动态规划中的四边形不等式优化","original":"[[动态规划中的四边形不等式优化]]","displayText":"动态规划中的四边形不等式优化"},{"lineStart":11,"lineEnd":12,"link":"邮局选址问题","original":"[[邮局选址问题]]","displayText":"邮局选址问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十五)","level":1},{"line":9,"heading":"[[动态规划中的四边形不等式优化]]","level":2}]},"91c5dc9496a1178e5eafa8732c232ca47023332f29f0079a86e9991cd4076604":{"links":[{"lineStart":4,"lineEnd":5,"link":"动态规划中的四边形不等式优化","original":"[[动态规划中的四边形不等式优化]]","displayText":"动态规划中的四边形不等式优化"},{"lineStart":6,"lineEnd":7,"link":"邮局选址问题","original":"[[邮局选址问题]]","displayText":"邮局选址问题"},{"lineStart":12,"lineEnd":13,"link":"画匠问题","original":"[[画匠问题]]","displayText":"画匠问题"},{"lineStart":13,"lineEnd":14,"link":"丢棋子问题","original":"[[丢棋子问题]]","displayText":"丢棋子问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(二十六)","level":1},{"line":4,"heading":"[[动态规划中的四边形不等式优化]]","level":2}]},"def86f49050b9275d52e1aebdb660c8174887eae7b6f5dd3f4e849bd94a8eaf7":{"links":[],"embeds":[{"lineStart":21,"lineEnd":22,"link":"Pasted image 15.png","original":"![[Pasted image 15.png]]","displayText":"Pasted image 15.png"}],"tags":[{"line":2,"tag":"#哈希函数"},{"line":2,"tag":"#布隆过滤器"}],"headings":[{"line":0,"heading":"布隆过滤器","level":1},{"line":14,"heading":"布隆过滤器重要的三个公式","level":2}]},"6966124ca374d34aa809ef70672101cc589f6e034537a3900c23f8c3792f813f":{"links":[{"lineStart":4,"lineEnd":5,"link":"Morris遍历","original":"[[Morris遍历]]","displayText":"Morris遍历"},{"lineStart":6,"lineEnd":7,"link":"Trie数 or 前缀树 or 字典树","original":"[[Trie数 or 前缀树 or 字典树]]","displayText":"Trie数 or 前缀树 or 字典树"},{"lineStart":8,"lineEnd":9,"link":"KMP算法","original":"[[KMP算法]]","displayText":"KMP算法"},{"lineStart":10,"lineEnd":11,"link":"Manacher算法","original":"[[Manacher算法]]","displayText":"Manacher算法"},{"lineStart":12,"lineEnd":13,"link":"图的统一表述结构","original":"[[图的统一表述结构]]","displayText":"图的统一表述结构"},{"lineStart":14,"lineEnd":15,"link":"并查集","original":"[[并查集]]","displayText":"并查集"},{"lineStart":16,"lineEnd":17,"link":"LRU内存替换算法的实现","original":"[[LRU内存替换算法的实现]]","displayText":"LRU内存替换算法的实现"},{"lineStart":17,"lineEnd":18,"link":"LFU内存替换算法的实现","original":"[[LFU内存替换算法的实现]]","displayText":"LFU内存替换算法的实现"},{"lineStart":19,"lineEnd":20,"link":"线段树","original":"[[线段树]]","displayText":"线段树"},{"lineStart":21,"lineEnd":22,"link":"SB树（size-balance-tree）","original":"[[SB树（size-balance-tree）]]","displayText":"SB树（size-balance-tree）"},{"lineStart":23,"lineEnd":25,"link":"跳表（skiplist）","original":"[[跳表（skiplist）]]","displayText":"跳表（skiplist）"},{"lineStart":26,"lineEnd":27,"link":"AC自动机","original":"[[AC自动机]]","displayText":"AC自动机"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"高级数据结构及算法","level":1}]},"2bdc090f52dbb28c6a7298dd9acb49ce574ae40d5d7912a05da6e269c51a7e07":{"links":[{"lineStart":7,"lineEnd":8,"link":"一根长度为K的绳子，最多能盖住几个点","original":"[[一根长度为K的绳子，最多能盖住几个点]]","displayText":"一根长度为K的绳子，最多能盖住几个点"}],"embeds":[],"tags":[{"line":2,"tag":"#单调性"}],"headings":[{"line":0,"heading":"利用单调性优化","level":1}]},"7d13107436218da2e380663228813197d8cb25ffc9864506050b083b595747f0":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#贪心"},{"line":2,"tag":"#单调性"}],"headings":[{"line":0,"heading":"一根长度为K的绳子，最多能盖住几个点","level":1}]},"8089d58ea0045c3590e54886f733860e3b49170d4ed940537dcadfc819733eaf":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最大嵌套的括号层数","level":1}]},"0a889e191db92b6950d7ae7473d51f89666ac683d0f19c3de51b36aa8fdd4abc":{"links":[{"lineStart":6,"lineEnd":7,"link":"多次交易买卖股票的最大钱数","original":"[[多次交易买卖股票的最大钱数]]","displayText":"多次交易买卖股票的最大钱数"},{"lineStart":7,"lineEnd":8,"link":"只做一次交易买卖股票的最大钱数","original":"[[只做一次交易买卖股票的最大钱数]]","displayText":"只做一次交易买卖股票的最大钱数"},{"lineStart":8,"lineEnd":9,"link":"最多K次交易买卖股票的最大钱数","original":"[[最多K次交易买卖股票的最大钱数]]","displayText":"最多K次交易买卖股票的最大钱数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"股票问题三连","level":1}]},"5e274b5c258a770e0902bf214bfe5740cb4bafcf4bc14f435a155c064203f605":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"括号有效配对问题","level":1},{"line":12,"heading":"添加字符让括号整体有效","level":2}]},"dcbaee17d6672fecbdb7476074d11ed75c9a3afaec9606bc939f372f6ff694a2":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一个N* N的矩阵, 内部长方形, 正方形的数量","level":1}]},"bfafacdcb50a576034313eb8f7b64f20304455322d9b05100e6e1292eec370d0":{"links":[{"lineStart":4,"lineEnd":5,"link":"最少需要涂染几个正方形","original":"[[最少需要涂染几个正方形]]","displayText":"最少需要涂染几个正方形"},{"lineStart":5,"lineEnd":6,"link":"边框全是1的最大正方形的边长","original":"[[边框全是1的最大正方形的边长]]","displayText":"边框全是1的最大正方形的边长"},{"lineStart":6,"lineEnd":7,"link":"长方形中任意矩阵的累加和","original":"[[长方形中任意矩阵的累加和]]","displayText":"长方形中任意矩阵的累加和"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"预处理数组","level":1}]},"8d9586498f586e6005128e4cda11255cd4068db3bea594f1c347c3f46d3d2b71":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"根据要求构造出一个长度为M的数组","level":1}]},"fa95425e1dc494e692ae2530e69b97cbee9892637784ff30afcb060f00bc3b02":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(7)","level":1}]},"a0b15a16d39358a15f6c5aca326774d5f111aa6578d0972cb0b018dfee6c0ea4":{"links":[{"lineStart":9,"lineEnd":10,"link":"经典面试题目1","original":"[[经典面试题目1]]","displayText":"经典面试题目1"},{"lineStart":9,"lineEnd":10,"link":"训练营第3期/第1节","original":"[[训练营第3期/第1节]]","displayText":"训练营第3期/第1节"},{"lineStart":10,"lineEnd":11,"link":"经典面试题目2","original":"[[经典面试题目2]]","displayText":"经典面试题目2"},{"lineStart":10,"lineEnd":11,"link":"训练营第3期/第2节","original":"[[训练营第3期/第2节]]","displayText":"训练营第3期/第2节"},{"lineStart":11,"lineEnd":12,"link":"经典面试题目3","original":"[[经典面试题目3]]","displayText":"经典面试题目3"},{"lineStart":11,"lineEnd":12,"link":"训练营第3期/第2节","original":"[[训练营第3期/第2节]]","displayText":"训练营第3期/第2节"},{"lineStart":12,"lineEnd":13,"link":"经典面试题目4","original":"[[经典面试题目4]]","displayText":"经典面试题目4"},{"lineStart":12,"lineEnd":13,"link":"训练营第3期/第3节","original":"[[训练营第3期/第3节]]","displayText":"训练营第3期/第3节"},{"lineStart":15,"lineEnd":16,"link":"经典面试题目5","original":"[[经典面试题目5]]","displayText":"经典面试题目5"},{"lineStart":15,"lineEnd":16,"link":"训练营第3期/第4节","original":"[[训练营第3期/第4节]]","displayText":"训练营第3期/第4节"},{"lineStart":16,"lineEnd":17,"link":"经典面试题目6","original":"[[经典面试题目6]]","displayText":"经典面试题目6"},{"lineStart":16,"lineEnd":17,"link":"训练营第3期/第4节","original":"[[训练营第3期/第4节]]","displayText":"训练营第3期/第4节"},{"lineStart":20,"lineEnd":21,"link":"经典面试题目7","original":"[[经典面试题目7]]","displayText":"经典面试题目7"},{"lineStart":20,"lineEnd":21,"link":"训练营第3期/第5节","original":"[[训练营第3期/第5节]]","displayText":"训练营第3期/第5节"},{"lineStart":21,"lineEnd":22,"link":"经典面试题目8","original":"[[经典面试题目8]]","displayText":"经典面试题目8"},{"lineStart":21,"lineEnd":22,"link":"训练营第3期/第6节","original":"[[训练营第3期/第6节]]","displayText":"训练营第3期/第6节"},{"lineStart":22,"lineEnd":23,"link":"经典面试题目9","original":"[[经典面试题目9]]","displayText":"经典面试题目9"},{"lineStart":22,"lineEnd":23,"link":"训练营第3期/第6节","original":"[[训练营第3期/第6节]]","displayText":"训练营第3期/第6节"},{"lineStart":22,"lineEnd":23,"link":"训练营第3期/第7节","original":"[[训练营第3期/第7节]]","displayText":"训练营第3期/第7节"},{"lineStart":23,"lineEnd":24,"link":"经典面试题目10","original":"[[经典面试题目10]]","displayText":"经典面试题目10"},{"lineStart":23,"lineEnd":24,"link":"训练营第3期/第7节","original":"[[训练营第3期/第7节]]","displayText":"训练营第3期/第7节"},{"lineStart":23,"lineEnd":24,"link":"训练营第3期/第8节","original":"[[训练营第3期/第8节]]","displayText":"训练营第3期/第8节"},{"lineStart":28,"lineEnd":29,"link":"经典面试题目11","original":"[[经典面试题目11]]","displayText":"经典面试题目11"},{"lineStart":28,"lineEnd":29,"link":"训练营第3期/第8节","original":"[[训练营第3期/第8节]]","displayText":"训练营第3期/第8节"},{"lineStart":29,"lineEnd":31,"link":"经典面试题目12","original":"[[经典面试题目12]]","displayText":"经典面试题目12"},{"lineStart":29,"lineEnd":31,"link":"训练营第3期/第8节","original":"[[训练营第3期/第8节]]","displayText":"训练营第3期/第8节"},{"lineStart":29,"lineEnd":31,"link":"卡特兰数","original":"[[卡特兰数]]","displayText":"卡特兰数"},{"lineStart":29,"lineEnd":31,"link":"训练营第4期/第2节","original":"[[训练营第4期/第2节]]","displayText":"训练营第4期/第2节"},{"lineStart":31,"lineEnd":33,"link":"经典面试题目13","original":"[[经典面试题目13]]","displayText":"经典面试题目13"},{"lineStart":31,"lineEnd":33,"link":"训练营第4期/第1节","original":"[[训练营第4期/第1节]]","displayText":"训练营第4期/第1节"},{"lineStart":31,"lineEnd":33,"link":"训练营第4期/第2节","original":"[[训练营第4期/第2节]]","displayText":"训练营第4期/第2节"},{"lineStart":33,"lineEnd":35,"link":"经典面试题目14","original":"[[经典面试题目14]]","displayText":"经典面试题目14"},{"lineStart":33,"lineEnd":35,"link":"训练营第4期/第2节","original":"[[训练营第4期/第2节]]","displayText":"训练营第4期/第2节"},{"lineStart":33,"lineEnd":35,"link":"训练营第4期/第3节","original":"[[训练营第4期/第3节]]","displayText":"训练营第4期/第3节"},{"lineStart":43,"lineEnd":44,"link":"经典面试题目15","original":"[[经典面试题目15]]","displayText":"经典面试题目15"},{"lineStart":43,"lineEnd":44,"link":"训练营第4期/第3节","original":"[[训练营第4期/第3节]]","displayText":"训练营第4期/第3节"},{"lineStart":44,"lineEnd":45,"link":"经典面试题目16","original":"[[经典面试题目16]]","displayText":"经典面试题目16"},{"lineStart":44,"lineEnd":45,"link":"训练营第4期/第4节","original":"[[训练营第4期/第4节]]","displayText":"训练营第4期/第4节"},{"lineStart":45,"lineEnd":46,"link":"经典面试题目17","original":"[[经典面试题目17]]","displayText":"经典面试题目17"},{"lineStart":45,"lineEnd":46,"link":"训练营第4期/第4节","original":"[[训练营第4期/第4节]]","displayText":"训练营第4期/第4节"},{"lineStart":46,"lineEnd":47,"link":"经典面试题目18","original":"[[经典面试题目18]]","displayText":"经典面试题目18"},{"lineStart":46,"lineEnd":47,"link":"训练营第4期/第5节","original":"[[训练营第4期/第5节]]","displayText":"训练营第4期/第5节"},{"lineStart":50,"lineEnd":51,"link":"经典面试题目19","original":"[[经典面试题目19]]","displayText":"经典面试题目19"},{"lineStart":50,"lineEnd":51,"link":"训练营第4期/第5节","original":"[[训练营第4期/第5节]]","displayText":"训练营第4期/第5节"},{"lineStart":51,"lineEnd":53,"link":"经典面试题目20","original":"[[经典面试题目20]]","displayText":"经典面试题目20"},{"lineStart":51,"lineEnd":53,"link":"训练营第4期/第6节","original":"[[训练营第4期/第6节]]","displayText":"训练营第4期/第6节"},{"lineStart":51,"lineEnd":53,"link":"训练营第4期/第7节","original":"[[训练营第4期/第7节]]","displayText":"训练营第4期/第7节"},{"lineStart":53,"lineEnd":54,"link":"经典面试题目21","original":"[[经典面试题目21]]","displayText":"经典面试题目21"},{"lineStart":53,"lineEnd":54,"link":"训练营第4期/第7节","original":"[[训练营第4期/第7节]]","displayText":"训练营第4期/第7节"},{"lineStart":54,"lineEnd":55,"link":"经典面试题目22","original":"[[经典面试题目22]]","displayText":"经典面试题目22"},{"lineStart":54,"lineEnd":55,"link":"训练营第4期/第8节","original":"[[训练营第4期/第8节]]","displayText":"训练营第4期/第8节"},{"lineStart":63,"lineEnd":64,"link":"经典面试题目23","original":"[[经典面试题目23]]","displayText":"经典面试题目23"},{"lineStart":63,"lineEnd":64,"link":"训练营第5期/第1节","original":"[[训练营第5期/第1节]]","displayText":"训练营第5期/第1节"},{"lineStart":64,"lineEnd":65,"link":"经典面试题目24","original":"[[经典面试题目24]]","displayText":"经典面试题目24"},{"lineStart":64,"lineEnd":65,"link":"训练营第5期/第2节","original":"[[训练营第5期/第2节]]","displayText":"训练营第5期/第2节"},{"lineStart":65,"lineEnd":66,"link":"经典面试题目25","original":"[[经典面试题目25]]","displayText":"经典面试题目25"},{"lineStart":65,"lineEnd":66,"link":"训练营第5期/第3节","original":"[[训练营第5期/第3节]]","displayText":"训练营第5期/第3节"},{"lineStart":66,"lineEnd":67,"link":"经典面试题目26","original":"[[经典面试题目26]]","displayText":"经典面试题目26"},{"lineStart":66,"lineEnd":67,"link":"训练营第5期/第4节","original":"[[训练营第5期/第4节]]","displayText":"训练营第5期/第4节"},{"lineStart":70,"lineEnd":71,"link":"经典面试题目27","original":"[[经典面试题目27]]","displayText":"经典面试题目27"},{"lineStart":70,"lineEnd":71,"link":"训练营第5期/第3节","original":"[[训练营第5期/第3节]]","displayText":"训练营第5期/第3节"},{"lineStart":71,"lineEnd":73,"link":"经典面试题目28","original":"[[经典面试题目28]]","displayText":"经典面试题目28"},{"lineStart":71,"lineEnd":73,"link":"训练营第5期/第3节","original":"[[训练营第5期/第3节]]","displayText":"训练营第5期/第3节"},{"lineStart":71,"lineEnd":73,"link":"训练营第5期/第4节","original":"[[训练营第5期/第4节]]","displayText":"训练营第5期/第4节"},{"lineStart":73,"lineEnd":74,"link":"经典面试题目29","original":"[[经典面试题目29]]","displayText":"经典面试题目29"},{"lineStart":73,"lineEnd":74,"link":"训练营第5期/第5节","original":"[[训练营第5期/第5节]]","displayText":"训练营第5期/第5节"},{"lineStart":74,"lineEnd":75,"link":"经典面试题目30","original":"[[经典面试题目30]]","displayText":"经典面试题目30"},{"lineStart":74,"lineEnd":75,"link":"训练营第5期/第7节","original":"[[训练营第5期/第7节]]","displayText":"训练营第5期/第7节"},{"lineStart":79,"lineEnd":80,"link":"经典面试题目31","original":"[[经典面试题目31]]","displayText":"经典面试题目31"},{"lineStart":79,"lineEnd":80,"link":"训练营第5期/第6节","original":"[[训练营第5期/第6节]]","displayText":"训练营第5期/第6节"},{"lineStart":80,"lineEnd":81,"link":"经典面试题目32","original":"[[经典面试题目32]]","displayText":"经典面试题目32"},{"lineStart":80,"lineEnd":81,"link":"训练营第5期/第6节","original":"[[训练营第5期/第6节]]","displayText":"训练营第5期/第6节"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"进阶班Schedule","level":1},{"line":6,"heading":"训练营第三期","level":2},{"line":8,"heading":"Week 0620~0621","level":3},{"line":14,"heading":"Week 0627~0627","level":3},{"line":18,"heading":"Week 0704~0705","level":3},{"line":26,"heading":"Week 0711~0712","level":3},{"line":39,"heading":"训练营第四期","level":2},{"line":41,"heading":"Week 0718~0719","level":3},{"line":49,"heading":"Week 0725~0726","level":3},{"line":60,"heading":"训练营第五期","level":2},{"line":62,"heading":"Week 0801~0801","level":3},{"line":69,"heading":"Week 0808~0809","level":3},{"line":78,"heading":"Week 0815~0815","level":3}]},"41fefe1be40860f42edae0ac8dba6ae436f2edc8a919210fd0677e823d955674":{"links":[{"lineStart":6,"lineEnd":7,"link":"根据要求构造出一个长度为M的数组","original":"[[根据要求构造出一个长度为M的数组]]","displayText":"根据要求构造出一个长度为M的数组"},{"lineStart":8,"lineEnd":19,"link":"使每个打包机器上的物品数量相等需要搬动的最小轮数","original":"[[使每个打包机器上的物品数量相等需要搬动的最小轮数]]","displayText":"使每个打包机器上的物品数量相等需要搬动的最小轮数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"需要应记的题目","level":1}]},"06b341bf12b7455ad2b2a2be2d90212c0d4381f10d59816da9aea8a553689d04":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"使每个打包机器上的物品数量相等需要搬动的最小轮数","level":1}]},"735f4a66eb012f95a6b7c59622e1079f38556e62e9f690ed92e97bf7f4c6196a":{"links":[{"lineStart":15,"lineEnd":16,"link":"整形数组中子数组累加和乘最小值的最大值","original":"[[整形数组中子数组累加和乘最小值的最大值]]","displayText":"整形数组中子数组累加和乘最小值的最大值"},{"lineStart":16,"lineEnd":17,"link":"直方图面积问题","original":"[[直方图面积问题]]","displayText":"直方图面积问题"},{"lineStart":17,"lineEnd":18,"link":"一个矩阵求内部长方形有多少个1","original":"[[一个矩阵求内部长方形有多少个1]]","displayText":"一个矩阵求内部长方形有多少个1"}],"embeds":[],"tags":[{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"单调栈是什么？","level":1}]},"63d60d30b3c12fbd4a67efeb9b2b770f3867e3e2c61b0c93154c0a707b39363a":{"links":[],"embeds":[],"tags":[],"headings":[]},"52b637800bd562e83c7833b862b79727665283ddffa242be2e528de3f7df119c":{"links":[],"embeds":[],"tags":[],"headings":[]},"71e880e1405a00fe6eedbc2d681b4f6ae0affef6e6eaec89d118e6cd65c10ce3":{"links":[],"embeds":[{"lineStart":8,"lineEnd":10,"link":"Pasted image 25.png","original":"![[Pasted image 25.png]]","displayText":"Pasted image 25.png"},{"lineStart":12,"lineEnd":14,"link":"Pasted image 27.png","original":"![[Pasted image 27.png]]","displayText":"Pasted image 27.png"}],"tags":[{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"直方图中最大面积问题","level":1}]},"e0c447ca476d0a63b3255b1fe9462b437b47b32ead60ce58bbb6e851829c852f":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"一个矩阵求内部长方形有多少个1","level":1}]},"090acd5ecf2989a1899a257c77bb565f77ff88ea8e6caa54c99f10b9722989de":{"links":[{"lineStart":6,"lineEnd":7,"link":"单调栈是什么？","original":"[[单调栈是什么？]]","displayText":"单调栈是什么？"},{"lineStart":7,"lineEnd":8,"link":"滑动窗口、单调栈怎么用？","original":"[[滑动窗口、单调栈怎么用？]]","displayText":"滑动窗口、单调栈怎么用？"},{"lineStart":8,"lineEnd":9,"link":"单调栈代码","original":"[[单调栈代码]]","displayText":"单调栈代码"},{"lineStart":12,"lineEnd":13,"link":"整形数组中子数组累加和乘最小值的最大值","original":"[[整形数组中子数组累加和乘最小值的最大值]]","displayText":"整形数组中子数组累加和乘最小值的最大值"},{"lineStart":13,"lineEnd":14,"link":"直方图中最大面积问题","original":"[[直方图中最大面积问题]]","displayText":"直方图中最大面积问题"},{"lineStart":14,"lineEnd":15,"link":"一个矩阵求内部长方形有多少个1","original":"[[一个矩阵求内部长方形有多少个1]]","displayText":"一个矩阵求内部长方形有多少个1"}],"embeds":[],"tags":[{"line":2,"tag":"#单调栈"}],"headings":[{"line":0,"heading":"单调栈","level":1},{"line":6,"heading":"[[单调栈是什么？]]","level":2},{"line":7,"heading":"[[滑动窗口、单调栈怎么用？]]","level":2},{"line":8,"heading":"[[单调栈代码]]","level":2}]},"f8a0e8122fc8a57637d3446cf2e9b9920fa8276bb7dea2121c44ba75e95ef0cd":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"累加和为aim的所有二元组跟三元组","level":1}]},"bfb11852aca4829602979f39ae7c83302b72e79e28d63007b1dd8c57f0036581":{"links":[{"lineStart":5,"lineEnd":8,"link":"项目经理和程序员","original":"[[项目经理和程序员]]","displayText":"项目经理和程序员"},{"lineStart":5,"lineEnd":8,"link":"手写堆","original":"[[手写堆]]","displayText":"手写堆"},{"lineStart":11,"lineEnd":12,"link":"KMP算法","original":"[[KMP算法]]","displayText":"KMP算法"},{"lineStart":12,"lineEnd":13,"link":"Manacher算法","original":"[[Manacher算法]]","displayText":"Manacher算法"},{"lineStart":15,"lineEnd":16,"link":"两个可能有环的单链表相交的第一个节点","original":"[[两个可能有环的单链表相交的第一个节点]]","displayText":"两个可能有环的单链表相交的第一个节点"},{"lineStart":16,"lineEnd":17,"link":"约瑟夫环问题","original":"[[约瑟夫环问题]]","displayText":"约瑟夫环问题"},{"lineStart":22,"lineEnd":23,"link":"第k小的数值对","original":"[[第k小的数值对]]","displayText":"第k小的数值对"},{"lineStart":23,"lineEnd":24,"link":"求数组调整之后的逆序对数量","original":"[[求数组调整之后的逆序对数量]]","displayText":"求数组调整之后的逆序对数量"},{"lineStart":24,"lineEnd":25,"link":"牛牛分田地","original":"[[牛牛分田地]]","displayText":"牛牛分田地"},{"lineStart":25,"lineEnd":26,"link":"旋变字符串","original":"[[旋变字符串]]","displayText":"旋变字符串"},{"lineStart":26,"lineEnd":27,"link":"整数组成的无序数组中子数组的累加和小于等于K的最大长度","original":"[[整数组成的无序数组中子数组的累加和小于等于K的最大长度]]","displayText":"整数组成的无序数组中子数组的累加和小于等于K的最大长度"},{"lineStart":27,"lineEnd":28,"link":"1~N中所有数字包含1的个数","original":"[[1~N中所有数字包含1的个数]]","displayText":"1~N中所有数字包含1的个数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"算法水平快速提高的难题","level":1},{"line":10,"heading":"面试算法的两个门神题","level":3},{"line":14,"heading":"链表问题的两个噩梦","level":3},{"line":20,"heading":"Super Hard","level":2}]},"0f122e91232ff0a59cbeca3b188708f4d4c121040aa24586dbfd670cece9a5cc":{"links":[{"lineStart":7,"lineEnd":8,"link":"第1节 滑动窗口和单调栈","original":"[[第1节 滑动窗口和单调栈]]","displayText":"第1节 滑动窗口和单调栈"},{"lineStart":8,"lineEnd":9,"link":"第2节 求斐波那契数列矩阵乘法的方法","original":"[[第2节 求斐波那契数列矩阵乘法的方法]]","displayText":"第2节 求斐波那契数列矩阵乘法的方法"},{"lineStart":9,"lineEnd":10,"link":"第3节 bfprt算法及蓄水池算法","original":"[[第3节 bfprt算法及蓄水池算法]]","displayText":"第3节 bfprt算法及蓄水池算法"},{"lineStart":10,"lineEnd":11,"link":"第4节 KMP算法","original":"[[第4节 KMP算法]]","displayText":"第4节 KMP算法"},{"lineStart":11,"lineEnd":12,"link":"第5节 Manacher算法","original":"[[第5节 Manacher算法]]","displayText":"第5节 Manacher算法"},{"lineStart":12,"lineEnd":13,"link":"第6节 Morris遍历","original":"[[第6节 Morris遍历]]","displayText":"第6节 Morris遍历"},{"lineStart":13,"lineEnd":14,"link":"第7节 线段树","original":"[[第7节 线段树]]","displayText":"第7节 线段树"},{"lineStart":17,"lineEnd":18,"link":"第9节 打表法及矩阵处理技巧","original":"[[第9节 打表法及矩阵处理技巧]]","displayText":"第9节 打表法及矩阵处理技巧"},{"lineStart":18,"lineEnd":19,"link":"第10节 数组累加和问题三连","original":"[[第10节 数组累加和问题三连]]","displayText":"第10节 数组累加和问题三连"},{"lineStart":19,"lineEnd":20,"link":"第11节 哈希函数有关的结构和岛问题","original":"[[第11节 哈希函数有关的结构和岛问题]]","displayText":"第11节 哈希函数有关的结构和岛问题"},{"lineStart":20,"lineEnd":21,"link":"第12节 如何解决资源限制类题目","original":"[[第12节 如何解决资源限制类题目]]","displayText":"第12节 如何解决资源限制类题目"},{"lineStart":21,"lineEnd":22,"link":"第13节 有序表的原理、应用、扩展","original":"[[第13节 有序表的原理、应用、扩展]]","displayText":"第13节 有序表的原理、应用、扩展"},{"lineStart":22,"lineEnd":23,"link":"第14节 SB树、跳表、红黑树","original":"[[第14节 SB树、跳表、红黑树]]","displayText":"第14节 SB树、跳表、红黑树"},{"lineStart":23,"lineEnd":24,"link":"第15节 有序表的原理、应用、扩展（二）","original":"[[第15节 有序表的原理、应用、扩展（二）]]","displayText":"第15节 有序表的原理、应用、扩展（二）"},{"lineStart":24,"lineEnd":25,"link":"第16节 AC自动机","original":"[[第16节 AC自动机]]","displayText":"第16节 AC自动机"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"进阶班课程","level":1},{"line":6,"heading":"训练营第一期","level":2},{"line":16,"heading":"训练营第二期","level":2}]},"455616267ad8159ec6c7adb13990b01e9343da7ab7530b30c2f05f3999f5cd8f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"二叉树的最大路径和","level":1}]},"cbc9de63cd3d38a72a140fed8bb2aa1a34219bb8044b6ca333350a7c37f8dff0":{"links":[{"lineStart":6,"lineEnd":7,"link":"08 二叉树的递归套路","original":"[[08 二叉树的递归套路]]","displayText":"08 二叉树的递归套路"},{"lineStart":26,"lineEnd":27,"link":"判断二叉树是不是平衡二叉树","original":"[[判断二叉树是不是平衡二叉树]]","displayText":"判断二叉树是不是平衡二叉树"},{"lineStart":27,"lineEnd":28,"link":"判断二叉树是不是满二叉树","original":"[[判断二叉树是不是满二叉树]]","displayText":"判断二叉树是不是满二叉树"},{"lineStart":28,"lineEnd":29,"link":"判断二叉树是不是搜索二叉树","original":"[[判断二叉树是不是搜索二叉树]]","displayText":"判断二叉树是不是搜索二叉树"},{"lineStart":29,"lineEnd":30,"link":"二叉树中最大的二叉搜索子树的大小","original":"[[二叉树中最大的二叉搜索子树的大小]]","displayText":"二叉树中最大的二叉搜索子树的大小"},{"lineStart":30,"lineEnd":31,"link":"二叉树中最大的二叉搜索子树的头节点","original":"[[二叉树中最大的二叉搜索子树的头节点]]","displayText":"二叉树中最大的二叉搜索子树的头节点"},{"lineStart":31,"lineEnd":32,"link":"判断二叉树中是不是完全二叉树","original":"[[判断二叉树中是不是完全二叉树]]","displayText":"判断二叉树中是不是完全二叉树"},{"lineStart":32,"lineEnd":33,"link":"二叉树上两个节点的最低公共祖先","original":"[[二叉树上两个节点的最低公共祖先]]","displayText":"二叉树上两个节点的最低公共祖先"},{"lineStart":33,"lineEnd":34,"link":"求二叉树两个节点的最大距离","original":"[[求二叉树两个节点的最大距离]]","displayText":"求二叉树两个节点的最大距离"},{"lineStart":34,"lineEnd":35,"link":"派对的最大快乐值","original":"[[派对的最大快乐值]]","displayText":"派对的最大快乐值"},{"lineStart":36,"lineEnd":37,"link":"二叉树的最大路径和","original":"[[二叉树的最大路径和]]","displayText":"二叉树的最大路径和"}],"embeds":[],"tags":[{"line":2,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"二叉树的递归套路","level":1}]},"0476714e4386ec4a3a8b2f0ecf85799a83a09dcef2c1004408f19e1f566758ef":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"单调栈代码","level":1}]},"6ae27b936344bffd4e8d086fe307416b4e33b066d2cbf4062b9cc9194a4ae5a0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"笔试过程中怎么猜测要使用的算法","level":1},{"line":5,"heading":"重要结论","level":2},{"line":13,"heading":"根据数据量反推应该使用什么样的方法","level":3}]},"3e0f33ef884b7120973e332dff418cb23b29f3613349a9d7579b4946934397c7":{"links":[{"lineStart":5,"lineEnd":7,"link":"整数反转","original":"[[整数反转]]","displayText":"整数反转"},{"lineStart":8,"lineEnd":10,"link":"字符串转换整数 (atoi)","original":"[[字符串转换整数 (atoi)]]","displayText":"字符串转换整数 (atoi)"},{"lineStart":11,"lineEnd":13,"link":"正则表达式匹配","original":"[[正则表达式匹配]]","displayText":"正则表达式匹配"},{"lineStart":14,"lineEnd":16,"link":"盛最多水的容器","original":"[[盛最多水的容器]]","displayText":"盛最多水的容器"},{"lineStart":17,"lineEnd":19,"link":"整数转罗马数字","original":"[[整数转罗马数字]]","displayText":"整数转罗马数字"},{"lineStart":20,"lineEnd":22,"link":"罗马数字转整数","original":"[[罗马数字转整数]]","displayText":"罗马数字转整数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(2)","level":1}]},"45bd340be471c811049f5decaed1befcd75b607076fc973d1c1f83d0118a1569":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"括号生成","level":1}]},"6be8bb6da9778a5a4c57cdd2e861024af2c48b9ea8d46c7a7656b5582073fa43":{"links":[{"lineStart":3,"lineEnd":5,"link":"最长公共前缀","original":"[[最长公共前缀]]","displayText":"最长公共前缀"},{"lineStart":6,"lineEnd":8,"link":"三数之和","original":"[[三数之和]]","displayText":"三数之和"},{"lineStart":9,"lineEnd":11,"link":"电话号码的字母组合","original":"[[电话号码的字母组合]]","displayText":"电话号码的字母组合"},{"lineStart":12,"lineEnd":14,"link":"删除链表的倒数第N个节点","original":"[[删除链表的倒数第N个节点]]","displayText":"删除链表的倒数第N个节点"},{"lineStart":15,"lineEnd":17,"link":"有效的括号","original":"[[有效的括号]]","displayText":"有效的括号"},{"lineStart":18,"lineEnd":20,"link":"合并两个有序链表","original":"[[合并两个有序链表]]","displayText":"合并两个有序链表"},{"lineStart":21,"lineEnd":23,"link":"括号生成","original":"[[括号生成]]","displayText":"括号生成"},{"lineStart":24,"lineEnd":26,"link":"合并K个升序链表","original":"[[合并K个升序链表]]","displayText":"合并K个升序链表"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(3)","level":1}]},"b6c37200805825ec0b6381dc9d29b52dd3563ad00e502b983ebd20957e01630f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"最长公共前缀","level":1}]},"b462965239036a359a6f9de87bac037b1f327f3ed6e45d6cc28db516af718780":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"三数之和","level":1}]},"3062592a33ad25601f99c36f0395a1e18fb44a70849ff753e4eb94f386ed6afa":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"合并K个升序链表","level":1}]},"190ba347874a1b9f94b6407cf4cbeda9da8ee0ddc96618a46ac576f79d6e692a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"合并两个有序链表","level":1}]},"505793ba3071985b23688f29abc3abf8d14a9864eafc918d359005b211216598":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"有效的括号","level":1}]},"54060d4bb5f67f341c03dbf9282c198297076252e260bc0fec5bbc515c5da718":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"删除链表的倒数第N个节点","level":1}]},"1078331eb8db2ea84e2fbaf7092504d2b52bd0267169aa03da5c6ef57af23527":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"电话号码的字母组合","level":1}]},"3ccf7a40542e03acdc559c81061bfa303e1c9d90b2bc2f6edb609ce25d0d18d3":{"links":[{"lineStart":5,"lineEnd":6,"link":"括号生成","original":"[[括号生成]]","displayText":"括号生成"},{"lineStart":6,"lineEnd":7,"link":"有效的括号","original":"[[有效的括号]]","displayText":"有效的括号"},{"lineStart":7,"lineEnd":8,"link":"括号有效配对问题","original":"[[括号有效配对问题]]","displayText":"括号有效配对问题"},{"lineStart":8,"lineEnd":9,"link":"括号有效配对问题#添加字符让括号整体有效","original":"[[括号有效配对问题#添加字符让括号整体有效]]","displayText":"括号有效配对问题#添加字符让括号整体有效"},{"lineStart":9,"lineEnd":10,"link":"最长的括号有效子串的长度","original":"[[最长的括号有效子串的长度]]","displayText":"最长的括号有效子串的长度"},{"lineStart":10,"lineEnd":11,"link":"最大嵌套的括号层数","original":"[[最大嵌套的括号层数]]","displayText":"最大嵌套的括号层数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"括号系列问题","level":1}]},"c21168b3314cfe0e6a7a6e64d4f0eb6671b78f0e54e78ef8d899a2386ddb7677":{"links":[{"lineStart":5,"lineEnd":6,"link":"寻找回文串","original":"[[寻找回文串]]","displayText":"寻找回文串"},{"lineStart":6,"lineEnd":7,"link":"最长回文子串","original":"[[最长回文子串]]","displayText":"最长回文子串"},{"lineStart":7,"lineEnd":8,"link":"最长回文子串的长度","original":"[[最长回文子串的长度]]","displayText":"最长回文子串的长度"},{"lineStart":8,"lineEnd":9,"link":"最长回文子序列长度","original":"[[最长回文子序列长度]]","displayText":"最长回文子序列长度"},{"lineStart":9,"lineEnd":10,"link":"子序列回文","original":"[[子序列回文]]","displayText":"子序列回文"},{"lineStart":10,"lineEnd":11,"link":"字符串变为回文需要添加的最少字符","original":"[[字符串变为回文需要添加的最少字符]]","displayText":"字符串变为回文需要添加的最少字符"},{"lineStart":11,"lineEnd":12,"link":"判断链表是否为回文结构","original":"[[判断链表是否为回文结构]]","displayText":"判断链表是否为回文结构"},{"lineStart":12,"lineEnd":13,"link":"最少添加多少字符使字符串变为回文串","original":"[[最少添加多少字符使字符串变为回文串]]","displayText":"最少添加多少字符使字符串变为回文串"},{"lineStart":13,"lineEnd":14,"link":"一个字符串至少切几刀,能让切出来的部分全是回文串","original":"[[一个字符串至少切几刀,能让切出来的部分全是回文串]]","displayText":"一个字符串至少切几刀,能让切出来的部分全是回文串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"回文系列问题","level":1}]},"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855":{"links":[],"embeds":[],"tags":[],"headings":[]},"d8a63aca88ec5c965e5d45e1aecd8f1e8d11c40959ed39909c11f958c2497fe9":{"links":[{"lineStart":3,"lineEnd":4,"link":"经典表达式计算递归结构","original":"[[经典表达式计算递归结构]]","displayText":"经典表达式计算递归结构"},{"lineStart":8,"lineEnd":9,"link":"计算str表达式结果","original":"[[计算str表达式结果]]","displayText":"计算str表达式结果"},{"lineStart":9,"lineEnd":10,"link":"数组中添加加减乘除运算符得到指定值的所有方法","original":"[[数组中添加加减乘除运算符得到指定值的所有方法]]","displayText":"数组中添加加减乘除运算符得到指定值的所有方法"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"表达式计算问题","level":1},{"line":6,"heading":"题目","level":2}]},"8be7f1d09fea3150c9de0d06e9b9352fed6c7c6600a1d4bd2e238def1908e46b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组中添加加减乘除运算符得到指定值的所有方法","level":1}]},"798f0cc990e868652ba167e91d1bd0622a22766e7d9c7fd910b74c4f11ee2dd9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"删除排序数组中的重复项","level":1}]},"3d28054c2f2a26dba8f3846a19cadd42bf4c9ef7d4ec204fc4446b5adac92f29":{"links":[{"lineStart":9,"lineEnd":10,"link":"KMP代码","original":"[[KMP代码]]","displayText":"KMP代码"}],"embeds":[],"tags":[{"line":4,"tag":"#KMP算法"}],"headings":[{"line":0,"heading":"实现 strStr()","level":1}]},"e9d8b7dfb855c87261d321ba68c986a93846f23d3a8044da15b33bfd621f54c8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"两数相除","level":1}]},"da184ff5e0ca71046f99a447a07186fd664f1d3b5291958c4c4acd0323dc28a2":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#二分法"}],"headings":[{"line":0,"heading":"搜索旋转排序数组","level":1}]},"f94187b909bc74722c10d7bb3de72723ed01b95ead7193f18151a7635c94370a":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#快排"}],"headings":[{"line":0,"heading":"在排序数组中查找元素的第一个和最后一个位置","level":1}]},"e4808f71e049c272b0bcac9ae25d6478e91f63ba1130ade51b5d22379208c87a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"有效的数独","level":1}]},"9b3716e1fff9e737c7291da3e3ad57a6e4dad2df4a702a2d13cfcf6f45c7b4df":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"解数独","level":1}]},"8de410854fd978a2c1b302d9396aed1ed396e2c5fcc814ed99689f6e857628ec":{"links":[{"lineStart":4,"lineEnd":6,"link":"删除排序数组中的重复项","original":"[[删除排序数组中的重复项]]","displayText":"删除排序数组中的重复项"},{"lineStart":7,"lineEnd":9,"link":"实现 strStr()","original":"[[实现 strStr()]]","displayText":"实现 strStr()"},{"lineStart":10,"lineEnd":12,"link":"两数相除","original":"[[两数相除]]","displayText":"两数相除"},{"lineStart":13,"lineEnd":15,"link":"搜索旋转排序数组","original":"[[搜索旋转排序数组]]","displayText":"搜索旋转排序数组"},{"lineStart":16,"lineEnd":18,"link":"在排序数组中查找元素的第一个和最后一个位置","original":"[[在排序数组中查找元素的第一个和最后一个位置]]","displayText":"在排序数组中查找元素的第一个和最后一个位置"},{"lineStart":19,"lineEnd":21,"link":"有效的数独","original":"[[有效的数独]]","displayText":"有效的数独"},{"lineStart":22,"lineEnd":24,"link":"解数独","original":"[[解数独]]","displayText":"解数独"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(4)","level":1}]},"05470200d4fc17ec789a1b4a040de50b361517d3bd30b87fa279b0d1d7ce1a5f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"外观数列","level":1}]},"bc261b49e13fbdcf96813fe0727aec90ebea5440c3573dd174df503b453cb444":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"缺失的第一个正数","level":1}]},"5989de1870e52194e980a90ef751925ce7fb428ba95b73646b1509588e93d407":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"接雨水","level":1}]},"ac2e509d763a7eadf3242004e998b64f632aa747989a9970ad8244e4050f4637":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"通配符匹配","level":1}]},"a9f53808c48dd58074058fdb99643cb0c854d16def127afbee181e89535e8e5d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"全排列","level":1}]},"2ac277da3164a308725f7d00c25d0bf72129e8754083d7efcb75b8bf4d985286":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"旋转图像","level":1}]},"fbc2caf9b248c1e55cbca4d68194cce51a1e5ea486b1fae26cb043113f6636fa":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字母异位词分组","level":1}]},"b5862e6f4aff89e90e42632bcf36ed825913f47bd352d30838d33cd221bdf465":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Pow(x, n)","level":1}]},"d6fa69460d155f1a15b438b4e6a8ab91947d0c96a0a8ff2c60bb73d9d15762b0":{"links":[{"lineStart":20,"lineEnd":22,"link":"两个字符串的最长公共子串","original":"[[两个字符串的最长公共子串]]","displayText":"两个字符串的最长公共子串"},{"lineStart":20,"lineEnd":22,"link":"两个字符串的最长公共子序列问题","original":"[[两个字符串的最长公共子序列问题]]","displayText":"两个字符串的最长公共子序列问题"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字符串子串和子序列的区别","level":1}]},"cefa8af8bdc97e45bfa33ee90b1fd8692a016b5c3aacdbe2a297001da6755177":{"links":[{"lineStart":11,"lineEnd":12,"link":"手写堆代码","original":"[[手写堆代码]]","displayText":"手写堆代码"},{"lineStart":12,"lineEnd":13,"link":"指定结构中加入的所有字符串中，词频最大的K个","original":"[[指定结构中加入的所有字符串中，词频最大的K个]]","displayText":"指定结构中加入的所有字符串中，词频最大的K个"},{"lineStart":13,"lineEnd":14,"link":"项目经理和程序员","original":"[[项目经理和程序员]]","displayText":"项目经理和程序员"}],"embeds":[],"tags":[{"line":2,"tag":"#手写堆"}],"headings":[{"line":0,"heading":"手写堆结构","level":1}]},"eeb241e7561a4b88350a6618a25501d60f15fe9d8e9a0ac717a306d377041758":{"links":[{"lineStart":4,"lineEnd":7,"link":"通配符匹配","original":"[[通配符匹配]]","displayText":"通配符匹配"},{"lineStart":4,"lineEnd":7,"link":"字符串匹配问题","original":"[[字符串匹配问题]]","displayText":"字符串匹配问题"},{"lineStart":4,"lineEnd":7,"link":"正则表达式匹配","original":"[[正则表达式匹配]]","displayText":"正则表达式匹配"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"字符串匹配系列问题","level":1}]},"351faee69e3409bc973f7ab24a174efae293677d8487c404304911bbf2b2fe5f":{"links":[{"lineStart":1,"lineEnd":2,"link":"基础课14","original":"[[基础课14]]","displayText":"基础课14"}],"embeds":[],"tags":[],"headings":[]},"828fa0a7ee81a061c3e069f4c4a6da519c4b27bff590a2bf36001cee2e3a4536":{"links":[{"lineStart":6,"lineEnd":7,"link":"两个字符的最长公共子序列","original":"[[两个字符的最长公共子序列]]","displayText":"两个字符的最长公共子序列"},{"lineStart":9,"lineEnd":10,"link":"打印目录结构","original":"[[打印目录结构]]","displayText":"打印目录结构"},{"lineStart":12,"lineEnd":13,"link":"已知中序遍历数组和先序遍历数组，返回后序遍历数组","original":"[[已知中序遍历数组和先序遍历数组，返回后序遍历数组]]","displayText":"已知中序遍历数组和先序遍历数组，返回后序遍历数组"},{"lineStart":13,"lineEnd":14,"link":"最长递增子序列问题的O(NxlogN)的解法","original":"[[最长递增子序列问题的O(NxlogN)的解法]]","displayText":"最长递增子序列问题的O(NxlogN)的解法"},{"lineStart":14,"lineEnd":15,"link":"给你一批信封，返回最大的嵌套层数","original":"[[给你一批信封，返回最大的嵌套层数]]","displayText":"给你一批信封，返回最大的嵌套层数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(五)","level":1}]},"ee791ad2aaba8dac272e6e146d47957ed70fce7ffde2fdf7e6853636e35d8329":{"links":[{"lineStart":10,"lineEnd":11,"link":"字符串子串和子序列的区别","original":"[[字符串子串和子序列的区别]]","displayText":"字符串子串和子序列的区别"}],"embeds":[],"tags":[{"line":2,"tag":"#一个样本做行一个样本做列"}],"headings":[{"line":0,"heading":"两个字符的最长公共子序列","level":1}]},"980d327c6d814551273c2febbddd07025215df44960fcfabe95f98ca439a9a2a":{"links":[{"lineStart":11,"lineEnd":12,"link":"字符串子串和子序列的区别","original":"[[字符串子串和子序列的区别]]","displayText":"字符串子串和子序列的区别"}],"embeds":[],"tags":[{"line":2,"tag":"#一个样本做行一个样本做列"},{"line":2,"tag":"#后缀数组"}],"headings":[{"line":0,"heading":"两个字符串的最长公共子串","level":1}]},"33e5ad8d4403be435946b9c7af26a5ff93214a81d497522cd3c576734a9eeaf4":{"links":[{"lineStart":6,"lineEnd":7,"link":"一个样本做行一个样本做列的模型","original":"[[一个样本做行一个样本做列的模型]]","displayText":"一个样本做行一个样本做列的模型"}],"embeds":[],"tags":[{"line":2,"tag":"#多样本位置全对应的尝试模型"}],"headings":[{"line":0,"heading":"多样本位置全对应的尝试模型","level":1}]},"52628a623723dce1c0ce7824556086e72cacea44d246f13254ad08c816e9729d":{"links":[{"lineStart":57,"lineEnd":58,"link":"从左往右的尝试模型","original":"[[从左往右的尝试模型]]","displayText":"从左往右的尝试模型"},{"lineStart":59,"lineEnd":60,"link":"范围上的尝试模型","original":"[[范围上的尝试模型]]","displayText":"范围上的尝试模型"},{"lineStart":61,"lineEnd":62,"link":"多样本位置全对应的尝试模型","original":"[[多样本位置全对应的尝试模型]]","displayText":"多样本位置全对应的尝试模型"},{"lineStart":61,"lineEnd":62,"link":"一个样本做行一个样本做列的模型","original":"[[一个样本做行一个样本做列的模型]]","displayText":"一个样本做行一个样本做列的模型"},{"lineStart":63,"lineEnd":64,"link":"寻找业务限制的尝试模型","original":"[[寻找业务限制的尝试模型]]","displayText":"寻找业务限制的尝试模型"},{"lineStart":86,"lineEnd":87,"link":"动态规划中的四边形不等式优化","original":"[[动态规划中的四边形不等式优化]]","displayText":"动态规划中的四边形不等式优化"},{"lineStart":90,"lineEnd":91,"link":"机器人必须走 K 步，最终能来到P位置的方法有多少种","original":"[[机器人必须走 K 步，最终能来到P位置的方法有多少种]]","displayText":"机器人必须走 K 步，最终能来到P位置的方法有多少种"},{"lineStart":91,"lineEnd":92,"link":"多少张贴纸可以贴出给定字符串","original":"[[多少张贴纸可以贴出给定字符串]]","displayText":"多少张贴纸可以贴出给定字符串"},{"lineStart":92,"lineEnd":93,"link":"背包问题的动态规划解法","original":"[[背包问题的动态规划解法]]","displayText":"背包问题的动态规划解法"},{"lineStart":93,"lineEnd":94,"link":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数","original":"[[A,B玩家从左右两边拿纸牌,返回最后获胜者的分数]]","displayText":"A,B玩家从左右两边拿纸牌,返回最后获胜者的分数"},{"lineStart":94,"lineEnd":95,"link":"两个字符串的最长公共子序列问题","original":"[[两个字符串的最长公共子序列问题]]","displayText":"两个字符串的最长公共子序列问题"},{"lineStart":95,"lineEnd":96,"link":"让所有咖啡杯变干净的最早完成时间","original":"[[让所有咖啡杯变干净的最早完成时间]]","displayText":"让所有咖啡杯变干净的最早完成时间"},{"lineStart":96,"lineEnd":97,"link":"“马”从(0,0)位置出发，必须走k步最后落在(x,y)上的方法数有多少种","original":"[[“马”从(0,0)位置出发，必须走k步最后落在(x,y)上的方法数有多少种]]","displayText":"“马”从(0,0)位置出发，必须走k步最后落在(x,y)上的方法数有多少种"},{"lineStart":97,"lineEnd":98,"link":"矩阵路径中最小的路径和","original":"[[矩阵路径中最小的路径和 ]]","displayText":"矩阵路径中最小的路径和"},{"lineStart":98,"lineEnd":99,"link":"组成aim面值使用的货币的方法数","original":"[[组成aim面值使用的货币的方法数]]","displayText":"组成aim面值使用的货币的方法数"}],"embeds":[],"tags":[{"line":2,"tag":"#暴力递归"},{"line":2,"tag":"#动态规划"}],"headings":[{"line":0,"heading":"暴力递归到动态规划","level":1},{"line":7,"heading":"什么暴力递归可以继续优化？","level":2},{"line":14,"heading":"暴力递归和动态规划的关系","level":2},{"line":22,"heading":"面试题和动态规划的关系","level":2},{"line":30,"heading":"如何找到某个问题的动态规划方式？","level":2},{"line":39,"heading":"面试中设计暴力递归过程的原则","level":2},{"line":48,"heading":"知道了面试中设计暴力递归过程的原则，然后呢？","level":2},{"line":55,"heading":"常见的4种尝试模型","level":2},{"line":65,"heading":"如何分析有没有重复解","level":2},{"line":71,"heading":"暴力递归到动态规划的套路","level":2},{"line":81,"heading":"动态规划的进一步优化","level":2}]},"38f09cb4e9f0b4de1b8ba1abbb69d7c7ef2ad43f1ebe97cca58b132ce4c2d445":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#递归"}],"headings":[{"line":0,"heading":"已知中序遍历数组和先序遍历数组，返回后序遍历数组","level":1}]},"8df429f4f63d725e1a214e4d22e6f767f1196f40db94367188abc1889768e3d6":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#最长递增子序列"}],"headings":[{"line":0,"heading":"给你一批信封，返回最大的嵌套层数","level":1}]},"b687c447b23207396bdd54690c8cb2cd97d7959c2ac75a0897c84ccfc79dce9f":{"links":[{"lineStart":9,"lineEnd":10,"link":"将str1编辑成str2的最小代价","original":"[[将str1编辑成str2的最小代价]]","displayText":"将str1编辑成str2的最小代价"}],"embeds":[],"tags":[{"line":2,"tag":"#编辑距离"}],"headings":[{"line":0,"heading":"编辑距离系列问题","level":1}]},"a4a8257f7e73c06e59388bd4742ef9fcdbe95634fc8cce8f9f8f495a0aadce53":{"links":[{"lineStart":7,"lineEnd":8,"link":"最长递增子序列问题的O(NxlogN)的解法","original":"[[最长递增子序列问题的O(NxlogN)的解法]]","displayText":"最长递增子序列问题的O(NxlogN)的解法"},{"lineStart":9,"lineEnd":10,"link":"给你一批信封，返回最大的嵌套层数","original":"[[给你一批信封，返回最大的嵌套层数]]","displayText":"给你一批信封，返回最大的嵌套层数"},{"lineStart":11,"lineEnd":12,"link":"连接最多点的曲线最多穿过的点数","original":"[[连接最多点的曲线最多穿过的点数]]","displayText":"连接最多点的曲线最多穿过的点数"}],"embeds":[],"tags":[{"line":2,"tag":"#最长递增子序列"}],"headings":[{"line":0,"heading":"最长递增子序列系列问题","level":1}]},"ca8e5b68c4c6e95ae4895abc2d6ada48124084caeff45c9fe920a3ce80dee937":{"links":[],"embeds":[],"tags":[{"line":2,"tag":"#最长递增子序列"}],"headings":[{"line":0,"heading":"连接最多点的曲线最多穿过的点数","level":1}]},"4141ef910e0c87853624a994e864753bb2e7447091c22b82c247796e20d3adbb":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"打家劫舍系列问题","level":1}]},"9e9b75f48fdfcf08021e6ac618f104b32f287dee35a40295676103c6ad9d6d42":{"links":[{"lineStart":8,"lineEnd":9,"link":"经典面试题目6","original":"[[经典面试题目6]]","displayText":"经典面试题目6"},{"lineStart":8,"lineEnd":9,"link":"训练营第3期/第4节","original":"[[训练营第3期/第4节]]","displayText":"训练营第3期/第4节"},{"lineStart":11,"lineEnd":12,"link":"经典面试题目7","original":"[[经典面试题目7]]","displayText":"经典面试题目7"},{"lineStart":11,"lineEnd":12,"link":"训练营第3期/第5节","original":"[[训练营第3期/第5节]]","displayText":"训练营第3期/第5节"},{"lineStart":12,"lineEnd":13,"link":"经典面试题目8","original":"[[经典面试题目8]]","displayText":"经典面试题目8"},{"lineStart":12,"lineEnd":13,"link":"训练营第3期/第6节","original":"[[训练营第3期/第6节]]","displayText":"训练营第3期/第6节"},{"lineStart":13,"lineEnd":14,"link":"经典面试题目9","original":"[[经典面试题目9]]","displayText":"经典面试题目9"},{"lineStart":13,"lineEnd":14,"link":"训练营第3期/第6节","original":"[[训练营第3期/第6节]]","displayText":"训练营第3期/第6节"},{"lineStart":13,"lineEnd":14,"link":"训练营第3期/第7节","original":"[[训练营第3期/第7节]]","displayText":"训练营第3期/第7节"},{"lineStart":14,"lineEnd":15,"link":"经典面试题目10","original":"[[经典面试题目10]]","displayText":"经典面试题目10"},{"lineStart":14,"lineEnd":15,"link":"训练营第3期/第7节","original":"[[训练营第3期/第7节]]","displayText":"训练营第3期/第7节"},{"lineStart":14,"lineEnd":15,"link":"训练营第3期/第8节","original":"[[训练营第3期/第8节]]","displayText":"训练营第3期/第8节"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"复习安排","level":1},{"line":6,"heading":"0904","level":2}]},"10d79a13e89c1f4a32b39a973f4baee41a2dcb09a50e6f5f9449287d163fe24c":{"links":[{"lineStart":5,"lineEnd":7,"link":"会议室能容纳的最多宣讲场次","original":"[[会议室能容纳的最多宣讲场次]]","displayText":"会议室能容纳的最多宣讲场次"},{"lineStart":5,"lineEnd":7,"link":"背包能装下最多的价值","original":"[[背包能装下最多的价值]]","displayText":"背包能装下最多的价值"},{"lineStart":8,"lineEnd":13,"link":"打印n层汉诺塔从最左边移动到最右边的全部过程","original":"[[打印n层汉诺塔从最左边移动到最右边的全部过程]]","displayText":"打印n层汉诺塔从最左边移动到最右边的全部过程"},{"lineStart":8,"lineEnd":13,"link":"打印n层汉诺塔从最左边移动到最右边的全部过程","original":"[[打印n层汉诺塔从最左边移动到最右边的全部过程]]","displayText":"打印n层汉诺塔从最左边移动到最右边的全部过程"},{"lineStart":8,"lineEnd":13,"link":"打印一个字符串的全部子序列","original":"[[打印一个字符串的全部子序列]]","displayText":"打印一个字符串的全部子序列"},{"lineStart":8,"lineEnd":13,"link":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列","original":"[[打印一个字符串的全部子序列，要求不要出现重复字面值的子序列]]","displayText":"打印一个字符串的全部子序列，要求不要出现重复字面值的子序列"},{"lineStart":8,"lineEnd":13,"link":"打印一个字符串的全部排列","original":"[[打印一个字符串的全部排列]]","displayText":"打印一个字符串的全部排列"},{"lineStart":15,"lineEnd":16,"link":"在无序数组中求第K小的数","original":"[[在无序数组中求第K小的数]]","displayText":"在无序数组中求第K小的数"},{"lineStart":17,"lineEnd":18,"link":"给定一个数组arr，返回子数组的最大累加和","original":"[[给定一个数组arr，返回子数组的最大累加和]]","displayText":"给定一个数组arr，返回子数组的最大累加和"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"基础面试题","level":1}]},"ce3db17d931e623a0213df3d112c85b9f5a586d672804e0456c3d7490a80d4b9":{"links":[{"lineStart":7,"lineEnd":8,"link":"给定一个数组arr，返回子数组的最大累加和","original":"[[给定一个数组arr，返回子数组的最大累加和]]","displayText":"给定一个数组arr，返回子数组的最大累加和"},{"lineStart":9,"lineEnd":10,"link":"求最大子数组异或和","original":"[[求最大子数组异或和]]","displayText":"求最大子数组异或和"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"假设答案法","level":1}]},"04cb801cd9b19e3555e93bf4feb78d491a1cce6659e5bcc8fb6a17dc039f4c32":{"links":[{"lineStart":6,"lineEnd":7,"link":"leetcode高频题目全讲(1)","original":"[[leetcode高频题目全讲(1)]]","displayText":"leetcode高频题目全讲(1)"},{"lineStart":7,"lineEnd":8,"link":"leetcode高频题目全讲(2)","original":"[[leetcode高频题目全讲(2)]]","displayText":"leetcode高频题目全讲(2)"},{"lineStart":10,"lineEnd":11,"link":"leetcode高频题目全讲(3)","original":"[[leetcode高频题目全讲(3)]]","displayText":"leetcode高频题目全讲(3)"},{"lineStart":11,"lineEnd":12,"link":"leetcode高频题目全讲(4)","original":"[[leetcode高频题目全讲(4)]]","displayText":"leetcode高频题目全讲(4)"},{"lineStart":13,"lineEnd":14,"link":"leetcode高频题目全讲(5)","original":"[[leetcode高频题目全讲(5)]]","displayText":"leetcode高频题目全讲(5)"},{"lineStart":14,"lineEnd":15,"link":"leetcode高频题目全讲(6)","original":"[[leetcode高频题目全讲(6)]]","displayText":"leetcode高频题目全讲(6)"},{"lineStart":17,"lineEnd":18,"link":"leetcode高频题目全讲(7)","original":"[[leetcode高频题目全讲(7)]]","displayText":"leetcode高频题目全讲(7)"},{"lineStart":18,"lineEnd":19,"link":"leetcode高频题目全讲(8)","original":"[[leetcode高频题目全讲(8)]]","displayText":"leetcode高频题目全讲(8)"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"LeetCode高频题","level":1},{"line":5,"heading":"Week 0815~0815","level":3},{"line":9,"heading":"Week 0829~0830","level":3},{"line":16,"heading":"Week 0905~0906","level":3}]},"1e47329280aa1a009a01e783c76bae5cc503595b425eb5fd263002213bcc8411":{"links":[{"lineStart":3,"lineEnd":5,"link":"外观数列","original":"[[外观数列]]","displayText":"外观数列"},{"lineStart":6,"lineEnd":8,"link":"缺失的第一个正数","original":"[[缺失的第一个正数]]","displayText":"缺失的第一个正数"},{"lineStart":9,"lineEnd":11,"link":"接雨水","original":"[[接雨水]]","displayText":"接雨水"},{"lineStart":12,"lineEnd":14,"link":"通配符匹配","original":"[[通配符匹配]]","displayText":"通配符匹配"},{"lineStart":15,"lineEnd":17,"link":"全排列","original":"[[全排列]]","displayText":"全排列"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(5)","level":1}]},"22a7d15195df17dd01b181381c0f89cbf8c53ec304cd258bc66d8eaab2cd3651":{"links":[],"embeds":[],"tags":[{"line":3,"tag":"#二叉树的递归套路"}],"headings":[{"line":0,"heading":"最长同值路径","level":1}]},"deda7052f125bbe763471ba771a2683dd17c2cceaa4683cf7f0b0fceb0cba496":{"links":[{"lineStart":3,"lineEnd":6,"link":"旋转图像","original":"[[旋转图像]]","displayText":"旋转图像"},{"lineStart":3,"lineEnd":6,"link":"原地旋转正方形矩阵","original":"[[原地旋转正方形矩阵]]","displayText":"原地旋转正方形矩阵"},{"lineStart":3,"lineEnd":6,"link":"转圈打印矩阵","original":"[[转圈打印矩阵]]","displayText":"转圈打印矩阵"},{"lineStart":7,"lineEnd":8,"link":"搜索旋转排序数组","original":"[[搜索旋转排序数组]]","displayText":"搜索旋转排序数组"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"矩阵旋转系列问题","level":1}]},"1c2730709c09407baf1a08e03712e003d8f74f991def439751379f9bb4668c20":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"N 皇后","level":1}]},"388851e10fb537906ce38c9fc88a210e48078f8bf95ed0362096f5baf8311b6c":{"links":[{"lineStart":3,"lineEnd":5,"link":"最长同值路径","original":"[[最长同值路径]]","displayText":"最长同值路径"},{"lineStart":6,"lineEnd":8,"link":"旋转图像","original":"[[旋转图像]]","displayText":"旋转图像"},{"lineStart":9,"lineEnd":11,"link":"字母异位词分组","original":"[[字母异位词分组]]","displayText":"字母异位词分组"},{"lineStart":12,"lineEnd":14,"link":"Pow(x, n)","original":"[[Pow(x, n)]]","displayText":"Pow(x, n)"},{"lineStart":15,"lineEnd":17,"link":"N 皇后","original":"[[N 皇后]]","displayText":"N 皇后"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(7)","level":1}]},"01f9dfe030f37c9112a3a7a7a01b49d7774011fb9292a85801e91962dbce0df1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"leetcode高频题目全讲(6)","level":1}]},"b34217f5ebbfab82751ad3370e0063167b0408390ac6f6e1baf4eb1baf303c6b":{"links":[{"lineStart":5,"lineEnd":6,"link":"数字转化为字符串的结果数","original":"[[数字转化为字符串的结果数]]","displayText":"数字转化为字符串的结果数"},{"lineStart":6,"lineEnd":7,"link":"背包能装下最多的价值","original":"[[背包能装下最多的价值]]","displayText":"背包能装下最多的价值"},{"lineStart":7,"lineEnd":8,"link":"给定一个正整数n, 求裂开的方法数","original":"[[给定一个正整数n, 求裂开的方法数]]","displayText":"给定一个正整数n, 求裂开的方法数"},{"lineStart":8,"lineEnd":9,"link":"背包能装下最多的价值","original":"[[背包能装下最多的价值]]","displayText":"背包能装下最多的价值"}],"embeds":[],"tags":[{"line":2,"tag":"#从左往右的尝试模型"}],"headings":[{"line":0,"heading":"暴力递归到动态规划--从左往右的尝试模型","level":1}]},"99ee7b6f7d143a0d5a7b2c1febad18e8829b1fa31bdc12d042f925a324533fe2":{"links":[{"lineStart":5,"lineEnd":6,"link":"完美字符串","original":"[[完美字符串]]","displayText":"完美字符串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"0905期","level":1}]},"a44c1a4b218aaab7d54e8c790a6311af4030ec217e87048834fc20309850bbb3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"完美字符串","level":1}]},"0e6f460c95b22811adc4e68546411cdf69ba85dc32ef57dd94cd1a923e570f5e":{"links":[{"lineStart":13,"lineEnd":14,"link":"最长的括号有效子串的长度","original":"[[最长的括号有效子串的长度]]","displayText":"最长的括号有效子串的长度"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求解子串,子数组问题","level":1}]},"e237f97ea36a38465d34324c2e56449b37b59d1d66268dba44899caa38692e14":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"辗转相除法求最大公约数","level":1}]},"182f4d64306e4d5e76c3c85977c67f93ecce50d7d907c44e5327ddb579ada2ea":{"links":[{"lineStart":7,"lineEnd":8,"link":"求素数","original":"[[求素数]]","displayText":"求素数"},{"lineStart":8,"lineEnd":9,"link":"牛顿迭代法开根号","original":"[[牛顿迭代法开根号]]","displayText":"牛顿迭代法开根号"},{"lineStart":9,"lineEnd":10,"link":"求最大公约数","original":"[[求最大公约数]]","displayText":"求最大公约数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数学基础知识点","level":1}]},"c6d4ecbd7d5c1d2406ba584e7f6e884514fe509f3b835de447f04a8339e34d57":{"links":[{"lineStart":15,"lineEnd":16,"link":"辗转相除法求最大公约数","original":"[[辗转相除法求最大公约数]]","displayText":"辗转相除法求最大公约数"}],"embeds":[],"tags":[],"headings":[]},"d2717b912edea08a7ab71680442ec60ab1fe2fd473269484af714e215722f734":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"求素数","level":1}]},"562005eaa839d82b498c33f7e1a207d602b1a232bd4a4b6bb1adfd88bc556637":{"links":[{"lineStart":4,"lineEnd":7,"link":"给定一个数组arr，返回子数组的最大累加和","original":"[[给定一个数组arr，返回子数组的最大累加和]]","displayText":"给定一个数组arr，返回子数组的最大累加和"},{"lineStart":4,"lineEnd":7,"link":"给定一个整型矩阵，返回子矩阵的最大累计和","original":"[[给定一个整型矩阵，返回子矩阵的最大累计和]]","displayText":"给定一个整型矩阵，返回子矩阵的最大累计和"},{"lineStart":4,"lineEnd":7,"link":"长方形中任意矩阵的累加和","original":"[[长方形中任意矩阵的累加和]]","displayText":"长方形中任意矩阵的累加和"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"数组累加和系列问题","level":1}]},"c90d6145c7aeb39ccd2a99babf8b9a4eda3ebfb5b16ff789735a90a8cd9f4c27":{"links":[{"lineStart":0,"lineEnd":1,"link":"问字符串s2最少删除多少字符可以成为s1的子串","original":"[[问字符串s2最少删除多少字符可以成为s1的子串]]","displayText":"问字符串s2最少删除多少字符可以成为s1的子串"},{"lineStart":1,"lineEnd":2,"link":"将str1编辑成str2的最小代价","original":"[[将str1编辑成str2的最小代价]]","displayText":"将str1编辑成str2的最小代价"},{"lineStart":2,"lineEnd":3,"link":"求完全二叉树节点的个数","original":"[[求完全二叉树节点的个数]]","displayText":"求完全二叉树节点的个数"},{"lineStart":3,"lineEnd":4,"link":"LRU内存替换算法的实现","original":"[[LRU内存替换算法的实现]]","displayText":"LRU内存替换算法的实现"},{"lineStart":4,"lineEnd":5,"link":"两个字符串的最短的变换路径","original":"[[两个字符串的最短的变换路径]]","displayText":"两个字符串的最短的变换路径"},{"lineStart":5,"lineEnd":6,"link":"主播们能获得的最大收益","original":"[[主播们能获得的最大收益]]","displayText":"主播们能获得的最大收益"}],"embeds":[],"tags":[],"headings":[]},"5577bde63584e2dadedf35c1b1ea0013c826478df0ced753c9ab9642e5a91fee":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"将str1编辑成str2的最小代价","level":1}]},"4e876d286a202178b697714a164185cdf9c63d6724953a65fd856f349e6e773e":{"links":[{"lineStart":10,"lineEnd":13,"link":"两个字符串的最长公共子序列问题","original":"[[两个字符串的最长公共子序列问题]]","displayText":"两个字符串的最长公共子序列问题"},{"lineStart":10,"lineEnd":13,"link":"两个字符串的最长公共子串","original":"[[两个字符串的最长公共子串]]","displayText":"两个字符串的最长公共子串"},{"lineStart":10,"lineEnd":13,"link":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数","original":"[[给定两个字符串S和T，返回S子序列等于T的不同子序列个数]]","displayText":"给定两个字符串S和T，返回S子序列等于T的不同子序列个数"},{"lineStart":14,"lineEnd":15,"link":"将str1编辑成str2的最小代价","original":"[[将str1编辑成str2的最小代价]]","displayText":"将str1编辑成str2的最小代价"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"一个样本做行一个样本做列的模型","level":1}]},"26c0edf61d3199f3549e858bc7046350ac87bb6438de9eb3a1a2bce952de125c":{"links":[{"lineStart":9,"lineEnd":10,"link":"删除链表的倒数第N个节点","original":"[[删除链表的倒数第N个节点]]","displayText":"删除链表的倒数第N个节点"},{"lineStart":11,"lineEnd":12,"link":"两个字符串的最长公共子串","original":"[[两个字符串的最长公共子串]]","displayText":"两个字符串的最长公共子串"},{"lineStart":13,"lineEnd":14,"link":"两个可能有环的单链表相交的第一个节点","original":"[[两个可能有环的单链表相交的第一个节点]]","displayText":"两个可能有环的单链表相交的第一个节点"},{"lineStart":15,"lineEnd":16,"link":"缺失的第一个正数","original":"[[缺失的第一个正数]]","displayText":"缺失的第一个正数"},{"lineStart":17,"lineEnd":18,"link":"已知中序遍历数组和先序遍历数组，返回后序遍历数组","original":"[[已知中序遍历数组和先序遍历数组，返回后序遍历数组]]","displayText":"已知中序遍历数组和先序遍历数组，返回后序遍历数组"},{"lineStart":19,"lineEnd":20,"link":"最长递增子序列问题的O(NxlogN)的解法","original":"[[最长递增子序列问题的O(NxlogN)的解法]]","displayText":"最长递增子序列问题的O(NxlogN)的解法"},{"lineStart":21,"lineEnd":22,"link":"将str1编辑成str2的最小代价","original":"[[将str1编辑成str2的最小代价]]","displayText":"将str1编辑成str2的最小代价"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"需要反复看的题目","level":1}]},"c1e401fd4bbe6fae7294773e2933a6f9b636ed1f51359b32ea7cac86a2b395d0":{"links":[{"lineStart":6,"lineEnd":12,"link":"问字符串s2最少删除多少字符可以成为s1的子串","original":"[[问字符串s2最少删除多少字符可以成为s1的子串]]","displayText":"问字符串s2最少删除多少字符可以成为s1的子串"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"根据具体输入数据状况看菜下饭的题目","level":1}]},"ee2da3d38be542d58ae066d2ff3c38c7dd2dbff8d84b21b768228c93b014af32":{"links":[{"lineStart":5,"lineEnd":6,"link":"给定一个数组arr，返回子数组的最大累加和","original":"[[给定一个数组arr，返回子数组的最大累加和]]","displayText":"给定一个数组arr，返回子数组的最大累加和"},{"lineStart":6,"lineEnd":7,"link":"给定一个整型矩阵，返回子矩阵的最大累计和","original":"[[给定一个整型矩阵，返回子矩阵的最大累计和]]","displayText":"给定一个整型矩阵，返回子矩阵的最大累计和"},{"lineStart":7,"lineEnd":8,"link":"搜索二叉树转换为有序的双向链表","original":"[[搜索二叉树转换为有序的双向链表]]","displayText":"搜索二叉树转换为有序的双向链表"},{"lineStart":10,"lineEnd":11,"link":"将str1编辑成str2的最小代价","original":"[[将str1编辑成str2的最小代价]]","displayText":"将str1编辑成str2的最小代价"},{"lineStart":11,"lineEnd":12,"link":"问字符串s2最少删除多少字符可以成为s1的子串","original":"[[问字符串s2最少删除多少字符可以成为s1的子串]]","displayText":"问字符串s2最少删除多少字符可以成为s1的子串"},{"lineStart":12,"lineEnd":13,"link":"求完全二叉树节点的个数","original":"[[求完全二叉树节点的个数]]","displayText":"求完全二叉树节点的个数"}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"经典面试题目(六)","level":1}]}},"algorithmVersion":12}